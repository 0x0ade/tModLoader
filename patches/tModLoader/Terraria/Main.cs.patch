--- src/Terraria\Terraria\Main.cs
+++ src/tModLoader\Terraria\Main.cs
@@ -48,6 +_,8 @@
 using Terraria.IO;
 using Terraria.Localization;
 using Terraria.Map;
+using Terraria.ModLoader;
+using Terraria.ModLoader.IO;
 using Terraria.Net;
 using Terraria.ObjectData;
 using Terraria.Social;
@@ -155,7 +_,7 @@
 		public static int AnnouncementBoxRange = -1;
 		public static Vector2 destroyerHB = new Vector2(0f, 0f);
 		public static FavoritesFile LocalFavoriteData = new FavoritesFile(Main.SavePath + "/favorites.json", false);
-		public static FavoritesFile CloudFavoritesData = new FavoritesFile("/favorites.json", true);
+		public static FavoritesFile CloudFavoritesData = new FavoritesFile("/ModLoader/favorites.json", true);
 		public static FileMetadata WorldFileMetadata;
 		public static FileMetadata MapFileMetadata;
 		private AchievementManager _achievements;
@@ -194,11 +_,13 @@
 		public static bool UseHeatDistortion = true;
 		public static int npcStreamSpeed = 60;
 		public static int musicError = 0;
+		public static int soundError = 0;
+		public static int ambientError = 0;
 		public static bool dedServFPS = false;
 		public static int dedServCount1 = 0;
 		public static int dedServCount2 = 0;
 		public static bool superFast = false;
-		public static int MaxShopIDs = 22;
+		public static int MaxShopIDs = 22 + 1;
 		public static bool[] hairLoaded = new bool[134];
 		public static bool[] wingsLoaded = new bool[38];
 		public static bool[] goreLoaded = new bool[1087];
@@ -478,7 +_,7 @@
 		private static bool flameRingLoaded;
 		private Texture2D flameRingTexture;
 		private Texture2D mapDeathTexture;
-		private RenderTarget2D[,] mapTarget = new RenderTarget2D[Main.mapTargetX, Main.mapTargetY];
+		public RenderTarget2D[,] mapTarget = new RenderTarget2D[Main.mapTargetX, Main.mapTargetY];
 		private RenderTarget2D mapSectionTexture;
 		public static bool[,] initMap = new bool[Main.mapTargetX, Main.mapTargetY];
 		public static bool[,] mapWasContentLost = new bool[Main.mapTargetX, Main.mapTargetY];
@@ -539,12 +_,12 @@
 		private int lastTileX;
 		private int firstTileY;
 		private int lastTileY;
-		private double bgParallax;
-		private int bgStart;
-		private int bgLoops;
+		internal double bgParallax;
+		internal int bgStart;
+		internal int bgLoops;
 		private int bgStartY;
 		private int bgLoopsY;
-		private int bgTop;
+		internal int bgTop;
 		public static int renderCount = 99;
 		public static GraphicsDeviceManager graphics;
 		public static SpriteBatch spriteBatch;
@@ -1052,7 +_,7 @@
 		public static AudioEngine engine;
 		public static SoundBank soundBank;
 		public static WaveBank waveBank;
-		public static Cue[] music = new Cue[42];
+		public static MusicWrapper[] music = new MusicWrapper[42];
 		public static float[] musicFade = new float[42];
 		public static float musicVolume = 0.75f;
 		public static float ambientVolume = 0.75f;
@@ -1311,9 +_,9 @@
 		public static List<WorldFileData> WorldList = new List<WorldFileData>();
 		public static WorldFileData ActiveWorldFileData = new WorldFileData();
 		public static string WorldPath = Main.SavePath + Path.DirectorySeparatorChar + "Worlds";
-		public static string CloudWorldPath = "worlds";
+		public static string CloudWorldPath = "ModLoader/worlds";
 		public static string PlayerPath = Main.SavePath + Path.DirectorySeparatorChar + "Players";
-		public static string CloudPlayerPath = "players";
+		public static string CloudPlayerPath = "ModLoader/players";
 		public static Preferences Configuration = new Preferences(Main.SavePath + Path.DirectorySeparatorChar + "config.json", false, false);
 		public static Preferences InputProfiles = new Preferences(Main.SavePath + Path.DirectorySeparatorChar + "input profiles.json", false, false);
 		public static string[] itemName = new string[3884];
@@ -2036,7 +_,7 @@
 		private int selectedMenu2 = -1;
 		public static int selectedPlayer = 0;
 		public static int selectedWorld = 0;
-		public static int menuMode = 0;
+		public static int menuMode = Interface.loadModsID;
 		public static int menuSkip = 0;
 		private static Item cpItem = new Item();
 		public int textBlinkerCount;
@@ -2052,7 +_,7 @@
 		private static int UI_ScreenAnchorX = Main.screenWidth - 800;
 		private static int UIDisplay_ManaPerStar = 20;
 		private static float UIDisplay_LifePerHeart = 20f;
-		private static int rare = 0;
+		public static int rare = 0;
 		public static int hairStart = 0;
 		private static int oldHairStyle;
 		private static Microsoft.Xna.Framework.Color oldHairColor;
@@ -2064,7 +_,7 @@
 		public static Player dresserDummy;
 		private bool _needToSetupDrawInterfaceLayers = true;
 		private List<MethodSequenceListItem> _drawInterfaceLayers;
-		private static GameTime _drawInterfaceGameTime;
+		public static GameTime _drawInterfaceGameTime;
 		private static bool _MouseOversCanClear = false;
 		private static Vector2 _itemIconCacheScreenPosition;
 		private static int _itemIconCacheSelectedItemID;
@@ -2102,12 +_,12 @@
 		};
 		private static float tranSpeed = 0.05f;
 		private static float atmo = 0f;
-		private static float bgScale = 1f;
-		private static int bgW = (int)(1024f * Main.bgScale);
-		private static Microsoft.Xna.Framework.Color backColor = Microsoft.Xna.Framework.Color.White;
-		private static Microsoft.Xna.Framework.Color trueBackColor = Main.backColor;
-		private float screenOff;
-		private float scAdj;
+		internal static float bgScale = 1f;
+		internal static int bgW = (int)(1024f * Main.bgScale);
+		internal static Microsoft.Xna.Framework.Color backColor = Microsoft.Xna.Framework.Color.White;
+		internal static Microsoft.Xna.Framework.Color trueBackColor = Main.backColor;
+		internal float screenOff;
+		internal float scAdj;
 		private float cTop;
 		private static SlotVector<ActiveSound> _trackedSounds = new SlotVector<ActiveSound>(4096);
 
@@ -2257,6 +_,8 @@
 				return (Main.mapStyle != 1 || !Main.mapEnabled || Main.screenHeight >= 820) && (Main.mapStyle == 1 || Main.screenWidth >= 855) && !PlayerInput.UsingGamepad;
 			}
 		}
+
+		public static ulong TileFrameSeed => Main._tileFrameSeed;
 
 		public static void FindAnnouncementBoxStatus()
 		{
@@ -2375,6 +_,7 @@
 				flag2 = false;
 				Main.anglerQuest = Main.rand.Next(Main.anglerQuestItemNetIDs.Length);
 				int num = Main.anglerQuestItemNetIDs[Main.anglerQuest];
+				//patch file: num, flag2
 				if (num == 2454 && (!Main.hardMode || WorldGen.crimson))
 				{
 					flag2 = true;
@@ -2431,6 +_,7 @@
 				{
 					flag2 = true;
 				}
+				ItemLoader.IsAnglerQuestAvailable(num, ref flag2);
 			}
 			NetMessage.SendAnglerQuest(-1);
 		}
@@ -2649,6 +_,7 @@
 					}
 				});
 			Main.Configuration.Put("QuickLaunch", Main.SkipAssemblyLoad);
+			ModLoader.ModLoader.SaveConfiguration();
 			bool flag = Main.Configuration.Save(true);
 			return flag && PlayerInput.Save();
 		}
@@ -2958,6 +_,7 @@
 					Main.cMapAlphaDown
 				};
 			}
+			ModLoader.ModLoader.LoadConfiguration();
 			PlayerInput.Load();
 			if (num2 < 165)
 			{
@@ -3120,9 +_,11 @@
 				FileUtilities.Delete(Main.PlayerList[i].Path, Main.PlayerList[i].IsCloudSave);
 				FileUtilities.Delete(Main.PlayerList[i].Path + ".bak", Main.PlayerList[i].IsCloudSave);
 			}
+			//patch file
 			catch
 			{
 			}
+			PlayerIO.ErasePlayer(Main.PlayerList[i].Path, Main.PlayerList[i].IsCloudSave);
 			try
 			{
 				string path = Main.PlayerList[i].Path.Substring(0, Main.PlayerList[i].Path.Length - 4);
@@ -3155,6 +_,7 @@
 				{
 					SocialAPI.Cloud.Delete(Main.WorldList[i].Path);
 				}
+				WorldIO.EraseWorld(Main.WorldList[i].Path, Main.WorldList[i].IsCloudSave);
 				Main.LoadWorlds();
 			}
 			catch
@@ -3429,6 +_,10 @@
 							{
 								string text3 = text.Substring(10);
 								Main.worldName = text3;
+							}
+							if (text.Length >= 8 && text.Substring(0, 8).ToLower() == "modpath=")
+							{
+								ModLoader.ModLoader.modPath = text.Substring(8);
 							}
 							if (text.Length > 8 && text.Substring(0, 8).ToLower() == "banlist=")
 							{
@@ -3579,7 +_,7 @@
 			}
 			else
 			{
-				Console.Title = "Terraria Server " + Main.versionNumber2;
+				Console.Title = "Terraria Server " + Main.versionNumber2 + " - " + ModLoader.ModLoader.versionedName;
 			}
 			Main.dedServ = true;
 			Main.showSplash = false;
@@ -3589,13 +_,14 @@
 				Lang.setLang(true);
 			}
 			Lang.setLang(false);
+			ModLoader.ModLoader.do_Load(null);
 			while (Main.worldPathName == null || Main.worldPathName == "")
 			{
 				bool flag = true;
 				while (flag)
 				{
 					Main.LoadWorlds();
-					Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2));
+					Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2) + " - " + ModLoader.ModLoader.versionedName);
 					Console.WriteLine("");
 					for (int i = 0; i < Main.WorldList.Count; i++)
 					{
@@ -3614,6 +_,7 @@
 					text3 = text3 + new string('\t', num - text3.Length / 8) + Language.GetTextValue("CLI.DeleteWorld_Description");
 					Console.WriteLine(text2);
 					Console.WriteLine(text3);
+					Console.WriteLine("m\t\tMods Menu");
 					Console.WriteLine("");
 					Console.Write(Language.GetTextValue("CLI.ChooseWorld"));
 					string text4 = Console.ReadLine();
@@ -3877,10 +_,16 @@
 						}
 						goto IL_783;
 					}
+					else if (text4 == "m" || text4 == "M")
+					{
+						Interface.ServerModMenu();
+						continue;
+					}
 					else
 					{
 						try
 						{
+							//patch file
 							int num6 = Convert.ToInt32(text4);
 							num6--;
 							if (num6 >= 0 && num6 < Main.WorldList.Count)
@@ -4022,6 +_,9 @@
 					Console.WriteLine(Main.statusText);
 				}
 			}
+			//run one tick to JIT all the game content now rather than when a player connects
+			Console.WriteLine("Running one update...");
+			Update(new GameTime());
 			try
 			{
 				Console.Clear();
@@ -4041,20 +_,11 @@
 				Main.startDedInput();
 			}
 			stopwatch.Start();
-			double num9 = 16.666666666666668;
-			double num10 = 0.0;
-			int num11 = 0;
-			Stopwatch stopwatch2 = new Stopwatch();
-			stopwatch2.Start();
+			double delta = 1000 / 60D;
+			double target = delta;
 			while (!Netplay.disconnect)
 			{
-				double totalMilliseconds = stopwatch.Elapsed.TotalMilliseconds;
-				if (totalMilliseconds + num10 >= num9)
-				{
-					num11++;
-					num10 += totalMilliseconds - num9;
-					stopwatch.Reset();
-					stopwatch.Start();
+				{
 					if (Main.oldStatusText != Main.statusText)
 					{
 						Main.oldStatusText = Main.statusText;
@@ -4064,26 +_,23 @@
 					{
 						this.Update(new GameTime());
 					}
+					else
+					{
+						Netplay.OnUpdate();
+					}
 					if (Main.OnTick != null)
 					{
 						Main.OnTick();
 					}
-					double num12 = stopwatch.Elapsed.TotalMilliseconds + num10;
-					if (num12 < num9)
-					{
-						int num13 = (int)(num9 - num12) - 1;
-						if (num13 > 1)
-						{
-							Thread.Sleep(num13 - 1);
-							if (!Netplay.anyClients)
-							{
-								num10 = 0.0;
-								Thread.Sleep(10);
-							}
-						}
-					}
-				}
-				Thread.Sleep(0);
+					double now = stopwatch.ElapsedMilliseconds;
+					double remaining = target - now;
+					target += delta; //new target
+					if (target < now) //can't catch up, reset target
+					{
+						target = now + delta;
+					}
+					Thread.Sleep(Math.Max((int)remaining, 0));
+				}
 			}
 		}
 
@@ -4285,7 +_,7 @@
 					}
 					else if (text == Language.GetTextValue("CLI.Version_Command"))
 					{
-						Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber));
+						Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber) + " - " + ModLoader.ModLoader.versionedName);
 					}
 					else
 					{
@@ -4511,7 +_,7 @@
 		public static void InitLifeBytes()
 		{
 			NPC nPC = new NPC();
-			for (int i = -65; i < 580; i++)
+			for (int i = -65; i < NPCLoader.NPCCount; i++)
 			{
 				if (i != 0)
 				{
@@ -7188,6 +_,10 @@
 				TexturePackSupport.Enabled = true;
 			}
 			TexturePackSupport.FindTexturePack();
+			for (int i = 1; i < 42; i++)
+			{
+				Main.music[i] = new MusicWrapper();
+			}
 			TextureManager.Initialize();
 			try
 			{
@@ -7201,7 +_,7 @@
 				Main.waveBank = new WaveBank(Main.engine, "Content" + Path.DirectorySeparatorChar + "Wave Bank.xwb");
 				for (int i = 1; i < 42; i++)
 				{
-					Main.music[i] = Main.soundBank.GetCue("Music_" + i);
+					Main.music[i] = new MusicWrapper(Main.soundBank.GetCue("Music_" + i));
 				}
 				Main.soundMech[0] = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Mech_0");
 				Main.soundInstanceMech[0] = Main.soundMech[0].CreateInstance();
@@ -8312,6 +_,7 @@
 					bool flag13 = false;
 					Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)Main.screenPosition.X, (int)Main.screenPosition.Y, Main.screenWidth, Main.screenHeight);
 					int num = 5000;
+					int modMusic = -1;
 					for (int l = 0; l < 200; l++)
 					{
 						if (Main.npc[l].active)
@@ -8526,7 +_,7 @@
 							{
 								num2 = 1;
 							}
-							if (num2 == 0)
+							if (num2 == 0 && (Main.npc[l].modNPC == null || Main.npc[l].modNPC.music < 0))
 							{
 								goto IL_5F6;
 							}
@@ -8535,6 +_,10 @@
 							{
 								goto IL_5F6;
 							}
+							if (Main.npc[l].modNPC != null && Main.npc[l].modNPC.music >= 0 && modMusic < 0)
+							{
+								modMusic = Main.npc[l].modNPC.music;
+ 							}
 							if (num2 == 1)
 							{
 								flag2 = true;
@@ -8630,6 +_,10 @@
 						if (flag8)
 						{
 							this.newMusic = 38;
+						}
+						else if (modMusic >= 0)
+						{
+							this.newMusic = modMusic;
 						}
 						else if (flag10)
 						{
@@ -8855,6 +_,7 @@
 							this.newMusic = 32;
 						}
 					}
+					ModHooks.UpdateMusic(ref this.newMusic);
 					if (Main.gameMenu || Main.musicVolume == 0f)
 					{
 						Main.musicBox2 = -1;
@@ -9021,6 +_,10 @@
 						if (Main.musicBox == 38)
 						{
 							this.newMusic = 40;
+						}
+						if (Main.musicBox >= Main.maxMusic)
+						{
+							this.newMusic = Main.musicBox;
 						}
 						if (Main.musicBox == 39)
 						{
@@ -9042,12 +_,12 @@
 							num8 = 0f;
 							Main.curMusic = 0;
 						}
-						if (NPC.MoonLordCountdown == 1 && Main.curMusic >= 1 && Main.curMusic < 42)
+						if (NPC.MoonLordCountdown == 1 && Main.curMusic >= 1 && Main.curMusic < Main.music.Length)
 						{
 							Main.musicFade[Main.curMusic] = 0f;
 						}
 					}
-					for (int m = 1; m < 42; m++)
+					for (int m = 1; m < Main.music.Length; m++)
 					{
 						if (m == 28)
 						{
@@ -9062,7 +_,7 @@
 								}
 								else if (!Main.music[m].IsPlaying)
 								{
-									Main.music[m] = Main.soundBank.GetCue("Music_" + m);
+									Main.music[m].cue = Main.soundBank.GetCue("Music_" + m);
 									Main.music[m].Play();
 									Main.music[m].SetVariable("Volume", Main.musicFade[m] * Main.ambientVolume);
 								}
@@ -9109,7 +_,10 @@
 						{
 							if (!Main.music[m].IsPlaying)
 							{
-								Main.music[m] = Main.soundBank.GetCue("Music_" + m);
+								if (m < Main.maxMusic)
+								{
+									Main.music[m].cue = Main.soundBank.GetCue("Music_" + m);
+								}
 								Main.music[m].Play();
 								Main.music[m].SetVariable("Volume", Main.musicFade[m] * Main.musicVolume * num8);
 							}
@@ -11605,23 +_,33 @@
 					Main.OnEnginePreload();
 				}
 			}
-			this.DoUpdate(gameTime);
-			CinematicManager.Instance.Update(gameTime);
-			if (Main.netMode == 2)
-			{
-				for (int i = 0; i < 256; i++)
-				{
-					if (Netplay.Clients[i].Socket != null)
-					{
-						Netplay.Clients[i].Socket.SendQueuedPackets();
-					}
-				}
-				return;
-			}
-			if (Main.netMode == 1)
-			{
-				Netplay.Connection.Socket.SendQueuedPackets();
-			}
+			// TODO, should I put everything in the try catch? this is new stuff.
+			// also, vanilla itself now separated update and doupdate
+			try
+			{
+				this.DoUpdate(gameTime);
+				CinematicManager.Instance.Update(gameTime);
+				if (Main.netMode == 2)
+				{
+					for (int i = 0; i < 256; i++)
+					{
+						if (Netplay.Clients[i].Socket != null)
+						{
+							Netplay.Clients[i].Socket.SendQueuedPackets();
+						}
+					}
+					return;
+				}
+				if (Main.netMode == 1)
+				{
+					Netplay.Connection.Socket.SendQueuedPackets();
+				}
+			}
+			catch (Exception e)
+			{
+				ErrorLogger.LogException(e);
+			}
+
 		}
 
 		protected void DoUpdate(GameTime gameTime)
@@ -11664,6 +_,7 @@
 				Main.netMode = Main._targetNetMode;
 				Main._hasPendingNetmodeChange = false;
 			}
+			Netplay.OnUpdate();
 			if (CaptureManager.Instance.IsCapturing)
 			{
 				return;
@@ -12343,6 +_,7 @@
 						Main.wallFrameCounter[144] = 0;
 					}
 				}
+				WallLoader.AnimateWalls();
 				Main.tileFrameCounter[12]++;
 				if (Main.tileFrameCounter[12] > 5)
 				{
@@ -12908,6 +_,7 @@
 						Main.tileFrame[464] = 0;
 					}
 				}
+				TileLoader.AnimateTiles();
 				Main.CritterCages();
 				Main.UpdateDrawAnimations();
 				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F10) && !Main.drawingPlayerChat && !Main.editSign && !Main.editChest)
@@ -13020,6 +_,7 @@
 					Main.toggleFullscreen = true;
 				}
 				PlayerInput.UpdateInput();
+				ModLoader.ModHooks.PostUpdateInput();
 				UILinkPointNavigator.Update();
 				Main.oldKeyState = Main.keyState;
 				Main.keyState = Keyboard.GetState();
@@ -13094,6 +_,7 @@
 							Main.player[Main.myPlayer].chatOverhead.NewMessage(Main.chatText, Main.chatLength / 2);
 							Main.NewTextMultiline(text, false, white, Main.TextMaxLengthForScreen);
 						}
+						ModHooks.ChatInput(Main.chatText);
 						Main.chatText = "";
 						Main.drawingPlayerChat = false;
 						Main.chatRelease = false;
@@ -13103,7 +_,7 @@
 						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
 					}
 				}
-				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && Main.netMode == 1 && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt) && Main.hasFocus)
+				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt) && Main.hasFocus)
 				{
 					if (Main.chatRelease && !Main.drawingPlayerChat && !Main.editSign && !Main.editChest && !Main.gameMenu && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Escape))
 					{
@@ -13263,6 +_,10 @@
 				{
 					flag = true;
 				}
+				if (!PlayerHooks.CustomBiomesMatch(Main.player[Main.myPlayer], Main.clientPlayer))
+				{
+					flag = true;
+				}
 				if (flag)
 				{
 					NetMessage.SendData(36, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
@@ -13326,6 +_,7 @@
 				{
 					NetMessage.SendData(115, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 				}
+				PlayerHooks.SendClientChanges(Main.player[Main.myPlayer], Main.clientPlayer);
 			}
 			if (Main.netMode == 1)
 			{
@@ -14189,6 +_,7 @@
 			string[] array = new string[num3];
 			bool[] array2 = new bool[num3];
 			bool[] array3 = new bool[num3];
+			string[] tooltipNames = new string[num3];
 			for (int i = 0; i < num3; i++)
 			{
 				array2[i] = false;
@@ -14209,16 +_,21 @@
 						")"
 					});
 			}
+			tooltipNames[0] = "ItemName";
 			if (Main.toolTip.favorited)
 			{
 				array[num4++] = Lang.tip[56];
+				tooltipNames[num4 - 1] = "Favorite";
 				array[num4++] = Lang.tip[57];
+				tooltipNames[num4 - 1] = "FavoriteDesc";
 			}
 			if (Main.toolTip.social)
 			{
 				array[num4] = Lang.tip[0];
+				tooltipNames[num4] = "Social";
 				num4++;
 				array[num4] = Lang.tip[1];
+				tooltipNames[num4] = "SocialDesc";
 				num4++;
 			}
 			else
@@ -14227,9 +_,13 @@
 				{
 					float num5 = 5E-06f;
 					int damage = Main.toolTip.damage;
+					Player player = Main.player[Main.myPlayer];
 					if (Main.toolTip.melee)
 					{
-						array[num4] = string.Concat((int)(Main.player[Main.myPlayer].meleeDamage * (float)damage + num5));
+						int damage2 = (int)(player.meleeDamage * (float)damage + num5);
+						ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+						PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+						array[num4] = string.Concat(damage2);
 						string[] array5;
 						IntPtr intPtr;
 						(array5 = array)[(int)(intPtr = (IntPtr)num4)] = array5[(int)intPtr] + Lang.tip[2];
@@ -14253,21 +_,30 @@
 						{
 							num6 *= Main.player[Main.myPlayer].rocketDamage;
 						}
-						array[num4] = string.Concat((int)(num6 + num5));
+						int damage2 = (int)(num6 + num5);
+						ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+						PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+						array[num4] = string.Concat(damage2);
 						string[] array6;
 						IntPtr intPtr2;
 						(array6 = array)[(int)(intPtr2 = (IntPtr)num4)] = array6[(int)intPtr2] + Lang.tip[3];
 					}
 					else if (Main.toolTip.magic)
 					{
-						array[num4] = string.Concat((int)(Main.player[Main.myPlayer].magicDamage * (float)damage + num5));
+						int damage2 = (int)(player.magicDamage * (float)damage + num5);
+						ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+						PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+						array[num4] = string.Concat(damage2);
 						string[] array7;
 						IntPtr intPtr3;
 						(array7 = array)[(int)(intPtr3 = (IntPtr)num4)] = array7[(int)intPtr3] + Lang.tip[4];
 					}
 					else if (Main.toolTip.thrown)
 					{
-						array[num4] = string.Concat((int)(Main.player[Main.myPlayer].thrownDamage * (float)damage + num5));
+						int damage2 = (int)(player.thrownDamage * (float)damage + num5);
+						ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+						PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+						array[num4] = string.Concat(damage2);
 						string[] array8;
 						IntPtr intPtr4;
 						(array8 = array)[(int)(intPtr4 = (IntPtr)num4)] = array8[(int)intPtr4] + Lang.tip[58];
@@ -14277,10 +_,17 @@
 						if (Main.toolTip.type == 3829 || Main.toolTip.type == 3830 || Main.toolTip.type == 3831)
 						{
 							array[num4] = string.Concat((int)((Main.player[Main.myPlayer].minionDamage * (float)damage + num5) * 3f));
+							int damage2 = (int)((player.minionDamage * (float)damage + num5) * 3f);
+							ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+							PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+							array[num4] = string.Concat(damage2);
 						}
 						else
 						{
-							array[num4] = string.Concat((int)(Main.player[Main.myPlayer].minionDamage * (float)damage + num5));
+							int damage2 = (int)(player.minionDamage * (float)damage + num5);
+							ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+							PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+							array[num4] = string.Concat(damage2);
 						}
 						string[] array4;
 						IntPtr intPtr;
@@ -14288,34 +_,42 @@
 					}
 					else
 					{
-						array[num4] = string.Concat(damage);
+						int damage2 = damage;
+						ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+						PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+						array[num4] = string.Concat(damage2);
 						string[] array4;
 						IntPtr intPtr;
 						(array4 = array)[(int)(intPtr = (IntPtr)num4)] = array4[(int)intPtr] + Lang.tip[55];
 					}
+					tooltipNames[num4] = "Damage";
 					num4++;
 					if (Main.toolTip.melee)
 					{
 						int num7 = Main.player[Main.myPlayer].meleeCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.toolTip.crit;
 						array[num4] = num7 + Lang.tip[5];
+						tooltipNames[num4] = "CritChance";
 						num4++;
 					}
 					else if (Main.toolTip.ranged)
 					{
 						int num8 = Main.player[Main.myPlayer].rangedCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.toolTip.crit;
 						array[num4] = num8 + Lang.tip[5];
+						tooltipNames[num4] = "CritChance";
 						num4++;
 					}
 					else if (Main.toolTip.magic)
 					{
 						int num9 = Main.player[Main.myPlayer].magicCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.toolTip.crit;
 						array[num4] = num9 + Lang.tip[5];
+						tooltipNames[num4] = "CritChance";
 						num4++;
 					}
 					else if (Main.toolTip.thrown)
 					{
 						int num10 = Main.player[Main.myPlayer].thrownCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.toolTip.crit;
 						array[num4] = num10 + Lang.tip[5];
+						tooltipNames[num4] = "CritChance";
 						num4++;
 					}
 					if (Main.toolTip.useStyle > 0 && !Main.toolTip.summon)
@@ -14352,6 +_,7 @@
 						{
 							array[num4] = Lang.tip[13];
 						}
+						tooltipNames[num4] = "Speed";
 						num4++;
 					}
 					float num11 = Main.toolTip.knockBack;
@@ -14367,6 +_,8 @@
 					{
 						num11 += num11 * (1f - Main.player[Main.myPlayer].stealth);
 					}
+					ItemLoader.GetWeaponKnockback(Main.toolTip, player, ref num11);
+					PlayerHooks.GetWeaponKnockback(player, Main.toolTip, ref num11);
 					if (num11 == 0f)
 					{
 						array[num4] = Lang.tip[14];
@@ -14403,58 +_,70 @@
 					{
 						array[num4] = Lang.tip[22];
 					}
+					tooltipNames[num4] = "Knockback";
 					num4++;
 				}
 				if (Main.toolTip.fishingPole > 0)
 				{
 					array[num4] = Language.GetTextValue("GameUI.PrecentFishingPower", Main.toolTip.fishingPole);
+					tooltipNames[num4] = "FishingPower";
 					num4++;
 					array[num4] = Language.GetTextValue("GameUI.BaitRequired");
+					tooltipNames[num4] = "NeedsBait";
 					num4++;
 				}
 				if (Main.toolTip.bait > 0)
 				{
 					array[num4] = Language.GetTextValue("GameUI.BaitPower", Main.toolTip.bait);
+					tooltipNames[num4] = "BaitPower";
 					num4++;
 				}
 				if (Main.toolTip.headSlot > 0 || Main.toolTip.bodySlot > 0 || Main.toolTip.legSlot > 0 || Main.toolTip.accessory || Main.projHook[Main.toolTip.shoot] || Main.toolTip.mountType != -1 || (Main.toolTip.buffType > 0 && (Main.lightPet[Main.toolTip.buffType] || Main.vanityPet[Main.toolTip.buffType])))
 				{
 					array[num4] = Lang.tip[23];
+					tooltipNames[num4] = "Equipable";
 					num4++;
 				}
 				if (Main.toolTip.tileWand > 0)
 				{
 					array[num4] = Lang.tip[52] + Lang.itemName(Main.toolTip.tileWand, false);
+					tooltipNames[num4] = "WandConsumes";
 					num4++;
 				}
 				if (Main.toolTip.questItem)
 				{
 					array[num4] = Lang.inter[65];
+					tooltipNames[num4] = "Quest";
 					num4++;
 				}
 				if (Main.toolTip.vanity)
 				{
 					array[num4] = Lang.tip[24];
+					tooltipNames[num4] = "Vanity";
 					num4++;
 				}
 				if (Main.toolTip.defense > 0)
 				{
 					array[num4] = Main.toolTip.defense + Lang.tip[25];
+					tooltipNames[num4] = "Defense";
 					num4++;
 				}
 				if (Main.toolTip.pick > 0)
 				{
 					array[num4] = Main.toolTip.pick + Lang.tip[26];
+					tooltipNames[num4] = "PickPower";
 					num4++;
 				}
 				if (Main.toolTip.axe > 0)
 				{
 					array[num4] = Main.toolTip.axe * 5 + Lang.tip[27];
+					tooltipNames[num4] = "AxePower";
 					num4++;
 				}
 				if (Main.toolTip.hammer > 0)
 				{
 					array[num4] = Main.toolTip.hammer + Lang.tip[28];
+					tooltipNames[num4] = "HammerPower";
 					num4++;
 				}
 				if (Main.toolTip.tileBoost != 0)
@@ -14468,6 +_,7 @@
 					{
 						array[num4] = tileBoost + Lang.tip[54];
 					}
+					tooltipNames[num4] = "TileBoost";
 					num4++;
 				}
 				if (Main.toolTip.healLife > 0)
@@ -14480,6 +_,7 @@
 							" ",
 							Lang.tip[30]
 						});
+					tooltipNames[num4] = "HealLife";
 					num4++;
 				}
 				if (Main.toolTip.healMana > 0)
@@ -14492,6 +_,7 @@
 							" ",
 							Lang.tip[31]
 						});
+					tooltipNames[num4] = "HealMana";
 					num4++;
 				}
 				if (Main.toolTip.mana > 0 && (Main.toolTip.type != 127 || !Main.player[Main.myPlayer].spaceGun))
@@ -14504,6 +_,7 @@
 							" ",
 							Lang.tip[31]
 						});
+					tooltipNames[num4] = "UseMana";
 					num4++;
 				}
 				if (Main.toolTip.createWall > 0 || Main.toolTip.createTile > -1)
@@ -14511,22 +_,26 @@
 					if (Main.toolTip.type != 213 && Main.toolTip.tileWand < 1)
 					{
 						array[num4] = Lang.tip[33];
+						tooltipNames[num4] = "Placeable";
 						num4++;
 					}
 				}
 				else if (Main.toolTip.ammo > 0 && !Main.toolTip.notAmmo)
 				{
 					array[num4] = Lang.tip[34];
+					tooltipNames[num4] = "Ammo";
 					num4++;
 				}
 				else if (Main.toolTip.consumable)
 				{
 					array[num4] = Lang.tip[35];
+					tooltipNames[num4] = "Consumable";
 					num4++;
 				}
 				if (Main.toolTip.material)
 				{
 					array[num4] = Lang.tip[36];
+					tooltipNames[num4] = "Material";
 					num4++;
 				}
 				if (Main.toolTip.toolTip != null)
@@ -14539,21 +_,25 @@
 					{
 						array[num4] = this.TooltipMousetextProcessor(Main.toolTip.toolTip);
 					}
+					tooltipNames[num4] = "Tooltip";
 					num4++;
 				}
 				if (Main.toolTip.toolTip2 != null)
 				{
 					array[num4] = this.TooltipMousetextProcessor(Main.toolTip.toolTip2);
+					tooltipNames[num4] = "Tooltip2";
 					num4++;
 				}
 				if ((Main.toolTip.type == 3818 || Main.toolTip.type == 3819 || Main.toolTip.type == 3820 || Main.toolTip.type == 3824 || Main.toolTip.type == 3825 || Main.toolTip.type == 3826 || Main.toolTip.type == 3829 || Main.toolTip.type == 3830 || Main.toolTip.type == 3831 || Main.toolTip.type == 3832 || Main.toolTip.type == 3833 || Main.toolTip.type == 3834) && !Main.player[Main.myPlayer].downedDD2EventAnyDifficulty)
 				{
 					array[num4] = Lang.misc[104];
+					tooltipNames[num4] = "EtherianManaWarning";
 					num4++;
 				}
 				if (Main.toolTip.buffType == 26 && Main.expertMode)
 				{
 					array[num4] = Lang.misc[40];
+					tooltipNames[num4] = "WellFedExpert";
 					num4++;
 				}
 				if (Main.toolTip.buffTime > 0)
@@ -14568,12 +_,14 @@
 						text = Math.Round((double)Main.toolTip.buffTime / 60.0) + Lang.tip[38];
 					}
 					array[num4] = text;
+					tooltipNames[num4] = "BuffTime";
 					num4++;
 				}
 				if (Main.toolTip.type == 3262 || Main.toolTip.type == 3282 || Main.toolTip.type == 3283 || Main.toolTip.type == 3284 || Main.toolTip.type == 3285 || Main.toolTip.type == 3286 || Main.toolTip.type == 3316 || Main.toolTip.type == 3315 || Main.toolTip.type == 3317 || Main.toolTip.type == 3291 || Main.toolTip.type == 3389)
 				{
 					array[num4] = " ";
 					num = num4;
+					tooltipNames[num4] = "OneDropLogo";
 					num4++;
 				}
 				if (Main.toolTip.prefix > 0)
@@ -14601,6 +_,7 @@
 							array3[num4] = true;
 						}
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixDamage";
 						num4++;
 					}
 					if (Main.cpItem.useAnimation != Main.toolTip.useAnimation)
@@ -14622,6 +_,7 @@
 							array3[num4] = true;
 						}
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixSpeed";
 						num4++;
 					}
 					if (Main.cpItem.crit != Main.toolTip.crit)
@@ -14640,6 +_,7 @@
 							array3[num4] = true;
 						}
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixCritChance";
 						num4++;
 					}
 					if (Main.cpItem.mana != Main.toolTip.mana)
@@ -14660,6 +_,7 @@
 							array3[num4] = true;
 						}
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixUseMana";
 						num4++;
 					}
 					if (Main.cpItem.scale != Main.toolTip.scale)
@@ -14680,6 +_,7 @@
 							array3[num4] = true;
 						}
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixSize";
 						num4++;
 					}
 					if (Main.cpItem.shootSpeed != Main.toolTip.shootSpeed)
@@ -14700,6 +_,7 @@
 							array3[num4] = true;
 						}
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixShootSpeed";
 						num4++;
 					}
 					if (Main.cpItem.knockBack != knockBack)
@@ -14720,135 +_,158 @@
 							array3[num4] = true;
 						}
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixKnockback";
 						num4++;
 					}
 					if (Main.toolTip.prefix == 62)
 					{
 						array[num4] = "+1" + Lang.tip[25];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDefense";
 						num4++;
 					}
 					if (Main.toolTip.prefix == 63)
 					{
 						array[num4] = "+2" + Lang.tip[25];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDefense";
 						num4++;
 					}
 					if (Main.toolTip.prefix == 64)
 					{
 						array[num4] = "+3" + Lang.tip[25];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDefense";
 						num4++;
 					}
 					if (Main.toolTip.prefix == 65)
 					{
 						array[num4] = "+4" + Lang.tip[25];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDefense";
 						num4++;
 					}
 					if (Main.toolTip.prefix == 66)
 					{
 						array[num4] = "+20 " + Lang.tip[31];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMaxMana";
 						num4++;
 					}
 					if (Main.toolTip.prefix == 67)
 					{
 						array[num4] = "+2" + Lang.tip[5];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccCritChance";
 						num4++;
 					}
 					if (Main.toolTip.prefix == 68)
 					{
 						array[num4] = "+4" + Lang.tip[5];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccCritChance";
 						num4++;
 					}
 					if (Main.toolTip.prefix == 69)
 					{
 						array[num4] = "+1" + Lang.tip[39];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDamage";
 						num4++;
 					}
 					if (Main.toolTip.prefix == 70)
 					{
 						array[num4] = "+2" + Lang.tip[39];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDamage";
 						num4++;
 					}
 					if (Main.toolTip.prefix == 71)
 					{
 						array[num4] = "+3" + Lang.tip[39];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDamage";
 						num4++;
 					}
 					if (Main.toolTip.prefix == 72)
 					{
 						array[num4] = "+4" + Lang.tip[39];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDamage";
 						num4++;
 					}
 					if (Main.toolTip.prefix == 73)
 					{
 						array[num4] = "+1" + Lang.tip[46];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMoveSpeed";
 						num4++;
 					}
 					if (Main.toolTip.prefix == 74)
 					{
 						array[num4] = "+2" + Lang.tip[46];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMoveSpeed";
 						num4++;
 					}
 					if (Main.toolTip.prefix == 75)
 					{
 						array[num4] = "+3" + Lang.tip[46];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMoveSpeed";
 						num4++;
 					}
 					if (Main.toolTip.prefix == 76)
 					{
 						array[num4] = "+4" + Lang.tip[46];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMoveSpeed";
 						num4++;
 					}
 					if (Main.toolTip.prefix == 77)
 					{
 						array[num4] = "+1" + Lang.tip[47];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMeleeSpeed";
 						num4++;
 					}
 					if (Main.toolTip.prefix == 78)
 					{
 						array[num4] = "+2" + Lang.tip[47];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMeleeSpeed";
 						num4++;
 					}
 					if (Main.toolTip.prefix == 79)
 					{
 						array[num4] = "+3" + Lang.tip[47];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMeleeSpeed";
 						num4++;
 					}
 					if (Main.toolTip.prefix == 80)
 					{
 						array[num4] = "+4" + Lang.tip[47];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMeleeSpeed";
 						num4++;
 					}
 				}
 				if (Main.toolTip.wornArmor && Main.player[Main.myPlayer].setBonus != "")
 				{
 					array[num4] = Lang.tip[48] + " " + Main.player[Main.myPlayer].setBonus;
+					tooltipNames[num4] = "SetBonus";
 					num4++;
 				}
 			}
 			if (Main.toolTip.expert)
 			{
 				array[num4] = Language.GetTextValue("GameUI.Expert");
+				tooltipNames[num4] = "Expert";
 				num4++;
 			}
 			float num19 = (float)Main.mouseTextColor / 255f;
+			//patch file: num20
 			float num20 = num19;
 			int a = (int)Main.mouseTextColor;
 			if (Main.npcShop > 0)
@@ -14955,6 +_,7 @@
 					{
 						array[num4] = Lang.tip[50] + " " + text2;
 					}
+					tooltipNames[num4] = "Price";
 					num4++;
 					if (num21 > 0)
 					{
@@ -14976,11 +_,15 @@
 				else if (Main.toolTip.type != 3817)
 				{
 					array[num4] = Lang.tip[51];
+					tooltipNames[num4] = "Price";
 					num4++;
 					color = new Microsoft.Xna.Framework.Color((int)((byte)(120f * num20)), (int)((byte)(120f * num20)), (int)((byte)(120f * num20)), a);
 				}
 			}
 			Vector2 zero = Vector2.Zero;
+			Microsoft.Xna.Framework.Color?[] overrideColor;
+			ItemLoader.ModifyTooltips(Main.toolTip, ref num4, tooltipNames, ref array,
+				ref array2, ref array3, ref num, out overrideColor);
 			int num26 = 0;
 			for (int j = 0; j < num4; j++)
 			{
@@ -15122,6 +_,10 @@
 					else if (k == num4 - 1)
 					{
 						baseColor = color;
+					}
+					if (overrideColor[k].HasValue)
+					{
+						baseColor = overrideColor[k].Value * num20;
 					}
 					ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, Main.fontMouseText, array[k], new Vector2((float)X, (float)(Y + num27)), baseColor, 0f, Vector2.Zero, Vector2.One, -1f, 2f);
 				}
@@ -15138,7 +_,7 @@
 			if (Main.bannerMouseOver)
 			{
 				int num = 0;
-				for (int i = 0; i < 267; i++)
+				for (int i = 0; i < NPCLoader.NPCCount; i++)
 				{
 					if (Item.BannerToNPC(i) != 0 && Main.player[Main.myPlayer].NPCBannerBuff[i])
 					{
@@ -15170,6 +_,7 @@
 					}
 				}
 			}
+			BuffLoader.CustomBuffTipSize(Main.buffString, list);
 			Vector2 zero = Vector2.Zero;
 			foreach (Vector2 current in list)
 			{
@@ -15220,7 +_,7 @@
 			if (Main.bannerMouseOver)
 			{
 				int num8 = 0;
-				for (int k = 0; k < 267; k++)
+				for (int k = 0; k < NPCLoader.NPCCount; k++)
 				{
 					if (Item.BannerToNPC(k) != 0 && Main.player[Main.myPlayer].NPCBannerBuff[k])
 					{
@@ -15272,6 +_,8 @@
 					}
 				}
 			}
+			BuffLoader.DrawCustomBuffTip(Main.buffString, Main.spriteBatch,
+					X, Y + (int)Main.fontMouseText.MeasureString(Main.buffString).Y);
 		}
 
 		protected void DrawFPS()
@@ -15517,6 +_,7 @@
 					{
 					}
 					Tile tile = Main.tile[j, i];
+					//patch file: j, i
 					if (tile == null)
 					{
 						tile = new Tile();
@@ -15563,6 +_,7 @@
 						{
 							effects = SpriteEffects.FlipHorizontally;
 						}
+						TileLoader.SetSpriteEffects(j, i, type, ref effects);
 						Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
 						int num11 = 0;
 						int num12 = 16;
@@ -15731,6 +_,7 @@
 						}
 						if (type == 227)
 						{
+							//patch file: num8, num12
 							num8 = 32;
 							num12 = 38;
 							if (num9 == 238)
@@ -15814,6 +_,7 @@
 						{
 							num11 = 2;
 						}
+						TileLoader.SetDrawPositions(j, i, ref num8, ref num11, ref num12);
 						int num14 = 0;
 						if (tile.halfBrick())
 						{
@@ -16096,6 +_,12 @@
 								num15 += 90;
 							}
 						}
+						TileLoader.SetAnimationFrame(type, ref num15);
+						if (!TileLoader.PreDraw(j, i, type, Main.spriteBatch))
+						{
+							TileLoader.PostDraw(j, i, type, Main.spriteBatch);
+							continue;
+						}
 						if (type == 373 || type == 374 || type == 375 || type == 461)
 						{
 							int num33 = 60;
@@ -16133,6 +_,10 @@
 									if (Main.waterStyle > 1)
 									{
 										num34 = 706 + Main.waterStyle - 1;
+										if (Main.waterStyle >= WaterStyleLoader.vanillaWaterCount)
+										{
+											num34 = WaterStyleLoader.GetWaterStyle(Main.waterStyle).GetDropletGore();
+										}
 									}
 									if (type == 374)
 									{
@@ -16733,6 +_,7 @@
 										flag4 = (flag4 || type == 162);
 									}
 								}
+								flag4 = flag4 || TileLoader.Dangersense(j, i, type, Main.player[Main.myPlayer]);
 								if (flag4)
 								{
 									if (color.R < 255)
@@ -17473,7 +_,7 @@
 									}
 								}
 							}
-							if (type == 21)
+							if (TileLoader.IsChest(type))
 							{
 								Microsoft.Xna.Framework.Point key = new Microsoft.Xna.Framework.Point(j, i);
 								if (num9 % 36 != 0)
@@ -17718,6 +_,7 @@
 								}
 								Main.spriteBatch.Draw(Main.shroomCapTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X - 22), (float)(i * 16 - (int)Main.screenPosition.Y - 26)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num104 * 62, 0, 60, 42)), Lighting.GetColor(j, i), 0f, default(Vector2), 1f, effects, 0f);
 							}
+							TileLoader.DrawEffects(j, i, type, Main.spriteBatch, ref color);
 							if (color.R >= 1 || color.G >= 1 || color.B >= 1)
 							{
 								Tile tile2 = Main.tile[j + 1, i];
@@ -18512,6 +_,7 @@
 									bool flag13 = false;
 									bool flag14 = false;
 									bool flag15 = false;
+									Texture2D modCactusTexture = null;
 									if (!Main.canDrawColorTile(j, i))
 									{
 										int num166 = j;
@@ -18560,12 +_,18 @@
 										{
 											flag14 = true;
 										}
+										//patch file: num166, num167
 										if (Main.tile[num166, num167].type == 234)
 										{
 											flag15 = true;
 										}
+										modCactusTexture = TileLoader.GetCactusTexture(Main.tile[num166, num167].type);
 									}
-									if (flag13)
+									if (modCactusTexture != null)
+									{
+										Main.spriteBatch.Draw(modCactusTexture, new Vector2(j * 16 - (int)Main.screenPosition.X - ((float)num8 - 16f) / 2f, i * 16 - (int)Main.screenPosition.Y + num11) + zero, new Microsoft.Xna.Framework.Rectangle(num9, num10, num8, num12), color, 0f, default(Vector2), 1f, effects, 0f);
+									}
+									else if (flag13)
 									{
 										Main.spriteBatch.Draw(Main.evilCactusTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
 									}
@@ -18901,10 +_,16 @@
 												num179++;
 											}
 											int treeVariant = Main.GetTreeVariant(num178, num179);
-											if (treeVariant == -1)
+											Texture2D modTreeTexture = TileLoader.GetTreeTexture(Main.tile[num178, num179]);
+											if (modTreeTexture != null)
+											{
+												Main.spriteBatch.Draw(modTreeTexture, new Vector2(j * 16 - (int)Main.screenPosition.X - (num8 - 16f) / 2f, i * 16 - (int)Main.screenPosition.Y + num11) + zero, new Microsoft.Xna.Framework.Rectangle(num9, num10, num8, num12), color, 0f, default(Vector2), 1f, effects, 0f);
+											}
+											else if (treeVariant == -1)
 											{
 												if (Main.canDrawColorTile(j, i))
 												{
+													//patch file
 													Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
 												}
 												else
@@ -18944,11 +_,17 @@
 											}
 											if (Main.tile[num181, num182].active() && Main.tile[num181, num182].type == 112)
 											{
+												//patch file: num181, num182
 												num180 = 3;
 											}
 											int y2 = 22 * num180;
 											int num183 = (int)num10;
-											if (Main.canDrawColorTile(j, i))
+											Texture2D modTreeTexture = TileLoader.GetPalmTreeTexture(Main.tile[num181, num182]);
+											if (modTreeTexture != null)
+											{
+												Main.spriteBatch.Draw(modTreeTexture, new Vector2(j * 16 - (int)Main.screenPosition.X - (num8 - 16f) / 2f + num181, i * 16 - (int)Main.screenPosition.Y + num11) + zero, new Microsoft.Xna.Framework.Rectangle(num9, y2, num8, num12), color, 0f, default(Vector2), 1f, effects, 0f);
+											}
+											else if (Main.canDrawColorTile(j, i))
 											{
 												Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num183, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, y2, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
 											}
@@ -19528,6 +_,7 @@
 								int num300 = 0;
 								Main.spriteBatch.Draw(texture2D2, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num299, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num300)) + zero, new Microsoft.Xna.Framework.Rectangle?(empty2), transparent, 0f, default(Vector2), 1f, effects, 0f);
 							}
+							TileLoader.PostDraw(j, i, type, Main.spriteBatch);
 						}
 					}
 				}
@@ -19727,6 +_,7 @@
 				{
 					if (type4 == 5 && frameY >= 198 && frameX >= 22)
 					{
+						//frame
 						int num320 = 0;
 						if (frameX == 22)
 						{
@@ -19739,13 +_,24 @@
 								num320 = 2;
 							}
 							int num321 = 0;
+							//frame width
 							int num322 = 80;
+							//frame height
 							int num323 = 80;
+							//x offset left
 							int num324 = 32;
+							//y offset
 							int num325 = 0;
 							int num326 = num303;
+							Texture2D modTopTextures = null;
 							while (num326 < num303 + 100)
 							{
+								modTopTextures = TileLoader.GetTreeTopTextures(Main.tile[num302, num326].type,
+									num302, num326, ref num320, ref num322, ref num323, ref num324, ref num325);
+								if (modTopTextures != null)
+								{
+									break;
+								}
 								if (Main.tile[num302, num326].type == 2)
 								{
 									num321 = Main.GetTreeStyle(num302);
@@ -19848,11 +_,15 @@
 								num327 += (float)(270 - (int)Main.mouseTextColor) / 1000f;
 								Lighting.AddLight(num302, num303, 0.1f, 0.2f + num327 / 2f, 0.7f + num327);
 							}
-							if (tile6.color() > 0)
+							if (modTopTextures == null && tile6.color() > 0)
 							{
 								Main.checkTreeAlt[num321, (int)tile6.color()] = true;
 							}
-							if (tile6.color() > 0 && Main.treeAltTextureDrawn[num321, (int)tile6.color()])
+							if (modTopTextures != null)
+							{
+								Main.spriteBatch.Draw(modTopTextures, new Vector2(num302 * 16 - (int)Main.screenPosition.X - num324, num303 * 16 - (int)Main.screenPosition.Y - num323 + 16 + num325) + zero, new Microsoft.Xna.Framework.Rectangle(num320 * (num322 + 2), 0, num322, num323), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+							}
+							else if (tile6.color() > 0 && Main.treeAltTextureDrawn[num321, (int)tile6.color()])
 							{
 								Main.spriteBatch.Draw(Main.treeTopAltTexture[num321, (int)tile6.color()], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X - num324), (float)(num303 * 16 - (int)Main.screenPosition.Y - num323 + 16 + num325)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num320 * (num322 + 2), 0, num322, num323)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 							}
@@ -19873,8 +_,15 @@
 							}
 							int num328 = 0;
 							int num329 = num303;
+							Texture2D modBranchTextures = null;
 							while (num329 < num303 + 100)
 							{
+								modBranchTextures = TileLoader.GetTreeBranchTextures(Main.tile[num302 + 1, num329].type,
+									num302, num329, 1, ref num320);
+								if (modBranchTextures != null)
+								{
+									break;
+								}
 								if (Main.tile[num302 + 1, num329].type == 2)
 								{
 									num328 = Main.GetTreeStyle(num302 + 1);
@@ -19944,11 +_,15 @@
 								num330 += (float)(270 - (int)Main.mouseTextColor) / 1000f;
 								Lighting.AddLight(num302, num303, 0.1f, 0.2f + num330 / 2f, 0.7f + num330);
 							}
-							if (tile6.color() > 0)
+							if (modBranchTextures == null && tile6.color() > 0)
 							{
 								Main.checkTreeAlt[num328, (int)tile6.color()] = true;
 							}
-							if (tile6.color() > 0 && Main.treeAltTextureDrawn[num328, (int)tile6.color()])
+							if (modBranchTextures != null)
+							{
+								Main.spriteBatch.Draw(modBranchTextures, new Vector2(num302 * 16 - (int)Main.screenPosition.X - 24, num303 * 16 - (int)Main.screenPosition.Y - 12) + zero, new Microsoft.Xna.Framework.Rectangle(0, num320 * 42, 40, 40), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+							}
+							else if (tile6.color() > 0 && Main.treeAltTextureDrawn[num328, (int)tile6.color()])
 							{
 								Main.spriteBatch.Draw(Main.treeBranchAltTexture[num328, (int)tile6.color()], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X - 24), (float)(num303 * 16 - (int)Main.screenPosition.Y - 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num320 * 42, 40, 40)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 							}
@@ -19969,8 +_,15 @@
 							}
 							int num331 = 0;
 							int num332 = num303;
+							Texture2D modBranchTextures = null;
 							while (num332 < num303 + 100)
 							{
+								modBranchTextures = TileLoader.GetTreeBranchTextures(Main.tile[num302 - 1, num332].type,
+									num302, num332, -1, ref num320);
+								if (modBranchTextures != null)
+								{
+									break;
+								}
 								if (Main.tile[num302 - 1, num332].type == 2)
 								{
 									num331 = Main.GetTreeStyle(num302 - 1);
@@ -20040,11 +_,15 @@
 								num333 += (float)(270 - (int)Main.mouseTextColor) / 1000f;
 								Lighting.AddLight(num302, num303, 0.1f, 0.2f + num333 / 2f, 0.7f + num333);
 							}
-							if (tile6.color() > 0)
+							if (modBranchTextures == null && tile6.color() > 0)
 							{
 								Main.checkTreeAlt[num331, (int)tile6.color()] = true;
 							}
-							if (tile6.color() > 0 && Main.treeAltTextureDrawn[num331, (int)tile6.color()])
+							if (modBranchTextures != null)
+							{
+								Main.spriteBatch.Draw(modBranchTextures, new Vector2(num302 * 16 - (int)Main.screenPosition.X, num303 * 16 - (int)Main.screenPosition.Y - 12) + zero, new Microsoft.Xna.Framework.Rectangle(42, num320 * 42, 40, 40), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+							}
+							else if (tile6.color() > 0 && Main.treeAltTextureDrawn[num331, (int)tile6.color()])
 							{
 								Main.spriteBatch.Draw(Main.treeBranchAltTexture[num331, (int)tile6.color()], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X), (float)(num303 * 16 - (int)Main.screenPosition.Y - 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(42, num320 * 42, 40, 40)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 							}
@@ -20071,8 +_,14 @@
 						int num338 = 80;
 						int num339 = 32;
 						int num340 = 0;
+						Texture2D modTopTextures = null;
 						for (int num341 = num303; num341 < num303 + 100; num341++)
 						{
+							modTopTextures = TileLoader.GetPalmTreeTopTextures(Main.tile[num302, num341].type);
+							if (modTopTextures != null)
+							{
+								break;
+							}
 							if (Main.tile[num302, num341].type == 53)
 							{
 								num336 = 0;
@@ -20096,11 +_,15 @@
 						}
 						int frameY3 = (int)Main.tile[num302, num303].frameY;
 						int y3 = num336 * 82;
-						if (tile6.color() > 0)
+						if (modTopTextures == null && tile6.color() > 0)
 						{
 							Main.checkTreeAlt[num335, (int)tile6.color()] = true;
 						}
-						if (tile6.color() > 0 && Main.treeAltTextureDrawn[num335, (int)tile6.color()])
+						if (modTopTextures != null)
+						{
+							Main.spriteBatch.Draw(modTopTextures, new Vector2(num302 * 16 - (int)Main.screenPosition.X - num339 + frameY3, num303 * 16 - (int)Main.screenPosition.Y - num338 + 16 + num340) + zero, new Microsoft.Xna.Framework.Rectangle(num334 * (num337 + 2), y3, num337, num338), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+						}
+						else if (tile6.color() > 0 && Main.treeAltTextureDrawn[num335, (int)tile6.color()])
 						{
 							Main.spriteBatch.Draw(Main.treeTopAltTexture[num335, (int)tile6.color()], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X - num339 + frameY3), (float)(num303 * 16 - (int)Main.screenPosition.Y - num338 + 16 + num340)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num334 * (num337 + 2), y3, num337, num338)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 						}
@@ -20210,7 +_,7 @@
 				if (Main.gore[i].active && Main.gore[i].type > 0)
 				{
 					bool flag = false;
-					if (((Main.gore[i].type >= 706 && Main.gore[i].type <= 717) || Main.gore[i].type == 943) && (Main.gore[i].frame < 7 || Main.gore[i].frame > 9))
+					if (ModGore.DrawBackGore(Main.gore[i]))
 					{
 						flag = true;
 					}
@@ -20240,7 +_,7 @@
 			{
 				if (Main.gore[i].active && Main.gore[i].type > 0)
 				{
-					if (((Main.gore[i].type >= 706 && Main.gore[i].type <= 717) || Main.gore[i].type == 943) && (Main.gore[i].frame < 7 || Main.gore[i].frame > 9))
+					if (ModGore.DrawBackGore(Main.gore[i]))
 					{
 						Main.drawBackGore = true;
 					}
@@ -20264,7 +_,7 @@
 			TimeLogger.DetailedDrawTime(24);
 		}
 
-		protected void DrawHealthBar(float X, float Y, int Health, int MaxHealth, float alpha, float scale = 1f)
+		public void DrawHealthBar(float X, float Y, int Health, int MaxHealth, float alpha, float scale = 1f)
 		{
 			if (Health <= 0)
 			{
@@ -20469,6 +_,10 @@
 			else if (Main.npc[i].type == 152)
 			{
 				num = 6f;
+			}
+			else if (Main.npc[i].modNPC != null)
+			{
+				num = Main.npc[i].modNPC.drawOffsetY;
 			}
 			else if (Main.npc[i].type == 153 || Main.npc[i].type == 154)
 			{
@@ -21010,7 +_,7 @@
 			{
 				try
 				{
-					if (Main.npc[i].active && Main.npc[i].type > 0 && Main.npc[i].type < 580 && !Main.npc[i].hide)
+					if (Main.npc[i].active && Main.npc[i].type > 0 && !Main.npc[i].hide)
 					{
 						Main.npc[i].visualOffset *= 0.95f;
 						Main.npc[i].position += Main.npc[i].visualOffset;
@@ -21138,7 +_,7 @@
 			}
 		}
 
-		protected void DrawNPCCheckAlt(NPC n)
+		public void DrawNPCCheckAlt(NPC n)
 		{
 			if (NPCID.Sets.ExtraTextureCount[n.type] == 0)
 			{
@@ -21151,7 +_,7 @@
 			Main.npcTexture[n.type] = Main.npcAltTextures[n.type][n.altTexture];
 		}
 
-		protected void DrawNPC(int iNPCIndex, bool behindTiles)
+		public void DrawNPC(int iNPCIndex, bool behindTiles)
 		{
 			NPC nPC = Main.npc[iNPCIndex];
 			int type = nPC.type;
@@ -21807,6 +_,7 @@
 			}
 			if (nPC.ichor)
 			{
+				//patch file: color9
 				color9 = new Microsoft.Xna.Framework.Color(255, 255, 0, 255);
 			}
 			if (nPC.onFrostBurn)
@@ -21843,6 +_,7 @@
 				}
 				Lighting.AddLight((int)(nPC.position.X / 16f), (int)(nPC.position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
 			}
+			NPCLoader.DrawEffects(nPC, ref color9);
 			if (Main.player[Main.myPlayer].detectCreature && nPC.lifeMax > 1)
 			{
 				byte b;
@@ -21872,6 +_,11 @@
 				{
 					color9.B = b3;
 				}
+			}
+			if (!NPCLoader.PreDraw(Main.npc[iNPCIndex], Main.spriteBatch, color9))
+			{
+				NPCLoader.PostDraw(Main.npc[iNPCIndex], Main.spriteBatch, color9);
+				return;
 			}
 			if (type == 50)
 			{
@@ -24483,6 +_,7 @@
 					}
 				}
 			}
+			NPCLoader.PostDraw(Main.npc[iNPCIndex], Main.spriteBatch, color9);
 		}
 
 		protected void DrawNPCExtras(NPC n, bool beforeDraw, float addHeight, float addY, Microsoft.Xna.Framework.Color npcColor, Vector2 halfSize, SpriteEffects npcSpriteEffect)
@@ -24727,6 +_,7 @@
 						num6 = 0.75f;
 					}
 				}
+				NPCLoader.DrawTownAttackGun(n, ref num6, ref num7, ref num8);
 				Texture2D texture2D2 = Main.itemTexture[num7];
 				int num9 = (int)this.DrawPlayerItemPos(1f, num7).X - num8;
 				Vector2 origin2 = new Vector2((float)(-(float)num9), (float)(texture2D2.Height / 2));
@@ -24802,6 +_,7 @@
 						zero.Y = 12f;
 					}
 				}
+				NPCLoader.DrawTownAttackSwing(n, ref texture2D6, ref num10, ref scaleFactor, ref zero);
 				Tuple<Vector2, float> swingStats = n.GetSwingStats(NPCID.Sets.AttackTime[n.type] * 2, (int)n.ai[1], n.spriteDirection, num10, num10);
 				Vector2 vector4 = swingStats.Item1 + (swingStats.Item1 - n.Center) * scaleFactor + zero;
 				Vector2 origin4 = texture2D6.Size() * new Vector2((float)((n.spriteDirection == 1) ? 0 : 1), 1f);
@@ -25005,7 +_,11 @@
 					}
 				}
 			}
-			if (projectile.bobber && Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].holdStyle > 0)
+			if (!ProjectileLoader.PreDrawExtras(projectile, Main.spriteBatch))
+			{
+				//fluff
+			}
+			else if (projectile.bobber && Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].holdStyle > 0)
 			{
 				num = mountedCenter.X;
 				num2 = mountedCenter.Y;
@@ -26422,6 +_,11 @@
 			{
 				color25 = Microsoft.Xna.Framework.Color.White;
 			}
+			if (!ProjectileLoader.PreDraw(projectile, Main.spriteBatch, color25))
+			{
+				ProjectileLoader.PostDraw(projectile, Main.spriteBatch, color25);
+				return;
+			}
 			int num147 = 0;
 			int num148 = 0;
 			if (projectile.type == 175)
@@ -26442,6 +_,7 @@
 			}
 			if (projectile.type == 519)
 			{
+				//patch file: num147, num148
 				num147 = 6;
 				num148 -= 6;
 			}
@@ -26621,6 +_,7 @@
 				num147 = 4;
 				num148 = 4;
 			}
+			//patch file: num149
 			float num149 = (float)(Main.projectileTexture[projectile.type].Width - projectile.width) * 0.5f + (float)projectile.width * 0.5f;
 			if (projectile.type == 50 || projectile.type == 53 || projectile.type == 515)
 			{
@@ -26721,6 +_,7 @@
 			{
 				num147 = 8;
 			}
+			ProjectileLoader.DrawOffset(projectile, ref num147, ref num148, ref num149);
 			SpriteEffects spriteEffects = SpriteEffects.None;
 			if (projectile.spriteDirection == -1)
 			{
@@ -29162,7 +_,7 @@
 					}
 					if (projectile.bobber)
 					{
-						if (projectile.ai[1] > 0f && projectile.ai[1] < 3884f && projectile.ai[0] == 1f)
+						if (projectile.ai[1] > 0f && projectile.ai[0] == 1f)
 						{
 							int num329 = (int)projectile.ai[1];
 							Vector2 center = projectile.Center;
@@ -29356,6 +_,7 @@
 					}
 				}
 			}
+			ProjectileLoader.PostDraw(projectile, Main.spriteBatch, color25);
 		}
 
 		private static Microsoft.Xna.Framework.Color buffColor(Microsoft.Xna.Framework.Color newColor, float R, float G, float B, float A)
@@ -29488,6 +_,7 @@
 							this.DrawCacheProjsBehindProjectiles.Add(i);
 						}
 					}
+					ProjectileLoader.DrawBehind(Main.projectile[i], i, DrawCacheProjsBehindNPCsAndTiles, DrawCacheProjsBehindNPCs, DrawCacheProjsBehindProjectiles, DrawCacheProjsOverWiresUI);
 				}
 			}
 		}
@@ -30119,6 +_,7 @@
 				result.Y += 2f * gravdir;
 			}
 			result.X = num;
+			ItemLoader.HoldoutOffset(gravdir, itemtype, ref result);
 			return result;
 		}
 
@@ -30134,6 +_,12 @@
 
 		protected void DrawPlayerHead(Player drawPlayer, float X, float Y, float Alpha = 1f, float Scale = 1f)
 		{
+			//prepare for lots of ugly code
+			PlayerHeadDrawInfo drawInfo = new PlayerHeadDrawInfo();
+			drawInfo.spriteBatch = Main.spriteBatch;
+			drawInfo.drawPlayer = drawPlayer;
+			drawInfo.alpha = Alpha;
+			drawInfo.scale = Scale;
 			int shaderId = 0;
 			int skinVariant = drawPlayer.skinVariant;
 			short num = (short)drawPlayer.hairDye;
@@ -30141,10 +_,11 @@
 			{
 				num = 1;
 			}
+			drawInfo.hairShader = num;
 			for (int i = 0; i < 16 + drawPlayer.extraAccessorySlots * 2; i++)
 			{
 				int num2 = i % 10;
-				if (drawPlayer.dye[num2] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && drawPlayer.armor[i].faceSlot > 0 && drawPlayer.armor[i].faceSlot < 9)
+				if (drawPlayer.dye[num2] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && drawPlayer.armor[i].faceSlot > 0)
 				{
 					byte arg_81_0 = drawPlayer.dye[num2].dye;
 				}
@@ -30157,18 +_,26 @@
 			{
 				shaderId = (int)drawPlayer.dye[0].dye;
 			}
+			drawInfo.armorShader = shaderId;
 			this.LoadHair(drawPlayer.hair);
 			Microsoft.Xna.Framework.Color color = this.quickAlpha(Microsoft.Xna.Framework.Color.White, Alpha);
+			drawInfo.eyeWhiteColor = color;
 			Microsoft.Xna.Framework.Color color2 = this.quickAlpha(drawPlayer.eyeColor, Alpha);
+			drawInfo.eyeColor = color2;
 			Microsoft.Xna.Framework.Color color3 = this.quickAlpha(drawPlayer.GetHairColor(false), Alpha);
+			drawInfo.hairColor = color3;
 			Microsoft.Xna.Framework.Color color4 = this.quickAlpha(drawPlayer.skinColor, Alpha);
+			drawInfo.skinColor = color4;
 			Microsoft.Xna.Framework.Color color5 = this.quickAlpha(Microsoft.Xna.Framework.Color.White, Alpha);
+			drawInfo.armorColor = color5;
 			SpriteEffects spriteEffects = SpriteEffects.None;
 			if (drawPlayer.direction < 0)
 			{
 				spriteEffects = SpriteEffects.FlipHorizontally;
 			}
+			drawInfo.spriteEffects = spriteEffects;
 			Vector2 vector = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.4f);
+			drawInfo.drawOrigin = vector;
 			Vector2 position = drawPlayer.position;
 			Microsoft.Xna.Framework.Rectangle bodyFrame = drawPlayer.bodyFrame;
 			drawPlayer.bodyFrame.Y = 0;
@@ -30197,12 +_,55 @@
 			{
 				flag2 = true;
 			}
-			if (drawPlayer.head != 38 && drawPlayer.head != 135)
+			ItemLoader.DrawHair(drawPlayer, ref flag, ref flag2);
+			drawInfo.drawHair = flag;
+			drawInfo.drawAltHair = flag2;
+			List<PlayerHeadLayer> drawLayers = PlayerHooks.GetDrawHeadLayers(drawPlayer);
+			int layerIndex = -1;
+			layerLoopContinue:
+			layerIndex++;
+			if (layerIndex >= drawLayers.Count)
+			{
+				goto postDraw;
+			}
+			if (!drawLayers[layerIndex].ShouldDraw(drawLayers))
+			{
+				goto layerLoopContinue;
+			}
+			if (drawLayers[layerIndex] == PlayerHeadLayer.Head)
+			{
+				goto headLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.Hair)
+			{
+				goto hairLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.AltHair)
+			{
+				goto altHairLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.Armor)
+			{
+				goto armorLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.FaceAcc)
+			{
+				goto faceLayer;
+			}
+			else
+			{
+				drawLayers[layerIndex].Draw(ref drawInfo);
+			}
+			goto layerLoopContinue;
+			headLayer:
+			if (drawPlayer.head != 38 && drawPlayer.head != 135 && ItemLoader.DrawHead(drawPlayer))
 			{
 				Main.spriteBatch.Draw(Main.playerTextures[skinVariant, 0], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color4, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
 				Main.spriteBatch.Draw(Main.playerTextures[skinVariant, 1], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
 				Main.spriteBatch.Draw(Main.playerTextures[skinVariant, 2], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color2, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
 			}
+			goto layerLoopContinue;
+			hairLayer:
 			if (flag)
 			{
 				DrawData value = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
@@ -30223,6 +_,8 @@
 					Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 				}
 			}
+			goto layerLoopContinue;
+			altHairLayer:
 			if (flag2)
 			{
 				Microsoft.Xna.Framework.Rectangle bodyFrame3 = drawPlayer.bodyFrame;
@@ -30239,6 +_,8 @@
 					Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 				}
 			}
+			goto layerLoopContinue;
+			armorLayer:
 			if (drawPlayer.head == 23)
 			{
 				Microsoft.Xna.Framework.Rectangle bodyFrame4 = drawPlayer.bodyFrame;
@@ -30310,7 +_,7 @@
 				value4.Draw(Main.spriteBatch);
 				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 			}
-			else if (drawPlayer.head > 0 && drawPlayer.head < 214 && drawPlayer.head != 28)
+			else if (drawPlayer.head > 0 && drawPlayer.head != 28)
 			{
 				DrawData value5 = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
 				GameShaders.Armor.Apply(shaderId, drawPlayer, new DrawData?(value5));
@@ -30330,7 +_,9 @@
 				value6.Draw(Main.spriteBatch);
 				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 			}
-			if (drawPlayer.face > 0 && drawPlayer.face < 9)
+			goto layerLoopContinue;
+			faceLayer:
+			if (drawPlayer.face > 0)
 			{
 				DrawData value7;
 				if (drawPlayer.face == 7)
@@ -30345,6 +_,8 @@
 				value7.Draw(Main.spriteBatch);
 				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 			}
+			goto layerLoopContinue;
+			postDraw:
 			drawPlayer.position = position;
 			drawPlayer.bodyFrame.Y = bodyFrame.Y;
 		}
@@ -30369,12 +_,18 @@
 
 		public void DrawPlayer(Player drawPlayer, Vector2 Position, float rotation, Vector2 rotationOrigin, float shadow = 0f)
 		{
+			//prepare for code more ugly than DrawPlayerHead
+ 			PlayerDrawInfo drawInfo = new PlayerDrawInfo();
+			drawInfo.drawPlayer = drawPlayer;
+			drawInfo.position = Position;
+			drawInfo.shadow = shadow;
 			DrawData value = default(DrawData);
 			int projectileDrawPosition = -1;
 			Main.playerDrawData.Clear();
 			Main.playerDrawDust.Clear();
 			Main.playerDrawGore.Clear();
 			Vector2 value2 = Position + (drawPlayer.itemLocation - drawPlayer.position);
+			drawInfo.itemLocation = value2;
 			int num = 0;
 			bool flag = false;
 			bool flag2 = false;
@@ -30388,6 +_,9 @@
 			{
 				flag2 = true;
 			}
+			ItemLoader.DrawHands(drawPlayer, ref flag, ref flag2);
+			drawInfo.drawHands = flag;
+			drawInfo.drawArms = flag2;
 			int num2;
 			if (drawPlayer.heldProj >= 0 && shadow == 0f)
 			{
@@ -30396,7 +_,9 @@
 				{
 					flag3 = true;
 				}
-			}
+				ProjectileLoader.DrawHeldProjInFrontOfHeldItemAndArms(Main.projectile[drawPlayer.heldProj], ref flag3);
+			}
+			drawInfo.drawHeldProjInFrontOfHeldItemAndBody = flag3;
 			bool flag4 = false;
 			if (drawPlayer.head == 10 || drawPlayer.head == 12 || drawPlayer.head == 28 || drawPlayer.head == 62 || drawPlayer.head == 97 || drawPlayer.head == 106 || drawPlayer.head == 113 || drawPlayer.head == 116 || drawPlayer.head == 119 || drawPlayer.head == 133 || drawPlayer.head == 138 || drawPlayer.head == 139 || drawPlayer.head == 163 || drawPlayer.head == 178 || drawPlayer.head == 181 || drawPlayer.head == 191 || drawPlayer.head == 198)
 			{
@@ -30407,6 +_,9 @@
 			{
 				flag5 = true;
 			}
+			ItemLoader.DrawHair(drawPlayer, ref flag4, ref flag5);
+			drawInfo.drawHair = flag4;
+			drawInfo.drawAltHair = flag5;
 			bool flag6 = false;
 			if (drawPlayer.face == 4 || drawPlayer.face == 3 || drawPlayer.face == 2)
 			{
@@ -30417,18 +_,22 @@
 			{
 				num3 = 1;
 			}
+			drawInfo.hairShader = num3;
 			float num4 = (float)drawPlayer.mount.PlayerOffset;
 			Position.Y -= num4;
+			drawInfo.position = Position;
 			int num5 = 0;
 			if (drawPlayer.dye[0] != null)
 			{
 				num5 = (int)drawPlayer.dye[0].dye;
 			}
+			drawInfo.headArmorShader = num5;
 			int num6 = 0;
 			if (drawPlayer.dye[1] != null)
 			{
 				num6 = (int)drawPlayer.dye[1].dye;
 			}
+			drawInfo.bodyArmorShader = num6;
 			int shader = 0;
 			if (drawPlayer.dye[2] != null)
 			{
@@ -30438,6 +_,7 @@
 			{
 				shader = num6;
 			}
+			drawInfo.legArmorShader = shader;
 			int shader2 = 0;
 			int shader3 = 0;
 			int shader4 = 0;
@@ -30455,53 +_,65 @@
 				int num7 = i % 10;
 				if (drawPlayer.dye[num7] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && (i / 10 >= 1 || !drawPlayer.hideVisual[num7] || drawPlayer.armor[i].wingSlot > 0 || drawPlayer.armor[i].type == 934))
 				{
-					if (drawPlayer.armor[i].handOnSlot > 0 && drawPlayer.armor[i].handOnSlot < 20)
+					if (drawPlayer.armor[i].handOnSlot > 0)
 					{
 						shader2 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].handOffSlot > 0 && drawPlayer.armor[i].handOffSlot < 12)
+						drawInfo.handOnShader = shader2;
+					}
+					if (drawPlayer.armor[i].handOffSlot > 0)
 					{
 						shader3 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].backSlot > 0 && drawPlayer.armor[i].backSlot < 14)
+						drawInfo.handOffShader = shader3;
+					}
+					if (drawPlayer.armor[i].backSlot > 0)
 					{
 						shader4 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].frontSlot > 0 && drawPlayer.armor[i].frontSlot < 5)
+						drawInfo.backShader = shader4;
+					}
+					if (drawPlayer.armor[i].frontSlot > 0)
 					{
 						shader5 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].shoeSlot > 0 && drawPlayer.armor[i].shoeSlot < 18)
+						drawInfo.frontShader = shader5;
+					}
+					if (drawPlayer.armor[i].shoeSlot > 0)
 					{
 						shader6 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].waistSlot > 0 && drawPlayer.armor[i].waistSlot < 13)
+						drawInfo.shoeShader = shader6;
+					}
+					if (drawPlayer.armor[i].waistSlot > 0)
 					{
 						shader7 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].shieldSlot > 0 && drawPlayer.armor[i].shieldSlot < 7)
+						drawInfo.waistShader = shader7;
+					}
+					if (drawPlayer.armor[i].shieldSlot > 0)
 					{
 						shader8 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].neckSlot > 0 && drawPlayer.armor[i].neckSlot < 10)
+						drawInfo.shieldShader = shader8;
+					}
+					if (drawPlayer.armor[i].neckSlot > 0)
 					{
 						shader9 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].faceSlot > 0 && drawPlayer.armor[i].faceSlot < 9)
+						drawInfo.neckShader = shader9;
+					}
+					if (drawPlayer.armor[i].faceSlot > 0)
 					{
 						shader10 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].balloonSlot > 0 && drawPlayer.armor[i].balloonSlot < 18)
+						drawInfo.faceShader = shader10;
+					}
+					if (drawPlayer.armor[i].balloonSlot > 0)
 					{
 						shader11 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].wingSlot > 0 && drawPlayer.armor[i].wingSlot < 38)
+						drawInfo.balloonShader = shader11;
+					}
+					if (drawPlayer.armor[i].wingSlot > 0)
 					{
 						shader12 = (int)drawPlayer.dye[num7].dye;
+						drawInfo.wingShader = shader12;
 					}
 					if (drawPlayer.armor[i].type == 934)
 					{
 						shader13 = (int)drawPlayer.dye[num7].dye;
+						drawInfo.carpetShader = shader13;
 					}
 				}
 			}
@@ -30516,33 +_,55 @@
 			SpriteEffects spriteEffects = SpriteEffects.None;
 			SpriteEffects effect = SpriteEffects.FlipHorizontally;
 			Microsoft.Xna.Framework.Color color = drawPlayer.GetImmuneAlpha(drawPlayer.GetHairColor(true), shadow);
+			drawInfo.hairColor = color;
 			Microsoft.Xna.Framework.Color color2 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), Microsoft.Xna.Framework.Color.White), shadow);
-			Microsoft.Xna.Framework.Color color3 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), drawPlayer.eyeColor), shadow);
-			Microsoft.Xna.Framework.Color color4 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), drawPlayer.skinColor), shadow);
-			Microsoft.Xna.Framework.Color color5 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.skinColor), shadow);
-			Microsoft.Xna.Framework.Color color6 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.skinColor), shadow);
-			Microsoft.Xna.Framework.Color color7 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.shirtColor), shadow);
-			Microsoft.Xna.Framework.Color color8 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.underShirtColor), shadow);
-			Microsoft.Xna.Framework.Color color9 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.pantsColor), shadow);
-			Microsoft.Xna.Framework.Color color10 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.shoeColor), shadow);
-			Microsoft.Xna.Framework.Color color11 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.25) / 16, Microsoft.Xna.Framework.Color.White), shadow);
-			Microsoft.Xna.Framework.Color color12 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.5) / 16, Microsoft.Xna.Framework.Color.White), shadow);
-			Microsoft.Xna.Framework.Color color13 = color12;
-			Microsoft.Xna.Framework.Color color14 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.75) / 16, Microsoft.Xna.Framework.Color.White), shadow);
-			Microsoft.Xna.Framework.Color color15 = new Microsoft.Xna.Framework.Color(255, 255, 255, 100);
+			drawInfo.eyeWhiteColor = color2;
+  			Microsoft.Xna.Framework.Color color3 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), drawPlayer.eyeColor), shadow);
+			drawInfo.eyeColor = color3;
+  			Microsoft.Xna.Framework.Color color4 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), drawPlayer.skinColor), shadow);
+			drawInfo.faceColor = color4;
+  			Microsoft.Xna.Framework.Color color5 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.skinColor), shadow);
+			drawInfo.bodyColor = color5;
+  			Microsoft.Xna.Framework.Color color6 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.skinColor), shadow);
+			drawInfo.legColor = color6;
+  			Microsoft.Xna.Framework.Color color7 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.shirtColor), shadow);
+			drawInfo.shirtColor = color7;
+  			Microsoft.Xna.Framework.Color color8 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.underShirtColor), shadow);
+			drawInfo.underShirtColor = color8;
+  			Microsoft.Xna.Framework.Color color9 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.pantsColor), shadow);
+			drawInfo.pantsColor = color9;
+  			Microsoft.Xna.Framework.Color color10 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.shoeColor), shadow);
+			drawInfo.shoeColor = color10;
+  			Microsoft.Xna.Framework.Color color11 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.25) / 16, Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.upperArmorColor = color11;
+  			Microsoft.Xna.Framework.Color color12 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.5) / 16, Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.middleArmorColor = color12;
+  			Microsoft.Xna.Framework.Color color13 = color12;
+			drawInfo.mountColor = color13;
+  			Microsoft.Xna.Framework.Color color14 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.75) / 16, Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.lowerArmorColor = color14;
+  			Microsoft.Xna.Framework.Color color15 = new Microsoft.Xna.Framework.Color(255, 255, 255, 100);
 			int num8 = 0;
 			int num9 = 0;
 			int num10 = 0;
 			int num11 = 0;
 			int num12 = -1;
-			int num13 = -1;
-			int num14 = -1;
-			int num15 = -1;
-			Microsoft.Xna.Framework.Color color16 = Microsoft.Xna.Framework.Color.Transparent;
-			Microsoft.Xna.Framework.Color color17 = Microsoft.Xna.Framework.Color.Transparent;
-			Microsoft.Xna.Framework.Color color18 = Microsoft.Xna.Framework.Color.Transparent;
-			Microsoft.Xna.Framework.Color color19 = Microsoft.Xna.Framework.Color.Transparent;
-			num2 = drawPlayer.head;
+			drawInfo.headGlowMask = num12;
+  			int num13 = -1;
+			drawInfo.bodyGlowMask = num13;
+  			int num14 = -1;
+			drawInfo.armGlowMask = num14;
+  			int num15 = -1;
+			drawInfo.legGlowMask = num15;
+  			Microsoft.Xna.Framework.Color color16 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.headGlowMaskColor = color16;
+  			Microsoft.Xna.Framework.Color color17 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.bodyGlowMaskColor = color17;
+  			Microsoft.Xna.Framework.Color color18 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.armGlowMaskColor = color18;
+  			Microsoft.Xna.Framework.Color color19 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.legGlowMaskColor = color19;
+  			num2 = drawPlayer.head;
 			switch (num2)
 			{
 				case 169:
@@ -30601,6 +_,7 @@
 			}
 			if (drawPlayer.head == 169)
 			{
+				//patch file: num12, color16
 				num12 = 15;
 				byte b = (byte)(62.5f * (float)(1 + num8));
 				color16 = new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, 0);
@@ -30651,14 +_,17 @@
 			}
 			if (drawPlayer.body == 175)
 			{
+				//patch file: num13
 				if (drawPlayer.Male)
 				{
 					num13 = 13;
 				}
+				//patch file
 				else
 				{
 					num13 = 18;
 				}
+				//patch file: color17
 				byte b6 = (byte)(62.5f * (float)(1 + num8));
 				color17 = new Microsoft.Xna.Framework.Color((int)b6, (int)b6, (int)b6, 0);
 			}
@@ -30673,6 +_,7 @@
 					num13 = 186;
 				}
 				num14 = 188;
+				//patch file: num14, color18
 				byte b7 = (byte)(62.5f * (float)(1 + num11));
 				color17 = new Microsoft.Xna.Framework.Color((int)b7, (int)b7, (int)b7, 0);
 				color18 = new Microsoft.Xna.Framework.Color((int)b7, (int)b7, (int)b7, 0);
@@ -30721,6 +_,7 @@
 			}
 			if (drawPlayer.legs == 111)
 			{
+				//patch file: num15, color19
 				num15 = 17;
 				byte b10 = (byte)(62.5f * (float)(1 + num9));
 				color19 = new Microsoft.Xna.Framework.Color((int)b10, (int)b10, (int)b10, 0);
@@ -30748,6 +_,10 @@
 				color19 = new Microsoft.Xna.Framework.Color((int)b13, (int)b13, (int)b13, 0);
 				color14 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color((int)b13, (int)b13, (int)b13, 255), shadow);
 			}
+			ItemLoader.DrawArmorColor(EquipType.Head, drawPlayer.head, drawPlayer, shadow, ref color11, ref num12, ref color16);
+			ItemLoader.DrawArmorColor(EquipType.Body, drawPlayer.body, drawPlayer, shadow, ref color12, ref num13, ref color17);
+			ItemLoader.ArmorArmGlowMask(drawPlayer.body, drawPlayer, shadow, ref num14, ref color18);
+			ItemLoader.DrawArmorColor(EquipType.Legs, drawPlayer.legs, drawPlayer, shadow, ref color14, ref num15, ref color19);
 			color16 = drawPlayer.GetImmuneAlphaPure(color16, shadow);
 			color17 = drawPlayer.GetImmuneAlphaPure(color17, shadow);
 			color18 = drawPlayer.GetImmuneAlphaPure(color18, shadow);
@@ -31213,9 +_,11 @@
 				Main.dust[num43].position = Vector2.Lerp(Main.dust[num43].position, drawPlayer.Center, 0.5f);
 				Main.playerDrawDust.Add(num43);
 			}
+			bool fullBright = false;
+			PlayerHooks.DrawEffects(drawInfo, ref num18, ref num19, ref num20, ref num21, ref fullBright);
 			if (num18 != 1f || num19 != 1f || num20 != 1f || num21 != 1f)
 			{
-				if (drawPlayer.onFire || drawPlayer.onFire2 || drawPlayer.onFrostBurn)
+				if (drawPlayer.onFire || drawPlayer.onFire2 || drawPlayer.onFrostBurn || fullBright)
 				{
 					color2 = drawPlayer.GetImmuneAlpha(Microsoft.Xna.Framework.Color.White, shadow);
 					color3 = drawPlayer.GetImmuneAlpha(drawPlayer.eyeColor, shadow);
@@ -31399,6 +_,27 @@
 				color18 = Microsoft.Xna.Framework.Color.Multiply(color18, num49);
 				color19 = Microsoft.Xna.Framework.Color.Multiply(color19, num49);
 			}
+			drawInfo.hairColor = color;
+			drawInfo.eyeWhiteColor = color2;
+			drawInfo.eyeColor = color3;
+			drawInfo.faceColor = color4;
+			drawInfo.bodyColor = color5;
+			drawInfo.legColor = color6;
+			drawInfo.shirtColor = color7;
+			drawInfo.underShirtColor = color8;
+			drawInfo.pantsColor = color9;
+			drawInfo.shoeColor = color10;
+			drawInfo.upperArmorColor = color11;
+			drawInfo.middleArmorColor = color12;
+			drawInfo.lowerArmorColor = color14;
+			drawInfo.headGlowMask = num12;
+			drawInfo.bodyGlowMask = num13;
+			drawInfo.armGlowMask = num14;
+			drawInfo.legGlowMask = num15;
+			drawInfo.headGlowMaskColor = color16;
+			drawInfo.bodyGlowMaskColor = color17;
+			drawInfo.armGlowMaskColor = color18;
+			drawInfo.legGlowMaskColor = color19;
 			if (drawPlayer.gravDir == 1f)
 			{
 				if (drawPlayer.direction == 1)
@@ -31437,9 +_,13 @@
 					drawPlayer.bodyPosition.Y = 6f;
 				}
 			}
+			drawInfo.spriteEffects = spriteEffects;
 			Vector2 vector2 = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.75f);
+			drawInfo.legOrigin = vector2;
 			Vector2 origin = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.5f);
+			drawInfo.bodyOrigin = origin;
 			Vector2 vector3 = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.4f);
+			drawInfo.headOrigin = vector3;
 			if ((drawPlayer.merman || drawPlayer.forceMerman) && !drawPlayer.hideMerman)
 			{
 				drawPlayer.headRotation = drawPlayer.velocity.Y * (float)drawPlayer.direction * 0.1f;
@@ -31469,6 +_,185 @@
 			{
 				flag7 = true;
 			}
+			goto heldItemColor;
+			postSetupVars:
+			PlayerHooks.ModifyDrawInfo(ref drawInfo);
+			List<PlayerLayer> drawLayers = PlayerHooks.GetDrawLayers(drawPlayer);
+			int layerIndex = -1;
+			layerLoopContinue:
+			layerIndex++;
+			Position = drawInfo.position;
+			shadow = drawInfo.shadow;
+			value2 = drawInfo.itemLocation;
+			flag = drawInfo.drawHands;
+			flag2 = drawInfo.drawArms;
+			flag3 = drawInfo.drawHeldProjInFrontOfHeldItemAndBody;
+			flag4 = drawInfo.drawHair;
+			flag5 = drawInfo.drawAltHair;
+			num3 = drawInfo.hairShader;
+			num5 = drawInfo.headArmorShader;
+			num6 = drawInfo.bodyArmorShader;
+			shader = drawInfo.legArmorShader;
+			shader2 = drawInfo.handOnShader;
+			shader3 = drawInfo.handOffShader;
+			shader4 = drawInfo.backShader;
+			shader5 = drawInfo.frontShader;
+			shader6 = drawInfo.shoeShader;
+			shader7 = drawInfo.waistShader;
+			shader8 = drawInfo.shieldShader;
+			shader9 = drawInfo.neckShader;
+			shader10 = drawInfo.faceShader;
+			shader11 = drawInfo.balloonShader;
+			shader12 = drawInfo.wingShader;
+			shader13 = drawInfo.carpetShader;
+			color = drawInfo.hairColor;
+			color2 = drawInfo.eyeWhiteColor;
+			color3 = drawInfo.eyeColor;
+			color4 = drawInfo.faceColor;
+			color5 = drawInfo.bodyColor;
+			color6 = drawInfo.legColor;
+			color7 = drawInfo.shirtColor;
+			color8 = drawInfo.underShirtColor;
+			color9 = drawInfo.pantsColor;
+			color10 = drawInfo.shoeColor;
+			color11 = drawInfo.upperArmorColor;
+			color12 = drawInfo.middleArmorColor;
+			color13 = drawInfo.mountColor;
+			color14 = drawInfo.lowerArmorColor;
+			num12 = drawInfo.headGlowMask;
+			num13 = drawInfo.bodyGlowMask;
+			num14 = drawInfo.armGlowMask;
+			num15 = drawInfo.legGlowMask;
+			color16 = drawInfo.headGlowMaskColor;
+			color17 = drawInfo.bodyGlowMaskColor;
+			color18 = drawInfo.armGlowMaskColor;
+			color19 = drawInfo.legGlowMaskColor;
+			spriteEffects = drawInfo.spriteEffects;
+			vector2 = drawInfo.legOrigin;
+			origin = drawInfo.bodyOrigin;
+			vector3 = drawInfo.headOrigin;
+			if (layerIndex >= drawLayers.Count)
+			{
+				goto postDraw;
+			}
+			if (!drawLayers[layerIndex].ShouldDraw(drawLayers))
+			{
+				goto layerLoopContinue;
+			}
+			if (drawLayers[layerIndex] == PlayerLayer.HairBack)
+			{
+				goto hairBackLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.MountBack)
+			{
+				goto mountBackLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.MiscEffectsBack)
+			{
+				goto miscEffectsBackLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.BackAcc)
+			{
+				goto backAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Wings)
+			{
+				goto wingsLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.BalloonAcc)
+			{
+				goto balloonAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Skin)
+			{
+				goto skinLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Legs)
+			{
+				goto legsLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.ShoeAcc)
+			{
+				goto shoeAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Body)
+			{
+				goto bodyLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HandOffAcc)
+			{
+				goto handOffAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.WaistAcc)
+			{
+				goto waistAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.NeckAcc)
+			{
+				goto neckAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Face)
+			{
+				goto faceLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Hair)
+			{
+				goto hairLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Head)
+			{
+				goto headLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.FaceAcc)
+			{
+				goto faceAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.MountFront)
+			{
+				goto mountFrontLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.ShieldAcc)
+			{
+				goto shieldAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.SolarShield)
+			{
+				goto solarShieldLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HeldProjBack)
+			{
+				goto heldProjBackLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HeldItem)
+			{
+				goto heldItemLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Arms)
+			{
+				goto armsLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HandOnAcc)
+			{
+				goto handOnAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HeldProjFront)
+			{
+				goto heldProjFrontLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.FrontAcc)
+			{
+				goto frontAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.MiscEffectsFront)
+			{
+				goto miscEffectsFrontLayer;
+			}
+			else
+			{
+				drawLayers[layerIndex].Draw(ref drawInfo);
+			}
+			goto layerLoopContinue;
+			hairBackLayer:
 			if (flag6)
 			{
 				bodyFrame.Height = 0;
@@ -31492,6 +_,8 @@
 					bodyFrame.Height = height;
 				}
 			}
+			goto layerLoopContinue;
+			mountBackLayer:
 			if (drawPlayer.mount.Active)
 			{
 				drawPlayer.mount.Draw(Main.playerDrawData, 0, drawPlayer, Position, color13, spriteEffects, shadow);
@@ -31509,6 +_,8 @@
 				value.shader = shader13;
 				Main.playerDrawData.Add(value);
 			}
+			goto layerLoopContinue;
+			miscEffectsBackLayer:
 			if (drawPlayer.electrified && shadow == 0f)
 			{
 				Texture2D texture2D = Main.glowMaskTexture[25];
@@ -31529,6 +_,7 @@
 				Microsoft.Xna.Framework.Color color21 = Microsoft.Xna.Framework.Color.Lerp(color12, Microsoft.Xna.Framework.Color.White, 0.7f);
 				Texture2D texture2D2 = Main.extraTexture[74];
 				Texture2D texture = Main.glowMaskTexture[217];
+				// TODO do we need flag8
 				bool flag8 = !drawPlayer.setForbiddenCooldownLocked;
 				int num52 = (int)(((float)drawPlayer.miscCounter / 300f * 6.28318548f).ToRotationVector2().Y * 6f);
 				float num53 = ((float)drawPlayer.miscCounter / 75f * 6.28318548f).ToRotationVector2().X * 4f;
@@ -31558,6 +_,8 @@
 				value = new DrawData(texture2D3, new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), null, color23, drawPlayer.bodyRotation, texture2D3.Size() / 2f, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
+			goto layerLoopContinue;
+			backAccLayer:
 			bool flag9 = false;
 			if ((drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].type == 779 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106 || drawPlayer.body == 170))
 			{
@@ -31617,9 +_,9 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
-			if (!flag9 && drawPlayer.back > 0 && drawPlayer.back < 14 && !drawPlayer.mount.Active)
-			{
-				if (drawPlayer.front >= 1 && drawPlayer.front <= 4)
+			if (!flag9 && drawPlayer.back > 0 && !drawPlayer.mount.Active)
+			{
+				if (drawPlayer.front >= 1)
 				{
 					int num58 = drawPlayer.bodyFrame.Y / 56;
 					if (num58 < 1 || num58 > 5)
@@ -31650,6 +_,9 @@
 				value.shader = shader4;
 				Main.playerDrawData.Add(value);
 			}
+			goto layerLoopContinue;
+			wingsLayer:
+			flag9 = (drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].type == 779 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106 || drawPlayer.body == 170);
 			Position.Y += (float)((int)num4 / 2);
 			if (!flag9 && drawPlayer.wings > 0)
 			{
@@ -31827,6 +_,10 @@
 					}
 				}
 			}
+			Position.Y -= (float)((int)num5 / 2);
+			goto layerLoopContinue;
+			balloonAccLayer:
+			Position.Y += (float)((int)num5 / 2);
 			if (drawPlayer.balloon > 0)
 			{
 				int num64 = DateTime.Now.Millisecond % 800 / 200;
@@ -31844,21 +_,25 @@
 				Main.playerDrawData.Add(value);
 			}
 			Position.Y -= (float)((int)num4 / 2);
-			if (drawPlayer.body != 83 && drawPlayer.body != 82 && drawPlayer.body != 93)
+			goto layerLoopContinue;
+			skinLayer:
+			if (drawPlayer.body != 83 && drawPlayer.body != 82 && drawPlayer.body != 93 && ItemLoader.DrawBody(drawPlayer))
 			{
 				value = new DrawData(Main.playerTextures[skinVariant, 3], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
-				if (drawPlayer.legs != 67 && drawPlayer.legs != 106 && drawPlayer.legs != 140 && drawPlayer.legs != 138 && drawPlayer.shoe != 15 && drawPlayer.legs != 143)
+				if (drawPlayer.legs != 67 && drawPlayer.legs != 106 && drawPlayer.legs != 140 && drawPlayer.legs != 138 && drawPlayer.shoe != 15 && drawPlayer.legs != 143 && ItemLoader.DrawLegs(drawPlayer))
 				{
 					value = new DrawData(Main.playerTextures[skinVariant, 10], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color6, drawPlayer.legRotation, origin, 1f, spriteEffects, 0);
 					Main.playerDrawData.Add(value);
 				}
 			}
+			goto layerLoopContinue;
 			if (drawPlayer.wearsRobe)
 			{
 				goto IL_6502;
 			}
 			IL_6048:
+			legsLayer:
 			if (drawPlayer.legs == 140)
 			{
 				if (!drawPlayer.invis && !drawPlayer.mount.Active)
@@ -31882,7 +_,7 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
-			else if (drawPlayer.legs > 0 && drawPlayer.legs < 157 && (drawPlayer.shoe != 15 || drawPlayer.wearsRobe))
+			else if (drawPlayer.legs > 0 && (drawPlayer.shoe != 15 || drawPlayer.wearsRobe))
 			{
 				if (!drawPlayer.invis)
 				{
@@ -31904,24 +_,28 @@
 				value = new DrawData(Main.playerTextures[skinVariant, 12], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color10, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
+			goto layerLoopContinue;
 			if (drawPlayer.wearsRobe)
 			{
 				goto IL_65DD;
 			}
 			IL_6502:
-			if (drawPlayer.shoe > 0 && drawPlayer.shoe < 18)
+			shoeAccLayer:
+			if (drawPlayer.shoe > 0)
 			{
 				value = new DrawData(Main.accShoesTexture[(int)drawPlayer.shoe], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color14, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
 				value.shader = shader6;
 				Main.playerDrawData.Add(value);
 			}
+			goto layerLoopContinue;
 			if (drawPlayer.wearsRobe)
 			{
 				goto IL_6048;
 			}
 			IL_65DD:
+			bodyLayer:
 			bool flag11 = skinVariant == 3 || skinVariant == 8 || skinVariant == 7;
-			if (flag11 && (drawPlayer.body <= 0 || drawPlayer.body >= 208) && !drawPlayer.invis)
+			if (flag11 && drawPlayer.body <= 0 && !drawPlayer.invis)
 			{
 				value = new DrawData(Main.playerTextures[skinVariant, 14], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color7, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
@@ -31945,7 +_,7 @@
 				value = new DrawData(Main.armorLegTexture[num67], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color7, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.body > 0 && drawPlayer.body < 208)
+			if (drawPlayer.body > 0)
 			{
 				Microsoft.Xna.Framework.Rectangle bodyFrame2 = drawPlayer.bodyFrame;
 				int num68 = num;
@@ -32001,13 +_,17 @@
 				value = new DrawData(Main.playerTextures[skinVariant, 5], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.handoff > 0 && drawPlayer.handoff < 12)
+			goto layerLoopContinue;
+			handOffAccLayer:
+			if (drawPlayer.handoff > 0)
 			{
 				value = new DrawData(Main.accHandsOffTexture[(int)drawPlayer.handoff], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader3;
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.waist > 0 && drawPlayer.waist < 13)
+			goto layerLoopContinue;
+			waistAccLayer:
+			if (drawPlayer.waist > 0)
 			{
 				Microsoft.Xna.Framework.Rectangle legFrame = drawPlayer.legFrame;
 				if (legFrame.Y >= 1064)
@@ -32018,13 +_,17 @@
 				value.shader = shader7;
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.neck > 0 && drawPlayer.neck < 10)
+			goto layerLoopContinue;
+			neckAccLayer:
+			if (drawPlayer.neck > 0)
 			{
 				value = new DrawData(Main.accNeckTexture[(int)drawPlayer.neck], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader9;
 				Main.playerDrawData.Add(value);
 			}
-			if (!drawPlayer.invis && drawPlayer.head != 38 && drawPlayer.head != 135)
+			goto layerLoopContinue;
+			faceLayer:
+			if (!drawPlayer.invis && drawPlayer.head != 38 && drawPlayer.head != 135 && ItemLoader.DrawHead(drawPlayer))
 			{
 				value = new DrawData(Main.playerTextures[skinVariant, 0], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color4, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
@@ -32038,6 +_,8 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
+			goto layerLoopContinue;
+			hairLayer:
 			if (flag4)
 			{
 				value = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
@@ -32056,6 +_,8 @@
 				value.shader = -num3;
 				Main.playerDrawData.Add(value);
 			}
+			goto layerLoopContinue;
+			headLayer:
 			if (drawPlayer.head == 23)
 			{
 				if (!drawPlayer.invis)
@@ -32091,7 +_,7 @@
 				value.shader = num5;
 				Main.playerDrawData.Add(value);
 			}
-			else if (drawPlayer.head > 0 && drawPlayer.head < 214 && drawPlayer.head != 28)
+			else if (drawPlayer.head > 0 && drawPlayer.head != 28)
 			{
 				if (!drawPlayer.invis || (drawPlayer.head != 39 && drawPlayer.head != 38))
 				{
@@ -32172,7 +_,9 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
-			if (drawPlayer.face > 0 && drawPlayer.face < 9)
+			goto layerLoopContinue;
+			faceAccLayer:
+			if (drawPlayer.face > 0)
 			{
 				if (drawPlayer.face == 7)
 				{
@@ -32187,6 +_,8 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
+			goto layerLoopContinue;
+			mountFrontLayer:
 			if (drawPlayer.mount.Active)
 			{
 				drawPlayer.mount.Draw(Main.playerDrawData, 2, drawPlayer, Position, color13, spriteEffects, shadow);
@@ -32211,7 +_,9 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
-			if (drawPlayer.shield > 0 && drawPlayer.shield < 7)
+			goto layerLoopContinue;
+			shieldAccLayer:
+			if (drawPlayer.shield > 0)
 			{
 				Vector2 zero = Vector2.Zero;
 				if (drawPlayer.shieldRaised)
@@ -32261,11 +_,13 @@
 					value.shader = shader8;
 					Main.playerDrawData.Add(value);
 				}
+				goto layerLoopContinue;
 				if (drawPlayer.mount.Cart)
 				{
 					Main.playerDrawData.Reverse(Main.playerDrawData.Count - 2, 2);
 				}
 			}
+			solarShieldLayer:
 			Position.Y += (float)((int)num4 / 2);
 			if (drawPlayer.solarShields > 0 && shadow == 0f && !drawPlayer.dead)
 			{
@@ -32282,10 +_,14 @@
 				Main.playerDrawData.Add(value);
 			}
 			Position.Y -= (float)((int)num4 / 2);
+			goto layerLoopContinue;
+			heldProjBackLayer:
 			if (drawPlayer.heldProj >= 0 && shadow == 0f && !flag3)
 			{
 				projectileDrawPosition = Main.playerDrawData.Count;
 			}
+			goto layerLoopContinue;
+			heldItemColor:
 			Microsoft.Xna.Framework.Color color34 = Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0));
 			if (drawPlayer.inventory[drawPlayer.selectedItem].type == 678)
 			{
@@ -32311,6 +_,8 @@
 				float arg_8EE4_0 = (1f + num92 * 10f) / 11f;
 				color34 = color34.MultiplyRGBA(new Microsoft.Xna.Framework.Color(Vector4.Lerp(Vector4.One, new Vector4(0f, 0.12f, 0.16f, 0f), 1f - num92)));
 			}
+			goto postSetupVars;
+			heldItemLayer:
 			if (shadow == 0f && !drawPlayer.frozen && ((drawPlayer.itemAnimation > 0 && drawPlayer.inventory[drawPlayer.selectedItem].useStyle != 0) || (drawPlayer.inventory[drawPlayer.selectedItem].holdStyle > 0 && !drawPlayer.pulley)) && drawPlayer.inventory[drawPlayer.selectedItem].type > 0 && !drawPlayer.dead && !drawPlayer.inventory[drawPlayer.selectedItem].noUseGraphic && (!drawPlayer.wet || !drawPlayer.inventory[drawPlayer.selectedItem].noWet))
 			{
 				string arg_8FD4_0 = drawPlayer.name;
@@ -32399,6 +_,7 @@
 							zero3 = new Vector2((float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, (float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height);
 							num96 -= Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width;
 						}
+						ItemLoader.HoldoutOrigin(drawPlayer, ref zero3);
 						value = new DrawData(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float)((int)(value2.X - Main.screenPosition.X + zero3.X + (float)num96)), (float)((int)(value2.Y - Main.screenPosition.Y + (float)num97))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color34), num95, zero3, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
 						Main.playerDrawData.Add(value);
 						if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3870)
@@ -32521,7 +_,9 @@
 					}
 				}
 			}
-			if (drawPlayer.body > 0 && drawPlayer.body < 208)
+			goto layerLoopContinue;
+			armsLayer:
+			if (drawPlayer.body > 0)
 			{
 				Microsoft.Xna.Framework.Rectangle bodyFrame4 = drawPlayer.bodyFrame;
 				int num102 = num;
@@ -32536,6 +_,7 @@
 					if (flag && !drawPlayer.invis)
 					{
 						int arg_A725_0 = drawPlayer.body;
+						//patch file: flag, flag2
 						if (flag2)
 						{
 							value = new DrawData(Main.playerTextures[skinVariant, 7], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
@@ -32578,7 +_,9 @@
 				value = new DrawData(Main.playerTextures[skinVariant, 13], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color7, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.handon > 0 && drawPlayer.handon < 20)
+			goto layerLoopContinue;
+			handOnAccLayer:
+			if (drawPlayer.handon > 0)
 			{
 				value = new DrawData(Main.accHandsOnTexture[(int)drawPlayer.handon], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader2;
@@ -32598,16 +_,23 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
+			goto layerLoopContinue;
+			heldProjFrontLayer:
 			if (drawPlayer.heldProj >= 0 && shadow == 0f && flag3)
 			{
 				projectileDrawPosition = Main.playerDrawData.Count;
 			}
-			if (!flag9 && drawPlayer.front > 0 && drawPlayer.front < 5 && !drawPlayer.mount.Active)
+			goto layerLoopContinue;
+			frontAccLayer:
+			flag9 = (drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].type == 779 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106 || drawPlayer.body == 170);
+			if (!flag9 && drawPlayer.front > 0 && !drawPlayer.mount.Active)
 			{
 				value = new DrawData(Main.accFrontTexture[(int)drawPlayer.front], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader5;
 				Main.playerDrawData.Add(value);
 			}
+			goto layerLoopContinue;
+			miscEffectsFrontLayer:
 			if (drawPlayer.frozen && shadow == 0f)
 			{
 				Microsoft.Xna.Framework.Color color40 = color12;
@@ -32742,6 +_,8 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
+			goto layerLoopContinue;
+			postDraw:
 			if (rotation != 0f)
 			{
 				Vector2 value16 = Position - Main.screenPosition + rotationOrigin;
@@ -32839,7 +_,7 @@
 			}
 		}
 
-		protected void DrawItem(Item item, int whoami)
+		public void DrawItem(Item item, int whoami)
 		{
 			int arg_22_0 = (int)((double)item.position.X + (double)item.width * 0.5) / 16;
 			int arg_28_0 = Lighting.offScreenTiles;
@@ -32866,6 +_,11 @@
 			float scale = 1f;
 			Microsoft.Xna.Framework.Color alpha = item.GetAlpha(color);
 			ItemSlot.GetItemLight(ref alpha, ref scale, item, false);
+			if (!ItemLoader.PreDrawInWorld(item, Main.spriteBatch, color, alpha, ref num4, ref scale, whoami))
+			{
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
+				return;
+			}
 			float num5 = (float)(item.height - Main.itemTexture[item.type].Height);
 			float num6 = (float)(item.width / 2 - Main.itemTexture[item.type].Width / 2);
 			if (item.type >= 71 && item.type <= 74)
@@ -32885,6 +_,7 @@
 				int num8 = Main.coinTexture[num7].Height / 8;
 				num6 = (float)(item.width / 2 - Main.coinTexture[num7].Width / 2);
 				Main.spriteBatch.Draw(Main.coinTexture[num7], new Vector2(item.position.X - Main.screenPosition.X + (float)(width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(num8 / 2) + num5), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.itemFrame[whoami] * num8 + 1, Main.itemTexture[item.type].Width, num8)), alpha, num4, new Vector2((float)(width / 2), (float)(num8 / 2)), scale, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
 			if (ItemID.Sets.NebulaPickup[item.type])
@@ -32903,6 +_,7 @@
 				num6 = (float)(item.width / 2 - rectangle.Width / 2);
 				num5 = (float)(item.height - rectangle.Height);
 				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(rectangle.Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(rectangle.Height / 2) + num5), new Microsoft.Xna.Framework.Rectangle?(rectangle), alpha, num4, rectangle.Size() / 2f, scale, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
 			if (ItemID.Sets.AnimatesAsSoul[item.type])
@@ -32921,6 +_,7 @@
 				num6 = (float)(item.width / 2 - rectangle2.Width / 2);
 				num5 = (float)(item.height - rectangle2.Height);
 				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(rectangle2.Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(rectangle2.Height / 2) + num5), new Microsoft.Xna.Framework.Rectangle?(rectangle2), alpha, num4, rectangle2.Size() / 2f, scale, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
 			if (item.type == 3858)
@@ -32957,16 +_,25 @@
 					Main.spriteBatch.Draw(Main.glowMaskTexture[(int)item.glowMask], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, item.alpha), num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
 				}
 				Main.spriteBatch.Draw(Main.wireTexture, new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f) + Main.itemTexture[item.type].Size().RotatedBy((double)num4, default(Vector2)) * 0.45f * item.scale, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(4, 58, 8, 8)), alpha, 0f, new Vector2(4f), 1f, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
 			if ((item.type >= 1522 && item.type <= 1527) || item.type == 3643)
 			{
 				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, (int)(Main.mouseTextColor / 2)), num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), (float)Main.mouseTextColor / 1000f + 0.8f, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
 			if (item.type == 3779)
 			{
 				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), alpha, num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
+				return;
+			}
+			if (ItemLoader.animations.Contains(item.type))
+			{
+				ItemLoader.DrawAnimatedItem(item, whoami, color, alpha, num4, scale);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
 			Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), alpha, num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
@@ -32978,6 +_,7 @@
 			{
 				Main.spriteBatch.Draw(Main.glowMaskTexture[(int)item.glowMask], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, item.alpha), num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
 			}
+			ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 		}
 
 		protected void DrawRain()
@@ -33123,7 +_,7 @@
 							}
 						}
 						Microsoft.Xna.Framework.Color color5 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
-						if (dust.type == 6 || dust.type == 15 || (dust.noLight && dust.type < 86 && dust.type > 91) || (dust.type >= 59 && dust.type <= 64))
+						if (dust.type == 6 || dust.type == 15 || (dust.noLight && (dust.type < 86 || dust.type > 91)) || (dust.type >= 59 && dust.type <= 64))
 						{
 							color5 = Microsoft.Xna.Framework.Color.White;
 						}
@@ -33131,6 +_,12 @@
 						if (dust.type == 213)
 						{
 							scale = 1f;
+						}
+						ModDust modDust = ModDust.GetDust(dust.type);
+						if (modDust != null)
+						{
+							modDust.Draw(dust, color5, scale);
+							continue;
 						}
 						Main.spriteBatch.Draw(Main.dustTexture, dust.position - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), color5, dust.rotation, new Vector2(4f, 4f), scale, SpriteEffects.None, 0f);
 						if (dust.color != default(Microsoft.Xna.Framework.Color))
@@ -33746,7 +_,7 @@
 			for (int j = 0; j < 22; j++)
 			{
 				int num6 = Main.player[Main.myPlayer].buffType[j];
-				if (Main.debuff[num6] && Main.player[Main.myPlayer].buffTime[j] > 5 && num6 != 28 && num6 != 34 && num6 != 87 && num6 != 89 && num6 != 21 && num6 != 86 && num6 != 199)
+				if (Main.debuff[num6] && Main.player[Main.myPlayer].buffTime[j] > 5 && BuffLoader.CanBeCleared(num6))
 				{
 					num5 += 1000;
 				}
@@ -34043,6 +_,7 @@
 					text = Lang.inter[54] + " (" + text4 + ")";
 				}
 			}
+			NPCLoader.SetChatButtons(ref text, ref text2);
 			if (!flag)
 			{
 				int num19 = 180 + (Main.screenWidth - 800) / 2;
@@ -34497,7 +_,7 @@
 										for (int l = 0; l < 22; l++)
 										{
 											int num27 = Main.player[Main.myPlayer].buffType[l];
-											if (Main.debuff[num27] && Main.player[Main.myPlayer].buffTime[l] > 0 && num27 != 28 && num27 != 34 && num27 != 87 && num27 != 89 && num27 != 21 && num27 != 86 && num27 != 199)
+											if (Main.debuff[num27] && Main.player[Main.myPlayer].buffTime[l] > 0 && BuffLoader.CanBeCleared(num27))
 											{
 												Main.player[Main.myPlayer].DelBuff(l);
 												l = -1;
@@ -34612,6 +_,7 @@
 							Main.HelpText();
 							Main.npcChatText = Lang.BartenderHelpText(Main.npc[Main.player[Main.myPlayer].talkNPC]);
 						}
+						NPCLoader.OnChatButtonClicked(false);
 					}
 				}
 			}
@@ -34894,6 +_,7 @@
 									Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								}
 							}
+							NPCLoader.OnChatButtonClicked(true);
 						}
 					}
 				}
@@ -35369,14 +_,13 @@
 							int num31 = (int)(Main.player[Main.myPlayer].manaSickReduction * 100f) + 1;
 							Main.buffString = Main.buffString + num31 + "%";
 						}
+						int rare = 0;
 						if (Main.meleeBuff[num30])
 						{
-							this.MouseText(Main.buffName[num30], -10, 0);
-						}
-						else
-						{
-							this.MouseText(Main.buffName[num30], 0, 0);
-						}
+							rare = -10;
+						}
+						BuffLoader.ModifyBuffTip(num30, ref Main.buffString, ref rare);
+						this.MouseText(Main.buffName[num30], rare, 0);
 					}
 				}
 			}
@@ -35876,11 +_,13 @@
 							if (Main.mouseLeftRelease && Main.mouseLeft && Main.player[Main.myPlayer].BuyItem(num62, -1))
 							{
 								bool favorited = Main.reforgeItem.favorited;
+								ItemLoader.PreReforge(Main.reforgeItem);
 								Main.reforgeItem.netDefaults(Main.reforgeItem.netID);
 								Main.reforgeItem.Prefix(-2);
 								Main.reforgeItem.position.X = Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2) - (float)(Main.reforgeItem.width / 2);
 								Main.reforgeItem.position.Y = Main.player[Main.myPlayer].position.Y + (float)(Main.player[Main.myPlayer].height / 2) - (float)(Main.reforgeItem.height / 2);
 								Main.reforgeItem.favorited = favorited;
+								ItemLoader.PostReforge(Main.reforgeItem);
 								ItemText.NewText(Main.reforgeItem, Main.reforgeItem.stack, true, false);
 								Main.PlaySound(SoundID.Item37, -1, -1);
 							}
@@ -35949,7 +_,7 @@
 							else
 							{
 								num73++;
-								Main.spriteBatch.DrawString(Main.fontMouseText, Lang.mapLegend[MapHelper.TileToLookup(Main.recipe[Main.availableRecipe[num72]].requiredTile[num74], 0)], new Vector2((float)num70, (float)(num71 + 118 + num75)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+								Main.spriteBatch.DrawString(Main.fontMouseText, Lang.mapLegend.FromType(Main.recipe[Main.availableRecipe[num72]].requiredTile[num74]), new Vector2((float)num70, (float)(num71 + 118 + num75)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 								num74++;
 							}
 						}
@@ -36586,6 +_,8 @@
 			r.Create();
 			if (Main.mouseItem.type > 0 || r.createItem.type > 0)
 			{
+				RecipeHooks.OnCraft(Main.mouseItem, r);
+				ItemLoader.OnCraft(Main.mouseItem, r);
 				Main.PlaySound(7, -1, -1, 1, 1f, 0f);
 			}
 		}
@@ -37214,6 +_,7 @@
 				if (num4 > 0)
 				{
 					Main.buffString = Main.buffTip[num4];
+					int rare = 0;
 					if (num4 == 26 && Main.expertMode)
 					{
 						Main.buffString += Lang.misc[39];
@@ -37229,10 +_,10 @@
 					}
 					if (Main.meleeBuff[num4])
 					{
-						this.MouseText(Main.buffName[num4], -10, 0);
-						return;
-					}
-					this.MouseText(Main.buffName[num4], 0, 0);
+						rare = -10;
+					}
+					BuffLoader.ModifyBuffTip(num4, ref Main.buffString, ref rare);
+					this.MouseText(Main.buffName[num4], rare, 0);
 				}
 			}
 		}
@@ -38661,6 +_,7 @@
 			{
 				current.Skip = false;
 			}
+			ModHooks.ModifyInterfaceLayers(list);
 			MethodSequenceListItem.ExecuteSequence(list);
 		}
 
@@ -38926,6 +_,8 @@
 
 		private void DrawInterface_33_MouseText()
 		{
+			// TODO - UI Sorting and selective disable support -  move this to new one between 32 and 33
+			ModLoader.ModHooks.PostDrawInterface(Main.spriteBatch);
 			if (Main.mouseItem.stack <= 0)
 			{
 				Main.mouseItem.type = 0;
@@ -39590,6 +_,10 @@
 							{
 								scale = 1.5f;
 							}
+							if (!NPCLoader.DrawHealthBar(Main.npc[i], ref scale))
+							{
+								continue;
+ 							}
 							if ((!Main.expertMode || type != 266) && ((type != 439 && type != 440) || Main.npc[i].ai[0] != 5f))
 							{
 								if (type >= 134 && type <= 136)
@@ -40639,7 +_,7 @@
 						}
 						else
 						{
-							text2 = Language.GetTextValue("GameUI.OreDetected", Lang.mapLegend[MapHelper.TileToLookup(Main.player[Main.myPlayer].bestOre, 0)]);
+							text2 = Language.GetTextValue("GameUI.OreDetected", Lang.mapLegend.FromType(Main.player[Main.myPlayer].bestOre));
 						}
 						flag10 = true;
 					}
@@ -42404,7 +_,7 @@
 			}
 			else
 			{
-				if (Main.netMode == 1 || Main.menuMode == 14)
+				if (Main.netMode == 1 && menuMode < 10000 && menuMode != 888 || Main.menuMode == 14)
 				{
 					num5 = 2;
 					array9[0] = Main.statusText;
@@ -42542,11 +_,7 @@
 						{
 							text = text + " -world \"" + Main.worldPathName + "\"";
 						}
-#if WINDOWS
-						this.tServer.StartInfo.FileName = "TerrariaServer.exe";
-#else
-						this.tServer.StartInfo.FileName = "TerrariaServer";
-#endif
+						this.tServer.StartInfo.FileName = "tModLoaderServer.exe";
 						this.tServer.StartInfo.Arguments = text;
 						if (Main.libPath != "")
 						{
@@ -42675,17 +_,26 @@
 				{
 					num5 = 3;
 					array9[0] = Lang.menu[9];
+					if (WorldIO.customDataFail != null)
+					{
+						array9[0] = WorldIO.customDataFail.modName + " " + array9[0];
+					}
 					array[0] = true;
 					num2 -= 30;
 					array4[1] = 70;
 					array4[2] = 50;
 					array9[1] = Lang.menu[10];
 					array9[2] = Lang.menu[6];
+					if (WorldIO.customDataFail != null)
+					{
+						array9[2] = "View Error";
+					}
 					if (this.selectedMenu == 1)
 					{
 						if (FileUtilities.Exists(Main.worldPathName + ".bak", Main.ActiveWorldFileData.IsCloudSave))
 						{
 							FileUtilities.Move(Main.worldPathName + ".bak", Main.worldPathName, Main.ActiveWorldFileData.IsCloudSave, true);
+							WorldIO.LoadBackup(Main.worldPathName, Main.ActiveWorldFileData.IsCloudSave);
 							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 							WorldGen.playWorld();
 							Main.menuMode = 10;
@@ -42701,7 +_,14 @@
 					{
 						flag5 = false;
 						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
-						Main.menuMode = 0;
+						if (WorldIO.customDataFail == null)
+						{
+							Main.menuMode = 0;
+						}
+						else
+						{
+							ErrorLogger.LogException(WorldIO.customDataFail.InnerException);
+						}
 						Main.netMode = 0;
 					}
 				}
@@ -42709,6 +_,10 @@
 				{
 					num5 = 3;
 					array9[0] = Lang.menu[9];
+					if (WorldIO.customDataFail != null)
+					{
+						array9[0] = WorldIO.customDataFail.modName + " " + array9[0];
+					}
 					array[0] = true;
 					array[1] = true;
 					num2 -= 30;
@@ -42716,11 +_,22 @@
 					array4[2] = 50;
 					array9[1] = Lang.menu[11];
 					array9[2] = Lang.menu[5];
+					if (WorldIO.customDataFail != null)
+					{
+						array9[2] = "View Error";
+					}
 					if (this.selectedMenu == 2 || flag5)
 					{
 						flag5 = false;
 						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
-						Main.menuMode = 0;
+						if (WorldIO.customDataFail == null)
+						{
+							Main.menuMode = 0;
+						}
+						else
+						{
+							ErrorLogger.LogException(WorldIO.customDataFail.InnerException);
+						}
 						Main.netMode = 0;
 					}
 				}
@@ -42813,6 +_,8 @@
 					{
 						SkyManager.Instance["Slime"].Deactivate(new object[0]);
 					}
+					Filters.Scene.DeactivateAll();
+					SkyManager.Instance.DeactivateAll();
 					int num10 = 0;
 					num5 = 5;
 					num4 = 60;
@@ -42838,6 +_,7 @@
 						Main.menuMode = 888;
 					}
 					num10++;
+					Interface.AddMenuButtons(this, this.selectedMenu, array9, array7, ref num2, ref num4, ref num10, ref num5);
 					array9[num10] = Lang.menu[14];
 					if (this.selectedMenu == num10)
 					{
@@ -43525,6 +_,7 @@
 						num2 = 210;
 						num4 = 37;
 						num5 = 8;
+						num5++; // Room for tModLoader settings option.
 						array4[num5 - 1] = 8;
 						for (int num18 = 0; num18 < num5; num18++)
 						{
@@ -43578,6 +_,13 @@
 						{
 							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 							Main.menuMode = 1213;
+						}
+						num19++;
+						array9[num19] = "tModLoader " + Lang.menu[14]; //"tModLoader Settings"
+						if (this.selectedMenu == num19)
+						{
+							Main.PlaySound(10, -1, -1, 1);
+							Main.menuMode = Interface.tModLoaderSettingsID;
 						}
 						num19++;
 						array9[num19] = Lang.menu[5];
@@ -44751,6 +_,10 @@
 							WorldGen.setWorldSize();
 						}
 					}
+					else
+					{
+						Interface.ModLoaderMenus(this, this.selectedMenu, array9, array7, array4, ref num2, ref num4, ref num5, ref flag5);
+					}
 				}
 			}
 			IL_5075:
@@ -45336,6 +_,7 @@
 			}
 			for (int num91 = 0; num91 < num5; num91++)
 			{
+				//patch file: num5, array9, num91
 				if (array9[num91] != null)
 				{
 					Vector2 origin = Main.fontDeathText.MeasureString(array9[num91]);
@@ -45445,6 +_,7 @@
 						num100 *= array7[num91];
 						if (!array8[num91])
 						{
+							//patch file: array9, array7, array4, num2, num4
 							Main.spriteBatch.DrawString(Main.fontDeathText, array9[num91], new Vector2((float)(num3 + num98 + array5[num91]), (float)(num2 + num4 * num91 + num99) + origin.Y * array7[num91] + (float)array4[num91]), color10, 0f, origin, num100, SpriteEffects.None, 0f);
 						}
 						else
@@ -45612,10 +_,11 @@
 				{
 					num108 = 2;
 				}
-				Vector2 origin3 = Main.fontMouseText.MeasureString(Main.versionNumber);
+				string drawVersion = Main.versionNumber + Environment.NewLine + ModLoader.ModLoader.versionedName;
+				Vector2 origin3 = Main.fontMouseText.MeasureString(drawVersion);
 				origin3.X *= 0.5f;
 				origin3.Y *= 0.5f;
-				Main.spriteBatch.DrawString(Main.fontMouseText, Main.versionNumber, new Vector2(origin3.X + (float)num107 + 10f, (float)Main.screenHeight - origin3.Y + (float)num108 - 2f), color12, 0f, origin3, 1f, SpriteEffects.None, 0f);
+				Main.spriteBatch.DrawString(Main.fontMouseText, drawVersion, new Vector2(origin3.X + (float)num107 + 10f, (float)Main.screenHeight - origin3.Y + (float)num108 - 2f), color12, 0f, origin3, 1f, SpriteEffects.None, 0f);
 			}
 			Vector2 bonus = Main.DrawThickCursor(false);
 			Main.DrawCursor(bonus, false);
@@ -45924,6 +_,7 @@
 			{
 				num9 = 2;
 			}
+			UgBgStyleLoader.ChooseStyle(ref num9);
 			if (num9 != Main.ugBack)
 			{
 				Main.oldUgBack = Main.ugBack;
@@ -46131,6 +_,7 @@
 					array4[5] = 127;
 				}
 				array4[6] = 185 + Main.hellBackStyle;
+				UgBgStyleLoader.FillTextureArray(num10, array4);
 				this.LoadBackground(array4[0]);
 				this.LoadBackground(array4[1]);
 				this.LoadBackground(array4[2]);
@@ -48666,7 +_,12 @@
 				Main.spriteBatch.End();
 				Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
 				flag = true;
-				if (Main.screenPosition.Y > (float)((Main.maxTilesY - 232) * 16))
+				Texture2D modTexture = PlayerHooks.GetMapBackgroundImage(Main.player[Main.myPlayer]);
+				if (modTexture != null)
+				{
+					Main.spriteBatch.Draw(modTexture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Microsoft.Xna.Framework.Color.White);
+				}
+				else if (Main.screenPosition.Y > (float)((Main.maxTilesY - 232) * 16))
 				{
 					Main.spriteBatch.Draw(this.mapBG3Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Microsoft.Xna.Framework.Color.White);
 				}
@@ -48850,7 +_,7 @@
 			float num35 = (float)Main.textureMaxHeight * num16;
 			float num36 = num;
 			float num37 = 0f;
-			for (int k = 0; k <= 4; k++)
+			for (int k = 0; k <= Main.mapTargetX - 1; k++)
 			{
 				if ((float)((k + 1) * Main.textureMaxWidth) > num6 && (float)(k * Main.textureMaxWidth) < num6 + num8)
 				{
@@ -49269,6 +_,7 @@
 					}
 					else if (type >= num96 && type < num96 + num97)
 					{
+						//patch file: num91, num92
 						Tile tile3 = Main.tile[num91, num92];
 						if (tile3 == null)
 						{
@@ -49298,7 +_,7 @@
 					}
 					else
 					{
-						text = Lang.mapLegend[type];
+						text = Lang.mapLegend.FromTile(Main.Map[num91, num92], num91, num92);
 					}
 				}
 				float num106 = (num16 * 0.25f * 2f + 1f) / 3f;
@@ -49474,6 +_,7 @@
 					}
 				}
 				Main.spriteBatch.Draw(Main.mapIconTexture[num139], new Vector2((float)num137, (float)num138), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.mapIconTexture[num139].Width, Main.mapIconTexture[num139].Height)), new Microsoft.Xna.Framework.Color(num140, num140, num140, num140), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+				ModLoader.ModHooks.PostDrawFullscreenMap(ref text);
 				Vector2 bonus = Main.DrawThickCursor(false);
 				Main.DrawCursor(bonus, false);
 			}
@@ -50412,6 +_,7 @@
 				{
 					Main.waterStyle = 0;
 				}
+				WaterStyleLoader.ChooseWaterStyle(ref Main.waterStyle);
 				if (Main.bgStyle != 4 && Main.bloodMoon && !Main.dayTime)
 				{
 					Main.waterStyle = 9;
@@ -50950,6 +_,7 @@
 						Main.liquidAlpha[10] = 1f;
 					}
 				}
+				WaterStyleLoader.UpdateLiquidAlphas();
 			}
 			Main.drewLava = false;
 			if (!Main.drawToScreen)
@@ -50974,9 +_,9 @@
 					this.DrawWater(bg, styleOverride, 1f);
 					return;
 				}
-				for (int i = 0; i < 11; i++)
-				{
-					if (i != 1 && Main.liquidAlpha[i] > 0f)
+				for (int i = 0; i < WaterStyleLoader.WaterStyleCount; i++)
+				{
+					if (i != 1 && i != 11 && Main.liquidAlpha[i] > 0f)
 					{
 						this.DrawWater(bg, i, Main.liquidAlpha[i]);
 					}
@@ -51152,21 +_,23 @@
 						if (Main.waterStyle < 10)
 						{
 							this.DrawWater(bg, 10, Main.liquidAlpha[10]);
-							return;
-						}
-						this.DrawWater(bg, 10, 1f);
-						return;
+						}
+						else
+						{
+							this.DrawWater(bg, 10, 1f);
+						}
 					}
 					else
 					{
 						this.DrawWater(bg, 10, Main.liquidAlpha[10]);
 					}
 				}
+				WaterStyleLoader.DrawWatersToScreen(bg);
 				return;
 			}
 		}
 
-		protected void DrawWater(bool bg = false, int Style = 0, float Alpha = 1f)
+		protected internal void DrawWater(bool bg = false, int Style = 0, float Alpha = 1f)
 		{
 			if (Main.drawToScreen)
 			{
@@ -51745,7 +_,7 @@
 						tile = new Tile();
 						Main.tile[j, i] = tile;
 					}
-					byte wall = tile.wall;
+					ushort wall = tile.wall;
 					if (wall > 0 && !this.FullTile(j, i))
 					{
 						Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
@@ -51753,6 +_,11 @@
 						{
 							this.LoadWall((int)wall);
 							int num9 = (int)(Main.wallFrame[(int)wall] * 180);
+							if (!WallLoader.PreDraw(j, i, wall, Main.spriteBatch))
+							{
+								WallLoader.PostDraw(j, i, wall, Main.spriteBatch);
+								continue;
+							}
 							if (Lighting.lightMode < 2 && !Main.wallLight[(int)wall] && (tile.wall < 88 || tile.wall > 93) && !WorldGen.SolidTile(tile))
 							{
 								Texture2D texture;
@@ -51824,6 +_,7 @@
 									Main.spriteBatch.Draw(Main.wallOutlineTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y + 14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 14, 16, 2)), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 								}
 							}
+							WallLoader.PostDraw(j, i, wall, Main.spriteBatch);
 						}
 					}
 				}
@@ -53466,7 +_,7 @@
 			}
 		}
 
-		protected void LoadNPC(int i)
+		public void LoadNPC(int i)
 		{
 			if (!Main.NPCLoaded[i] || Main.npcTexture[i] == null)
 			{
@@ -53481,7 +_,7 @@
 			}
 		}
 
-		protected void LoadProjectile(int i)
+		public void LoadProjectile(int i)
 		{
 			if (!Main.projectileLoaded[i])
 			{
@@ -53496,7 +_,7 @@
 			}
 		}
 
-		protected void LoadGore(int i)
+		public void LoadGore(int i)
 		{
 			if (!Main.goreLoaded[i])
 			{
@@ -53511,7 +_,7 @@
 			}
 		}
 
-		protected void LoadWall(int i)
+		public void LoadWall(int i)
 		{
 			if (!Main.wallLoaded[i])
 			{
@@ -53526,7 +_,7 @@
 			}
 		}
 
-		protected void LoadTiles(int i)
+		public void LoadTiles(int i)
 		{
 			if (!Main.tileSetsLoaded[i])
 			{
@@ -54016,6 +_,7 @@
 								Main.spriteBatch.Draw(Main.backgroundTexture[24], new Vector2((float)(this.bgStart + Main.bgW * num6), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[24], Main.backgroundHeight[24])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 							}
 						}
+						SurfaceBgStyleLoader.DrawFarTexture();
 						SkyManager.Instance.DrawToDepth(Main.spriteBatch, 5f);
 					}
 				}
@@ -54208,6 +_,7 @@
 								Main.spriteBatch.Draw(Main.backgroundTexture[42], new Vector2((float)(this.bgStart + Main.bgW * num17), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[42], Main.backgroundHeight[42])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 							}
 						}
+						SurfaceBgStyleLoader.DrawMiddleTexture();
 					}
 				}
 				this.cTop = (float)this.bgTop * 1.01f - 150f;
@@ -54244,7 +_,7 @@
 			}
 			if (!Main.mapFullscreen)
 			{
-				for (int num21 = 0; num21 < 10; num21++)
+				for (int num21 = 0; num21 < Main.bgAlpha2.Length; num21++)
 				{
 					if (Main.bgStyle == num21)
 					{
@@ -54905,6 +_,7 @@
 								}
 							}
 						}
+						//patch file: num21
 						if (Main.bgAlpha[num21] > 0f && num21 == 9)
 						{
 							float num44 = (float)Main.backColor.A / 255f;
@@ -55077,6 +_,7 @@
 							}
 							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f);
 						}
+						SurfaceBgStyleLoader.DrawCloseBackground(num21);
 					}
 				}
 			}
@@ -55243,6 +_,19 @@
 
 		private void DoDraw(GameTime gameTime)
 		{
+			try
+			{
+				do_Draw(gameTime);
+			}
+			catch (Exception e)
+			{
+				ErrorLogger.LogException(e);
+				throw;
+			}
+		}
+
+		protected void do_Draw(GameTime gameTime)
+		{
 			if (Main._drawCycleCounter == 0uL)
 			{
 				Main._tileFrameSeed = Utils.RandomNextSeed(Main._tileFrameSeed);
@@ -55407,6 +_,7 @@
 							{
 								num6 = 0.5f;
 							}
+							PlayerHooks.ModifyZoom(Main.player[Main.myPlayer], ref num6);
 							Vector2 vector2 = (Main.MouseScreen - new Vector2((float)Main.screenWidth, (float)Main.screenHeight) / 2f) / (new Vector2((float)Main.screenWidth, (float)Main.screenHeight) / 2f);
 							Vector2 vector3 = vector2;
 							num5 = 48f;
@@ -55439,8 +_,10 @@
 						{
 							num8 = 0;
 						}
-						num3 = (float)(num7 - Main.screenWidth / 2) / 1.25f;
-						num4 = (float)(num8 - Main.screenHeight / 2) / 1.25f;
+						float zoom = .8f;
+						PlayerHooks.ModifyZoom(Main.player[Main.myPlayer], ref zoom);
+						num3 = (float)(num7 - Main.screenWidth / 2) * zoom;
+						num4 = (float)(num8 - Main.screenHeight / 2) * zoom;
 					}
 					else if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 1254 && Main.mouseRight)
 					{
@@ -55462,8 +_,10 @@
 						{
 							num10 = 0;
 						}
-						num3 = (float)(num9 - Main.screenWidth / 2) / 1.5f;
-						num4 = (float)(num10 - Main.screenHeight / 2) / 1.5f;
+						float zoom = 0.6666667f;
+						PlayerHooks.ModifyZoom(Main.player[Main.myPlayer], ref zoom);
+						num3 = (float)(num9 - Main.screenWidth / 2) * zoom;
+						num4 = (float)(num10 - Main.screenHeight / 2) * zoom;
 					}
 					else if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 1299 && Main.player[Main.myPlayer].selectedItem != 58)
 					{
@@ -55485,8 +_,10 @@
 						{
 							num12 = 0;
 						}
-						num3 = (float)(num11 - Main.screenWidth / 2) / 1.5f;
-						num4 = (float)(num12 - Main.screenHeight / 2) / 1.5f;
+						float zoom = 0.6666667f;
+						PlayerHooks.ModifyZoom(Main.player[Main.myPlayer], ref zoom);
+						num3 = (float)(num11 - Main.screenWidth / 2) * zoom;
+						num4 = (float)(num12 - Main.screenHeight / 2) * zoom;
 					}
 					else if (Main.player[Main.myPlayer].scope && Main.mouseRight)
 					{
@@ -55508,8 +_,38 @@
 						{
 							num14 = 0;
 						}
-						num3 = (float)(num13 - Main.screenWidth / 2) / 2f;
-						num4 = (float)(num14 - Main.screenHeight / 2) / 2f;
+						float zoom = 0.5f;
+						PlayerHooks.ModifyZoom(Main.player[Main.myPlayer], ref zoom);
+						num3 = (float)(num13 - Main.screenWidth / 2) * zoom;
+						num4 = (float)(num14 - Main.screenHeight / 2) * zoom;
+					}
+					else
+					{
+						int mouseXClamped = Main.mouseX;
+						int mouseYClamped = Main.mouseY;
+						if (mouseXClamped > Main.screenWidth)
+						{
+							mouseXClamped = Main.screenWidth;
+						}
+						if (mouseXClamped < 0)
+						{
+							mouseXClamped = 0;
+						}
+						if (mouseYClamped > Main.screenHeight)
+						{
+							mouseYClamped = Main.screenHeight;
+						}
+						if (mouseYClamped < 0)
+						{
+							mouseYClamped = 0;
+						}
+						float zoom = -1f;
+						PlayerHooks.ModifyZoom(Main.player[Main.myPlayer], ref zoom);
+						if (zoom != -1f)
+						{
+							num3 = (float)(mouseXClamped - Main.screenWidth / 2) * zoom;
+							num4 = (float)(mouseYClamped - Main.screenHeight / 2) * zoom;
+						}
 					}
 				}
 				if (float.IsNaN(Main.zoomX))
@@ -55554,6 +_,7 @@
 				}
 				Main.screenPosition.X = (float)((int)Main.screenPosition.X);
 				Main.screenPosition.Y = (float)((int)Main.screenPosition.Y);
+				PlayerHooks.ModifyScreenPosition(Main.player[Main.myPlayer]);
 			}
 			if (!Main.gameMenu && Main.netMode != 2)
 			{
@@ -56358,6 +_,7 @@
 				Main.Transform = Matrix.CreateScale(value.X, -value.Y, value.Z) * Matrix.CreateRotationZ(0f) * Matrix.CreateTranslation(new Vector3(0f, (float)Main.screenHeight, 0f));
 				this.Rasterizer = RasterizerState.CullClockwise;
 			}
+			Transform = ModHooks.ModifyTransformMatrix(Transform);
 			bool flag = !Main.drawToScreen && Main.netMode != 2 && !Main.gameMenu && !Main.mapFullscreen && Filters.Scene.CanCapture();
 			if (flag)
 			{
@@ -57196,6 +_,7 @@
 			{
 				num3 = 0;
 			}
+			SurfaceBgStyleLoader.ChooseStyle(ref num3);
 			int num5 = 30;
 			Main.tranSpeed = 0.05f;
 			if (num3 == 0)
@@ -57470,7 +_,7 @@
 					Main.bgAlpha2[6] = 1f;
 				}
 			}
-			else
+			else if (Main.bgStyle == 0 || Main.bgStyle == 3)
 			{
 				Main.bgAlpha2[0] += Main.tranSpeed;
 				if (Main.bgAlpha2[0] > 1f)
@@ -57508,6 +_,18 @@
 					Main.bgAlpha2[6] = 0f;
 				}
 			}
+			if(Main.bgStyle < SurfaceBgStyleLoader.vanillaSurfaceBgStyleCount)
+			{
+				for (int i = SurfaceBgStyleLoader.vanillaSurfaceBgStyleCount; i < Main.bgAlpha2.Length /*SurfaceBackgroundStyleLoader.SurfaceStyleCount*/; i++)
+				{
+					Main.bgAlpha2[i] -= Main.tranSpeed;
+					if (Main.bgAlpha2[i] < 0f)
+					{
+						Main.bgAlpha2[i] = 0f;
+					}
+				}
+			}
+			SurfaceBgStyleLoader.ModifyFarFades(Main.bgStyle, Main.bgAlpha2, Main.tranSpeed);
 			if (Main.ignoreErrors)
 			{
 				try
@@ -58752,7 +_,7 @@
 								num14++;
 							}
 						}
-						for (int num16 = 0; num16 < 580; num16++)
+						for (int num16 = 0; num16 < Main.nextNPC.Length; num16++)
 						{
 							Main.nextNPC[num16] = false;
 						}
@@ -58882,6 +_,7 @@
 								if (Main.npc[num42].type == 441)
 								{
 									num39++;
+									//patch file: num40
 								}
 								if (Main.npc[num42].type == 550)
 								{
@@ -58909,6 +_,7 @@
 										{
 											if (num43 < 2000000000)
 											{
+												//patch file: num43
 												if (Main.player[num45].inventory[num46].type == 71)
 												{
 													num43 += Main.player[num45].inventory[num46].stack;
@@ -59158,6 +_,7 @@
 							{
 								WorldGen.spawnNPC = 550;
 							}
+							NPCLoader.CanTownNPCSpawn(num41, num43);
 						}
 					}
 				}
@@ -59379,7 +_,11 @@
 							return result;
 						}
 						SoundEffectInstance soundEffectInstance = null;
-						if (type == 0)
+						if (SoundLoader.PlayModSound(type, num, num2, num3, ref soundEffectInstance))
+						{
+							// Modders can return null to not play anything (prevent overlap), return the original sound effect (restarts sound), or return a new sound effect instance to allow overlapping sound.
+						}
+						else if (type == 0)
 						{
 							int num7 = Main.rand.Next(3);
 							Main.soundInstanceDig[num7].Stop();
@@ -59996,18 +_,61 @@
 							soundEffectInstance.Pan = num3;
 							Main.trackableSoundInstances[num] = soundEffectInstance;
 						}
+						// TODO, trackable sounds? verify working. return soundEffectInstance
+						else if (type == SoundLoader.customSoundType)
+						{
+							Main.NewText("type == SoundLoader.customSoundType "  + num);
+							SoundLoader.customSoundInstances[num].Stop();
+							SoundLoader.customSoundInstances[num] = SoundLoader.customSounds[num].CreateInstance();
+							SoundLoader.customSoundInstances[num].Volume = num2;
+							SoundLoader.customSoundInstances[num].Pan = num3;
+							//Main.PlaySoundInstance(SoundLoader.customSoundInstances[num]);
+							soundEffectInstance = SoundLoader.customSoundInstances[num];
+						}
 						if (soundEffectInstance != null)
 						{
 							soundEffectInstance.Pitch += pitchOffset;
 							soundEffectInstance.Volume *= volumeScale;
 							Main.PlaySoundInstance(soundEffectInstance);
 						}
+						if ((type >= 30 && type <= 35) || type == 39)
+						{
+							if (Main.ambientError > 0)
+							{
+								Main.ambientError--;
+							}
+						}
+						else
+						{
+							if (Main.soundError > 0)
+							{
+								Main.soundError--;
+							}
+						}
 						result = soundEffectInstance;
 						return result;
 					}
 				}
 				catch
 				{
+					if ((type >= 30 && type <= 35) || type == 39)
+					{
+						Main.ambientError++;
+						if (Main.ambientError >= 100)
+						{
+							Main.ambientError = 0;
+							Main.ambientVolume = 0f;
+						}
+					}
+					else
+					{
+						Main.soundError++;
+						if (Main.soundError >= 100)
+						{
+							Main.soundError = 0;
+							Main.soundVolume = 0f;
+						}
+					}
 				}
 				return null;
 #if !WINDOWS


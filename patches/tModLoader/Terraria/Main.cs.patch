--- src/Terraria\Terraria\Main.cs
+++ src/tModLoader\Terraria\Main.cs
@@ -48,6 +_,8 @@
 using Terraria.IO;
 using Terraria.Localization;
 using Terraria.Map;
+using Terraria.ModLoader;
+using Terraria.ModLoader.IO;
 using Terraria.Net;
 using Terraria.ObjectData;
 using Terraria.Social;
@@ -155,7 +_,7 @@
 		public static int AnnouncementBoxRange = -1;
 		public static Vector2 destroyerHB = new Vector2(0f, 0f);
 		public static FavoritesFile LocalFavoriteData = new FavoritesFile(Main.SavePath + "/favorites.json", false);
-		public static FavoritesFile CloudFavoritesData = new FavoritesFile("/favorites.json", true);
+		public static FavoritesFile CloudFavoritesData = new FavoritesFile("/ModLoader/favorites.json", true);
 		public static FileMetadata WorldFileMetadata;
 		public static FileMetadata MapFileMetadata;
 		private AchievementManager _achievements;
@@ -194,11 +_,13 @@
 		public static bool UseHeatDistortion = true;
 		public static int npcStreamSpeed = 60;
 		public static int musicError = 0;
+		public static int soundError = 0;
+		public static int ambientError = 0;
 		public static bool dedServFPS = false;
 		public static int dedServCount1 = 0;
 		public static int dedServCount2 = 0;
 		public static bool superFast = false;
-		public static int MaxShopIDs = 22;
+		public static int MaxShopIDs = 22 + 1;
 		public static bool[] hairLoaded = new bool[134];
 		public static bool[] wingsLoaded = new bool[38];
 		public static bool[] goreLoaded = new bool[1087];
@@ -478,10 +_,10 @@
 		private static bool flameRingLoaded;
 		private Texture2D flameRingTexture;
 		private Texture2D mapDeathTexture;
-		private RenderTarget2D[,] mapTarget = new RenderTarget2D[Main.mapTargetX, Main.mapTargetY];
+		public RenderTarget2D[, ] mapTarget = new RenderTarget2D[Main.mapTargetX, Main.mapTargetY];
 		private RenderTarget2D mapSectionTexture;
-		public static bool[,] initMap = new bool[Main.mapTargetX, Main.mapTargetY];
-		public static bool[,] mapWasContentLost = new bool[Main.mapTargetX, Main.mapTargetY];
+		public static bool[, ] initMap = new bool[Main.mapTargetX, Main.mapTargetY];
+		public static bool[, ] mapWasContentLost = new bool[Main.mapTargetX, Main.mapTargetY];
 		public Texture2D[] infoIconTexture = new Texture2D[14];
 		public static Texture2D[] wireUITexture = new Texture2D[12];
 		public static Texture2D builderAccTexture;
@@ -539,12 +_,12 @@
 		private int lastTileX;
 		private int firstTileY;
 		private int lastTileY;
-		private double bgParallax;
-		private int bgStart;
-		private int bgLoops;
+		internal double bgParallax;
+		internal int bgStart;
+		internal int bgLoops;
 		private int bgStartY;
 		private int bgLoopsY;
-		private int bgTop;
+		internal int bgTop;
 		public static int renderCount = 99;
 		public static GraphicsDeviceManager graphics;
 		public static SpriteBatch spriteBatch;
@@ -583,6 +_,7 @@
 		public static bool maxQ = true;
 		public static float gfxQuality = 1f;
 		public static float gfxRate = 0.01f;
+		public static Microsoft.Xna.Framework.Color DiscoColor => new Microsoft.Xna.Framework.Color(DiscoR, DiscoG, DiscoB);
 		public int DiscoStyle;
 		public static int DiscoR = 255;
 		public static int DiscoB = 0;
@@ -893,18 +_,18 @@
 		public static Texture2D snowMoonTexture;
 		public static Texture2D oneDropLogo;
 		public static int numTileColors = 31;
-		public static RenderTarget2D[,] tileAltTexture = new RenderTarget2D[467, Main.numTileColors];
-		public static bool[,] tileAltTextureInit = new bool[467, Main.numTileColors];
-		public static bool[,] tileAltTextureDrawn = new bool[467, Main.numTileColors];
+		public static RenderTarget2D[, ] tileAltTexture = new RenderTarget2D[467, Main.numTileColors];
+		public static bool[, ] tileAltTextureInit = new bool[467, Main.numTileColors];
+		public static bool[, ] tileAltTextureDrawn = new bool[467, Main.numTileColors];
 		public static int numTreeStyles = 19;
-		public static RenderTarget2D[,] treeTopAltTexture = new RenderTarget2D[Main.numTreeStyles, Main.numTileColors];
-		public static RenderTarget2D[,] treeBranchAltTexture = new RenderTarget2D[Main.numTreeStyles, Main.numTileColors];
-		public static bool[,] treeAltTextureInit = new bool[Main.numTreeStyles, Main.numTileColors];
-		public static bool[,] treeAltTextureDrawn = new bool[Main.numTreeStyles, Main.numTileColors];
-		public static bool[,] checkTreeAlt = new bool[Main.numTreeStyles, Main.numTileColors];
-		public static RenderTarget2D[,] wallAltTexture = new RenderTarget2D[231, Main.numTileColors];
-		public static bool[,] wallAltTextureInit = new bool[231, Main.numTileColors];
-		public static bool[,] wallAltTextureDrawn = new bool[231, Main.numTileColors];
+		public static RenderTarget2D[, ] treeTopAltTexture = new RenderTarget2D[Main.numTreeStyles, Main.numTileColors];
+		public static RenderTarget2D[, ] treeBranchAltTexture = new RenderTarget2D[Main.numTreeStyles, Main.numTileColors];
+		public static bool[, ] treeAltTextureInit = new bool[Main.numTreeStyles, Main.numTileColors];
+		public static bool[, ] treeAltTextureDrawn = new bool[Main.numTreeStyles, Main.numTileColors];
+		public static bool[, ] checkTreeAlt = new bool[Main.numTreeStyles, Main.numTileColors];
+		public static RenderTarget2D[, ] wallAltTexture = new RenderTarget2D[231, Main.numTileColors];
+		public static bool[, ] wallAltTextureInit = new bool[231, Main.numTileColors];
+		public static bool[, ] wallAltTextureDrawn = new bool[231, Main.numTileColors];
 		public static Texture2D[] tileTexture = new Texture2D[467];
 		public static Texture2D blackTileTexture;
 		public static Texture2D[] wallTexture = new Texture2D[231];
@@ -920,7 +_,7 @@
 		public static Texture2D[] treeTopTexture = new Texture2D[Main.numTreeStyles];
 		public static Texture2D[] treeBranchTexture = new Texture2D[Main.numTreeStyles];
 		public static Texture2D[] woodTexture = new Texture2D[7];
-		public static RenderTarget2D[,] woodAltTexture = new RenderTarget2D[Main.woodTexture.Length, Main.numTileColors];
+		public static RenderTarget2D[, ] woodAltTexture = new RenderTarget2D[Main.woodTexture.Length, Main.numTileColors];
 		public static Texture2D shroomCapTexture;
 		public static Texture2D inventoryBackTexture;
 		public static Texture2D inventoryBack2Texture;
@@ -976,7 +_,7 @@
 		public static Texture2D pumpkingFaceTexture;
 		public static Texture2D dukeFishronTexture;
 		public static Texture2D miniMinotaurTexture;
-		public static Texture2D[,] playerTextures;
+		public static Texture2D[, ] playerTextures;
 		public static bool UseExperimentalFeatures = false;
 		public static string DefaultSeed = "";
 		public static Texture2D[] playerHairTexture = new Texture2D[134];
@@ -1052,7 +_,7 @@
 		public static AudioEngine engine;
 		public static SoundBank soundBank;
 		public static WaveBank waveBank;
-		public static Cue[] music = new Cue[42];
+		public static MusicWrapper[] music = new MusicWrapper[42];
 		public static float[] musicFade = new float[42];
 		public static float musicVolume = 0.75f;
 		public static float ambientVolume = 0.75f;
@@ -1119,11 +_,11 @@
 		public static int[] redBirdCageFrameCounter = new int[Main.cageFrames];
 		public static int[] blueBirdCageFrame = new int[Main.cageFrames];
 		public static int[] blueBirdCageFrameCounter = new int[Main.cageFrames];
-		public static byte[,] butterflyCageMode = new byte[9, Main.cageFrames];
-		public static int[,] butterflyCageFrame = new int[9, Main.cageFrames];
-		public static int[,] butterflyCageFrameCounter = new int[9, Main.cageFrames];
-		public static int[,] scorpionCageFrame = new int[2, Main.cageFrames];
-		public static int[,] scorpionCageFrameCounter = new int[2, Main.cageFrames];
+		public static byte[, ] butterflyCageMode = new byte[9, Main.cageFrames];
+		public static int[, ] butterflyCageFrame = new int[9, Main.cageFrames];
+		public static int[, ] butterflyCageFrameCounter = new int[9, Main.cageFrames];
+		public static int[, ] scorpionCageFrame = new int[2, Main.cageFrames];
+		public static int[, ] scorpionCageFrameCounter = new int[2, Main.cageFrames];
 		public static int[] snailCageFrame = new int[Main.cageFrames];
 		public static int[] snailCageFrameCounter = new int[Main.cageFrames];
 		public static int[] snail2CageFrame = new int[Main.cageFrames];
@@ -1135,15 +_,15 @@
 		public static int[] frogCageFrameCounter = new int[Main.cageFrames];
 		public static int[] mouseCageFrame = new int[Main.cageFrames];
 		public static int[] mouseCageFrameCounter = new int[Main.cageFrames];
-		public static byte[,] jellyfishCageMode = new byte[3, Main.cageFrames];
-		public static int[,] jellyfishCageFrame = new int[3, Main.cageFrames];
-		public static int[,] jellyfishCageFrameCounter = new int[3, Main.cageFrames];
+		public static byte[, ] jellyfishCageMode = new byte[3, Main.cageFrames];
+		public static int[, ] jellyfishCageFrame = new int[3, Main.cageFrames];
+		public static int[, ] jellyfishCageFrameCounter = new int[3, Main.cageFrames];
 		public static int[] wormCageFrame = new int[Main.cageFrames];
 		public static int[] wormCageFrameCounter = new int[Main.cageFrames];
 		public static int[] penguinCageFrame = new int[Main.cageFrames];
 		public static int[] penguinCageFrameCounter = new int[Main.cageFrames];
-		public static int[,] slugCageFrame = new int[3, Main.cageFrames];
-		public static int[,] slugCageFrameCounter = new int[3, Main.cageFrames];
+		public static int[, ] slugCageFrame = new int[3, Main.cageFrames];
+		public static int[, ] slugCageFrameCounter = new int[3, Main.cageFrames];
 		public static int[] grasshopperCageFrame = new int[Main.cageFrames];
 		public static int[] grasshopperCageFrameCounter = new int[Main.cageFrames];
 		public static bool[] tileSand = new bool[467];
@@ -1157,7 +_,7 @@
 		public static int[] backgroundHeight = new int[207];
 		public static bool tilesLoaded = false;
 		public static WorldMap Map = new WorldMap(Main.maxTilesX, Main.maxTilesY);
-		public static Tile[,] tile = new Tile[Main.maxTilesX, Main.maxTilesY];
+		public static Tile[, ] tile = new Tile[Main.maxTilesX, Main.maxTilesY];
 		public static Dust[] dust = new Dust[6001];
 		public static Star[] star = new Star[130];
 		public static Item[] item = new Item[401];
@@ -1166,7 +_,7 @@
 		public static Gore[] gore = new Gore[501];
 		public static Rain[] rain = new Rain[Main.maxRain + 1];
 		public static Projectile[] projectile = new Projectile[1001];
-		public static int[,] projectileIdentity = new int[256, 1001];
+		public static int[, ] projectileIdentity = new int[256, 1001];
 		public static CombatText[] combatText = new CombatText[100];
 		public static ItemText[] itemText = new ItemText[20];
 		public static Chest[] chest = new Chest[1000];
@@ -1311,9 +_,9 @@
 		public static List<WorldFileData> WorldList = new List<WorldFileData>();
 		public static WorldFileData ActiveWorldFileData = new WorldFileData();
 		public static string WorldPath = Main.SavePath + Path.DirectorySeparatorChar + "Worlds";
-		public static string CloudWorldPath = "worlds";
+		public static string CloudWorldPath = "ModLoader/worlds";
 		public static string PlayerPath = Main.SavePath + Path.DirectorySeparatorChar + "Players";
-		public static string CloudPlayerPath = "players";
+		public static string CloudPlayerPath = "ModLoader/players";
 		public static Preferences Configuration = new Preferences(Main.SavePath + Path.DirectorySeparatorChar + "config.json", false, false);
 		public static Preferences InputProfiles = new Preferences(Main.SavePath + Path.DirectorySeparatorChar + "input profiles.json", false, false);
 		public static string[] itemName = new string[3884];
@@ -2036,16 +_,16 @@
 		private int selectedMenu2 = -1;
 		public static int selectedPlayer = 0;
 		public static int selectedWorld = 0;
-		public static int menuMode = 0;
+		public static int menuMode = Interface.loadModsID;
 		public static int menuSkip = 0;
 		private static bool _needsLanguageSelect = true;
 		private static Item cpItem = new Item();
 		public int textBlinkerCount;
 		public int textBlinkerState;
 		public static string newWorldName = "";
-		private static int[] specX = new int[1000];
-		private static int[] specY = new int[1000];
+		public static int[] specX = new int[1000];
+		public static int[] specY = new int[1000];
 		private bool _imeToggle;
 		public static bool HoveringOverAnNPC = false;
 		public static string hoverItemName = "";
 		public static Microsoft.Xna.Framework.Color inventoryBack = new Microsoft.Xna.Framework.Color(220, 220, 220, 220);
@@ -2052,7 +_,7 @@
 		private static int UI_ScreenAnchorX = Main.screenWidth - 800;
 		private static int UIDisplay_ManaPerStar = 20;
 		private static float UIDisplay_LifePerHeart = 20f;
-		private static int rare = 0;
+		public static int rare = 0;
 		public static int hairStart = 0;
 		private static int oldHairStyle;
 		private static Microsoft.Xna.Framework.Color oldHairColor;
@@ -2064,7 +_,7 @@
 		public static Player dresserDummy;
 		private bool _needToSetupDrawInterfaceLayers = true;
 		private List<GameInterfaceLayer> _gameInterfaceLayers;
-		private static GameTime _drawInterfaceGameTime;
+		public static GameTime _drawInterfaceGameTime;
 		private static bool _MouseOversCanClear = false;
 		private static Vector2 _itemIconCacheScreenPosition;
 		private static int _itemIconCacheSelectedItemID;
@@ -2102,12 +_,12 @@
 		};
 		private static float tranSpeed = 0.05f;
 		private static float atmo = 0f;
-		private static float bgScale = 1f;
-		private static int bgW = (int)(1024f * Main.bgScale);
-		private static Microsoft.Xna.Framework.Color backColor = Microsoft.Xna.Framework.Color.White;
-		private static Microsoft.Xna.Framework.Color trueBackColor = Main.backColor;
-		private float screenOff;
-		private float scAdj;
+		internal static float bgScale = 1f;
+		internal static int bgW = (int)(1024f * Main.bgScale);
+		internal static Microsoft.Xna.Framework.Color backColor = Microsoft.Xna.Framework.Color.White;
+		internal static Microsoft.Xna.Framework.Color trueBackColor = Main.backColor;
+		internal float screenOff;
+		internal float scAdj;
 		private float cTop;
 		private static SlotVector<ActiveSound> _trackedSounds = new SlotVector<ActiveSound>(4096);
 
@@ -2267,6 +_,8 @@
 				return !Main.instance.GraphicsDevice.IsDisposed && Main.instance.GraphicsDevice.GraphicsDeviceStatus == GraphicsDeviceStatus.Normal;
 			}
 		}
+
+		public static ulong TileFrameSeed => Main._tileFrameSeed;
 
 		public static void FindAnnouncementBoxStatus()
 		{
@@ -2385,63 +_,80 @@
 				flag2 = false;
 				Main.anglerQuest = Main.rand.Next(Main.anglerQuestItemNetIDs.Length);
 				int num = Main.anglerQuestItemNetIDs[Main.anglerQuest];
+				//patch file: num, flag2
 				if (num == 2454 && (!Main.hardMode || WorldGen.crimson))
 				{
 					flag2 = true;
 				}
+
 				if (num == 2457 && WorldGen.crimson)
 				{
 					flag2 = true;
 				}
+
 				if (num == 2462 && !Main.hardMode)
 				{
 					flag2 = true;
 				}
+
 				if (num == 2463 && (!Main.hardMode || !WorldGen.crimson))
 				{
 					flag2 = true;
 				}
+
 				if (num == 2465 && !Main.hardMode)
 				{
 					flag2 = true;
 				}
+
 				if (num == 2468 && !Main.hardMode)
 				{
 					flag2 = true;
 				}
+
 				if (num == 2471 && !Main.hardMode)
 				{
 					flag2 = true;
 				}
+
 				if (num == 2473 && !Main.hardMode)
 				{
 					flag2 = true;
 				}
+
 				if (num == 2477 && !WorldGen.crimson)
 				{
 					flag2 = true;
 				}
+
 				if (num == 2480 && !Main.hardMode)
 				{
 					flag2 = true;
 				}
+
 				if (num == 2483 && !Main.hardMode)
 				{
 					flag2 = true;
 				}
+
 				if (num == 2484 && !Main.hardMode)
 				{
 					flag2 = true;
 				}
+
 				if (num == 2485 && WorldGen.crimson)
 				{
 					flag2 = true;
 				}
+
 				if ((num == 2476 || num == 2453 || num == 2473) && !flag)
 				{
 					flag2 = true;
 				}
-			}
+
+				ItemLoader.IsAnglerQuestAvailable(num, ref flag2);
+			}
+
 			NetMessage.SendAnglerQuest(-1);
 		}
 
@@ -2625,42 +_,50 @@
 			Main.Configuration.Put("WaveQuality", Main.WaveQuality);
 			Main.Configuration.Put("Support4K", Main.Support4K);
 			Main.Configuration.Put("MouseColor", new Dictionary<string, byte>
-				{
-					{
+			{
+				{
+
 						"R",
 						Main.mouseColor.R
-					},
-					{
+				},
+				{
+
 						"G",
 						Main.mouseColor.G
-					},
-					{
+				},
+				{
+
 						"B",
 						Main.mouseColor.B
-					}
-				});
+				}
+			});
 			Main.Configuration.Put("MouseBorderColor", new Dictionary<string, byte>
-				{
-					{
+			{
+				{
+
 						"R",
 						Main.MouseBorderColor.R
-					},
-					{
+				},
+				{
+
 						"G",
 						Main.MouseBorderColor.G
-					},
-					{
+				},
+				{
+
 						"B",
 						Main.MouseBorderColor.B
-					},
-					{
+				},
+				{
+
 						"A",
 						Main.MouseBorderColor.A
-					}
-				});
+				}
+			});
 			Main.Configuration.Put("QuickLaunch", Main.SkipAssemblyLoad);
 			Main.Configuration.Put("Zoom", Main.GameZoomTarget);
 			Main.Configuration.Put("UIScale", Main._uiScaleWanted);
+			ModLoader.ModLoader.SaveConfiguration();
 			bool flag = Main.Configuration.Save(true);
 			return flag && PlayerInput.Save();
 		}
@@ -2811,17 +_,20 @@
 			{
 				num = 0;
 			}
+
 			if (num > 2)
 			{
 				num = 2;
 			}
+
 			LockOnHelper.UseMode = (LockOnHelper.LockOnMode)num;
 			if (LockOnHelper.UseMode == LockOnHelper.LockOnMode.FocusTarget)
 			{
 				LockOnHelper.UseMode = LockOnHelper.LockOnMode.ThreeDS;
 			}
+
 			Main.Configuration.Get<bool>("InvisibleCursorForGamepad", ref Main.InvisibleCursorForGamepad);
-#if CLIENT && WINDOWS
+			#if CLIENT && WINDOWS
 			Form form = (Form)Control.FromHandle(Main.instance.Window.Handle);
 			if (Main.screenBorderless)
 			{
@@ -2837,7 +_,8 @@
 			{
 				form.FormBorderStyle = FormBorderStyle.Sizable;
 			}
-#endif
+
+			#endif
 			Main.SetDisplayMode(preferredBackBufferWidth, preferredBackBufferHeight, fullscreen);
 			Main.Configuration.Get<bool>("SettingsUnlock_WorldEvil", ref Main.SettingsUnlock_WorldEvil);
 			Main.Configuration.Get<bool>("SettingsEnabled_MinersWobble", ref Main.SettingsEnabled_MinersWobble);
@@ -2968,6 +_,8 @@
 					Main.cMapAlphaDown
 				};
 			}
+
+			ModLoader.ModLoader.LoadConfiguration();
 			PlayerInput.Load();
 			if (num2 < 165)
 			{
@@ -3022,60 +_,72 @@
 								{
 									Main.cInv = binaryReader.ReadString();
 								}
+
 								if (num >= 12)
 								{
 									Main.cHeal = binaryReader.ReadString();
 									Main.cMana = binaryReader.ReadString();
 									Main.cBuff = binaryReader.ReadString();
 								}
+
 								if (num >= 13)
 								{
 									Main.cHook = binaryReader.ReadString();
 								}
+
 								Main.caveParallax = binaryReader.ReadSingle();
 								if (num >= 2)
 								{
 									Main.terrariasFixedTiming = binaryReader.ReadBoolean();
 								}
+
 								if (num >= 91 && binaryReader.ReadBoolean())
 								{
-#if CLIENT && WINDOWS
+									#if CLIENT && WINDOWS
 									Form form = (Form)Control.FromHandle(base.Window.Handle);
 									form.WindowState = FormWindowState.Maximized;
-#endif
-								}
+									#endif
+								}
+
 								if (num >= 4)
 								{
 									int width = binaryReader.ReadInt32();
 									int height = binaryReader.ReadInt32();
 									Main.SetDisplayMode(width, height, flag);
 								}
+
 								if (num >= 8)
 								{
 									Main.autoSave = binaryReader.ReadBoolean();
 								}
+
 								if (num >= 9)
 								{
 									Main.autoPause = binaryReader.ReadBoolean();
 								}
+
 								if (num >= 19)
 								{
 									Main.showItemText = binaryReader.ReadBoolean();
 								}
+
 								if (num >= 30)
 								{
 									Main.cTorch = binaryReader.ReadString();
 									Lighting.lightMode = (int)binaryReader.ReadByte();
 									Main.qaStyle = (int)binaryReader.ReadByte();
 								}
+
 								if (num >= 37)
 								{
 									Main.BackgroundEnabled = binaryReader.ReadBoolean();
 								}
+
 								if (num >= 39)
 								{
 									Lang.lang = (int)binaryReader.ReadByte();
 								}
+
 								if (num >= 46)
 								{
 									Main.mapEnabled = binaryReader.ReadBoolean();
@@ -3130,9 +_,13 @@
 				FileUtilities.Delete(Main.PlayerList[i].Path, Main.PlayerList[i].IsCloudSave);
 				FileUtilities.Delete(Main.PlayerList[i].Path + ".bak", Main.PlayerList[i].IsCloudSave);
 			}
+
+			//patch file
 			catch
 			{
 			}
+
+			PlayerIO.ErasePlayer(Main.PlayerList[i].Path, Main.PlayerList[i].IsCloudSave);
 			try
 			{
 				string path = Main.PlayerList[i].Path.Substring(0, Main.PlayerList[i].Path.Length - 4);
@@ -3153,18 +_,20 @@
 			{
 				if (!Main.WorldList[i].IsCloudSave)
 				{
-#if WINDOWS
+					#if WINDOWS
 					FileOperationAPIWrapper.MoveToRecycleBin(Main.WorldList[i].Path);
 					FileOperationAPIWrapper.MoveToRecycleBin(Main.WorldList[i].Path + ".bak");
-#else
+					#else
 					File.Delete(Main.WorldList[i].Path);
 					File.Delete(Main.WorldList[i].Path + ".bak");
-#endif
+					#endif
 				}
 				else if (SocialAPI.Cloud != null)
 				{
 					SocialAPI.Cloud.Delete(Main.WorldList[i].Path);
 				}
+
+				WorldIO.EraseWorld(Main.WorldList[i].Path, Main.WorldList[i].IsCloudSave);
 				Main.LoadWorlds();
 			}
 			catch
@@ -3191,50 +_,55 @@
 				{
 					str = "-";
 				}
+
 				text += str;
 			}
+
 			string text3 = cloudSave ? Main.CloudPlayerPath : Main.PlayerPath;
 			string path = string.Concat(new object[]
-				{
-					text3,
+			{
+				text3,
 					Path.DirectorySeparatorChar,
 					text,
 					".plr"
-				});
+			});
 			string fullPath = FileUtilities.GetFullPath(path, cloudSave);
 			if (fullPath.StartsWith("\\\\.\\", StringComparison.Ordinal))
 			{
 				text += "_";
 			}
+
 			if (FileUtilities.Exists(string.Concat(new object[]
-					{
-						text3,
+			{
+				text3,
 						Path.DirectorySeparatorChar,
 						text,
 						".plr"
-					}), cloudSave))
+			}), cloudSave))
 			{
 				int num = 2;
 				while (FileUtilities.Exists(string.Concat(new object[]
-						{
-							text3,
+				{
+					text3,
 							Path.DirectorySeparatorChar,
 							text,
 							num,
 							".plr"
-						}), cloudSave))
+				}), cloudSave))
 				{
 					num++;
 				}
+
 				text += num;
 			}
+
 			return string.Concat(new object[]
-				{
-					text3,
+			{
+				text3,
 					Path.DirectorySeparatorChar,
 					text,
 					".plr"
-				});
+			});
 		}
 
 		public static string GetWorldPathFromName(string worldName, bool cloudSave)
@@ -3256,50 +_,55 @@
 				{
 					str = "-";
 				}
+
 				text += str;
 			}
+
 			string text3 = cloudSave ? Main.CloudWorldPath : Main.WorldPath;
 			string path = string.Concat(new object[]
-				{
-					text3,
+			{
+				text3,
 					Path.DirectorySeparatorChar,
 					text,
 					".wld"
-				});
+			});
 			string fullPath = FileUtilities.GetFullPath(path, cloudSave);
 			if (fullPath.StartsWith("\\\\.\\", StringComparison.Ordinal))
 			{
 				text += "_";
 			}
+
 			if (FileUtilities.Exists(string.Concat(new object[]
-					{
-						text3,
+			{
+				text3,
 						Path.DirectorySeparatorChar,
 						text,
 						".wld"
-					}), cloudSave))
+			}), cloudSave))
 			{
 				int num = 2;
 				while (FileUtilities.Exists(string.Concat(new object[]
-						{
-							text3,
+				{
+					text3,
 							Path.DirectorySeparatorChar,
 							text,
 							num,
 							".wld"
-						}), cloudSave))
+				}), cloudSave))
 				{
 					num++;
 				}
+
 				text += num;
 			}
+
 			return string.Concat(new object[]
-				{
-					text3,
+			{
+				text3,
 					Path.DirectorySeparatorChar,
 					text,
 					".wld"
-				});
+			});
 		}
 
 		public void autoCreate(string worldSize)
@@ -3415,36 +_,48 @@
 								{
 								}
 							}
+
 							if (text.Length > 9 && text.Substring(0, 9).ToLower() == "password=")
 							{
 								string serverPassword = text.Substring(9);
 								Netplay.ServerPassword = serverPassword;
 							}
+
 							if (text.Length > 5 && text.Substring(0, 5).ToLower() == "motd=")
 							{
 								string text2 = text.Substring(5);
 								Main.motd = text2;
 							}
+
 							if (text.Length > 5 && text.Substring(0, 5).ToLower() == "lang=")
 							{
 								string value4 = text.Substring(5);
 								Lang.lang = Convert.ToInt32(value4);
 							}
+
 							if (text.Length >= 10 && text.Substring(0, 10).ToLower() == "worldpath=")
 							{
 								string worldPath = text.Substring(10);
 								Main.WorldPath = worldPath;
 							}
+
 							if (text.Length >= 10 && text.Substring(0, 10).ToLower() == "worldname=")
 							{
 								string text3 = text.Substring(10);
 								Main.worldName = text3;
 							}
+
+							if (text.Length >= 8 && text.Substring(0, 8).ToLower() == "modpath=")
+							{
+								ModLoader.ModLoader.modPath = text.Substring(8);
+							}
+
 							if (text.Length > 8 && text.Substring(0, 8).ToLower() == "banlist=")
 							{
 								string banFilePath = text.Substring(8);
 								Netplay.BanFilePath = banFilePath;
 							}
+
 							if (text.Length > 11 && text.Substring(0, 11).ToLower() == "difficulty=")
 							{
 								string a = text.Substring(11);
@@ -3579,18 +_,20 @@
 			{
 				string text = "terraria" + Main.rand.Next(2147483647);
 				Console.Title = text;
-#if WINDOWS
+				#if WINDOWS
 				IntPtr intPtr = Main.FindWindow(null, text);
 				if (intPtr != IntPtr.Zero)
 				{
 					Main.ShowWindow(intPtr, 0);
 				}
-#endif
+
+				#endif
 			}
 			else
 			{
-				Console.Title = "Terraria Server " + Main.versionNumber2;
-			}
+				Console.Title = "Terraria Server " + Main.versionNumber2 + " - " + ModLoader.ModLoader.versionedName;
+			}
+
 			Main.dedServ = true;
 			Main.showSplash = false;
 			this.Initialize();
@@ -3598,25 +_,28 @@
 			{
 				Lang.setLang(true);
 			}
+
 			Lang.setLang(false);
+			ModLoader.ModLoader.do_Load(null);
 			while (Main.worldPathName == null || Main.worldPathName == "")
 			{
 				bool flag = true;
 				while (flag)
 				{
 					Main.LoadWorlds();
-					Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2));
+					Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2) + " - " + ModLoader.ModLoader.versionedName);
 					Console.WriteLine("");
 					for (int i = 0; i < Main.WorldList.Count; i++)
 					{
 						Console.WriteLine(string.Concat(new object[]
-								{
-									i + 1,
+						{
+							i + 1,
 									'\t',
 									'\t',
 									Main.WorldList[i].Name
-								}));
-					}
+						}));
+					}
+
 					string text2 = Language.GetTextValue("CLI.NewWorld_Command");
 					string text3 = Language.GetTextValue("CLI.DeleteWorld_Example");
 					int num = (Math.Max(Main.newWorldName.Length, text3.Length) + 1) / 8;
@@ -3624,6 +_,8 @@
 					text3 = text3 + new string('\t', num - text3.Length / 8) + Language.GetTextValue("CLI.DeleteWorld_Description");
 					Console.WriteLine(text2);
 					Console.WriteLine(text3);
+					Console.WriteLine("m\t\tMods Menu");
+					Console.WriteLine("b\t\tMod Browser");
 					Console.WriteLine("");
 					Console.Write(Language.GetTextValue("CLI.ChooseWorld"));
 					string text4 = Console.ReadLine();
@@ -3885,12 +_,24 @@
 							Console.WriteLine(Main.statusText);
 							goto IL_783;
 						}
+
 						goto IL_783;
 					}
+					else if (text4 == "m" || text4 == "M")
+					{
+						Interface.ServerModMenu();
+						continue;
+					}
+					else if (text4 == "b" || text4 == "b")
+					{
+						Interface.ServerModBrowserMenu();
+						continue;
+					}
 					else
 					{
 						try
 						{
+							//patch file
 							int num6 = Convert.ToInt32(text4);
 							num6--;
 							if (num6 >= 0 && num6 < Main.WorldList.Count)
@@ -4017,6 +_,7 @@
 			catch
 			{
 			}
+			Main.myPlayer = 255;
 			WorldGen.serverLoadWorld();
 			Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber));
 			Console.WriteLine("");
@@ -4026,12 +_,17 @@
 				{
 					Main.statusText = string.Format("{0:0.0%} - " + Main.AutogenProgress.Message + " - {1:0.0%}", Main.AutogenProgress.TotalProgress, Main.AutogenProgress.Value);
 				}
+
 				if (Main.oldStatusText != Main.statusText)
 				{
 					Main.oldStatusText = Main.statusText;
 					Console.WriteLine(Main.statusText);
 				}
 			}
+
+			//run one tick to JIT all the game content now rather than when a player connects
+			Console.WriteLine("Running one update...");
+			Update(new GameTime());
 			try
 			{
 				Console.Clear();
@@ -4050,50 +_,43 @@
 			{
 				Main.startDedInput();
 			}
+
 			stopwatch.Start();
-			double num9 = 16.666666666666668;
-			double num10 = 0.0;
-			int num11 = 0;
-			Stopwatch stopwatch2 = new Stopwatch();
-			stopwatch2.Start();
+			double delta = 1000 / 60D;
+			double target = delta;
 			while (!Netplay.disconnect)
 			{
-				double totalMilliseconds = stopwatch.Elapsed.TotalMilliseconds;
-				if (totalMilliseconds + num10 >= num9)
-				{
-					num11++;
-					num10 += totalMilliseconds - num9;
-					stopwatch.Reset();
-					stopwatch.Start();
+				{
 					if (Main.oldStatusText != Main.statusText)
 					{
 						Main.oldStatusText = Main.statusText;
 						Console.WriteLine(Main.statusText);
 					}
+
 					if (Netplay.anyClients)
 					{
 						this.Update(new GameTime());
 					}
+					else
+					{
+						Netplay.OnUpdate();
+					}
+
 					if (Main.OnTick != null)
 					{
 						Main.OnTick();
 					}
-					double num12 = stopwatch.Elapsed.TotalMilliseconds + num10;
-					if (num12 < num9)
-					{
-						int num13 = (int)(num9 - num12) - 1;
-						if (num13 > 1)
-						{
-							Thread.Sleep(num13 - 1);
-							if (!Netplay.anyClients)
-							{
-								num10 = 0.0;
-								Thread.Sleep(10);
-							}
-						}
-					}
-				}
-				Thread.Sleep(0);
+
+					double now = stopwatch.ElapsedMilliseconds;
+					double remaining = target - now;
+					target += delta; //new target
+					if (target < now) //can't catch up, reset target
+					{
+						target = now + delta;
+					}
+
+					Thread.Sleep(Math.Max((int)remaining, 0));
+				}
 			}
 		}
 
@@ -4171,13 +_,23 @@
 								num = text3.Length;
 							}
 						}
+
+						var modHelpList = CommandManager.GetHelp(CommandType.Console);
+						foreach (var entry in modHelpList)
+							if (entry.Item1.Length > num)
+								num = entry.Item1.Length;
+
 						int num2 = (num + 1) / 8;
 						for (int j = 0; j < list.Count; j++)
 						{
 							string text4 = Language.Exists("CLI." + list[j] + "_Example") ? Language.GetTextValue("CLI." + list[j] + "_Example") : Language.GetTextValue("CLI." + list[j] + "_Command");
 							Console.WriteLine(text4 + new string('\t', num2 - text4.Length / 8) + Language.GetTextValue("CLI." + list[j] + "_Description"));
 						}
-					}
+
+						foreach (var entry in modHelpList)
+							Console.WriteLine(entry.Item1 + new string('\t', num2 - entry.Item1.Length / 8) + entry.Item2);
+					}
+					else if (CommandManager.HandleCommand(text, new ConsoleCommandCaller())) {}
 					else if (text == Language.GetTextValue("CLI.Settle_Command"))
 					{
 						if (!Liquid.panicMode)
@@ -4268,22 +_,25 @@
 						{
 							text6 = "0" + text6;
 						}
+
 						if (num5 > 12)
 						{
 							num5 -= 12;
 						}
+
 						if (num5 == 0)
 						{
 							num5 = 12;
 						}
+
 						Console.WriteLine(Language.GetTextValue("CLI.Time", string.Concat(new object[]
-									{
-										num5,
+						{
+							num5,
 										":",
 										text6,
 										" ",
 										text5
-									})));
+						})));
 					}
 					else if (text == Language.GetTextValue("CLI.MaxPlayers_Command"))
 					{
@@ -4295,7 +_,7 @@
 					}
 					else if (text == Language.GetTextValue("CLI.Version_Command"))
 					{
-						Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber));
+						Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber) + " - " + ModLoader.ModLoader.versionedName);
 					}
 					else
 					{
@@ -4320,14 +_,15 @@
 								{
 									num7++;
 									Console.WriteLine(string.Concat(new object[]
-											{
-												Main.player[k].name,
+									{
+										Main.player[k].name,
 												" (",
 												Netplay.Clients[k].Socket.GetRemoteAddress(),
 												")"
-											}));
-								}
-							}
+									}));
+								}
+							}
+
 							if (num7 == 0)
 							{
 								Console.WriteLine(Language.GetTextValue("CLI.NoPlayers"));
@@ -4498,30 +_,31 @@
 				Main.dayRate = 60;
 				return;
 			}
+
 			Main.dayRate = 1;
 		}
 
 		public Main()
 		{
 			Main.instance = this;
-#if CLIENT
+			#if CLIENT
 			Main.graphics = new GraphicsDeviceManager((Game)this);
 			base.Content.RootDirectory = "Content";
-#endif
+			#endif
 		}
 
 		protected void SetTitle()
 		{
-#if CLIENT
+			#if CLIENT
 			Main._cachedTitle = Lang.title();
 			base.Window.Title = Main._cachedTitle;
-#endif
+			#endif
 		}
 
 		public static void InitLifeBytes()
 		{
 			NPC nPC = new NPC();
-			for (int i = -65; i < 580; i++)
+			for (int i = -65; i < NPCLoader.NPCCount; i++)
 			{
 				if (i != 0)
 				{
@@ -4572,9 +_,9 @@
 
 		protected override void Initialize()
 		{
-#if SERVER
+			#if SERVER
 			Main.netMode = 2;
-#endif
+			#endif
 			Main.LocalFavoriteData.Load();
 			Main.CloudFavoritesData.Load();
 			Main.FindAnnouncementBoxStatus();
@@ -4589,14 +_,14 @@
 			TileEntity.InitializeAll();
 			Projectile.InitializeStaticThings();
 			Main.InitializeItemAnimations();
-#if CLIENT
+			#if CLIENT
 			Lighting.Initialize(false);
 			MapHelper.Initialize();
 			TimeLogger.Initialize();
-#else
+			#else
 			Mount.Initialize();
 			Minecart.Initialize();
-#endif
+			#endif
 			WorldGen.RandomizeBackgrounds();
 			WorldGen.RandomizeCaveBackgrounds();
 			WorldGen.RandomizeMoonState();
@@ -6916,10 +_,11 @@
 									goto IL_60FE;
 								default:
 									if (type == 788)
-									{
-										goto IL_60FE;
-									}
-									break;
+								{
+									goto IL_60FE;
+								}
+
+								break;
 							}
 						}
 					}
@@ -6977,10 +_,11 @@
 								goto IL_60FE;
 							default:
 								if (type == 3245)
-								{
-									goto IL_610E;
-								}
-								break;
+							{
+								goto IL_610E;
+							}
+
+							break;
 						}
 					}
 				}
@@ -7077,21 +_,24 @@
 				Main.ActivePlayerFileData.StartPlayTimer();
 				Player.Hooks.EnterWorld(Main.myPlayer);
 			}
-#if CLIENT && WINDOWS
+
+			#if CLIENT && WINDOWS
 			else
 			{
 				IntPtr systemMenu = Main.GetSystemMenu(base.Window.Handle, false);
 				int menuItemCount = Main.GetMenuItemCount(systemMenu);
 				Main.RemoveMenu(systemMenu, menuItemCount - 1, 1024);
 			}
-#endif
+
+			#endif
 			if (Main.dedServ)
 			{
 				return;
 			}
+
 			MessageBuffer.OnTileChangeReceived += new TileChangeReceivedEvent(this.OnTileChangeEvent);
 			Main.clientUUID = Guid.NewGuid().ToString();
-#if CLIENT
+			#if CLIENT
 			FilterManager arg_6400_0 = Filters.Scene;
 			keyBoardInput.newKeyEvent += delegate(char keyStroke)
 			{
@@ -7102,7 +_,7 @@
 					Main.keyCount++;
 				}
 			};
-#endif
+			#endif
 			base.Initialize();
 			base.Window.AllowUserResizing = true;
 			this.OpenSettings();
@@ -7123,15 +_,17 @@
 			{
 				Lang.setLang(true);
 			}
+
 			Lang.setLang(false);
 			if (Lang.lang == 0)
 			{
 				Main.menuMode = 1212;
 			}
+
 			this.OpenRecent();
 			Star.SpawnStars();
 			WorldGen.RandomizeWeather();
-#if CLIENT
+			#if CLIENT
 			this._achievements = new AchievementManager();
 			AchievementInitializer.Load();
 			DyeInitializer.Load();
@@ -7140,7 +_,7 @@
 			AchievementCompleteUI.Initialize();
 			UILinksInitializer.Load();
 			ItemSorting.SetupWhiteLists();
-#endif
+			#endif
 			foreach (DisplayMode current in GraphicsAdapter.DefaultAdapter.SupportedDisplayModes)
 			{
 				if (current.Width >= Main.minScreenW && current.Height >= Main.minScreenH && current.Width <= Main.maxScreenW && current.Height <= Main.maxScreenH)
@@ -7199,7 +_,13 @@
 			{
 				TexturePackSupport.Enabled = true;
 			}
-			TexturePackSupport.FindTexturePack();
+
+			TexturePackSupport.FindTexturePacks();
+			for (int i = 1; i < 42; i++)
+			{
+				Main.music[i] = new MusicWrapper();
+			}
+
 			TextureManager.Initialize();
 			this.mapSectionTexture = new RenderTarget2D(base.GraphicsDevice, 200, 150);
 			Main.ShaderContentManager = new ContentManager(base.Content.ServiceProvider, base.Content.RootDirectory);
@@ -7242,139 +_,161 @@
 			for (int i = 0; i < Main.PVPTexture.Length; i++)
 			{
 				Main.PVPTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"UI",
 							Path.DirectorySeparatorChar,
 							"PVP_",
 							i
-						}));
-			}
+				}));
+			}
+
 			for (int j = 0; j < Main.EquipPageTexture.Length; j++)
 			{
 				Main.EquipPageTexture[j] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"UI",
 							Path.DirectorySeparatorChar,
 							"DisplaySlots_",
 							j
-						}));
-			}
+				}));
+			}
+
 			for (int k = 0; k < Main.craftToggleTexture.Length; k++)
 			{
 				Main.craftToggleTexture[k] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"UI",
 							Path.DirectorySeparatorChar,
 							"Craft_Toggle_",
 							k
-						}));
-			}
+				}));
+			}
+
 			for (int l = 0; l < Main.inventorySortTexture.Length; l++)
 			{
 				Main.inventorySortTexture[l] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"UI",
 							Path.DirectorySeparatorChar,
 							"Sort_",
 							l
-						}));
-			}
+				}));
+			}
+
 			for (int m = 0; m < Main.textGlyphTexture.Length; m++)
 			{
 				Main.textGlyphTexture[m] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"UI",
 							Path.DirectorySeparatorChar,
 							"Glyphs_",
 							m
-						}));
-			}
+				}));
+			}
+
 			for (int n = 0; n < Main.hotbarRadialTexture.Length; n++)
 			{
 				Main.hotbarRadialTexture[n] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"UI",
 							Path.DirectorySeparatorChar,
 							"HotbarRadial_",
 							n
-						}));
-			}
+				}));
+			}
+
 			for (int num = 0; num < this.infoIconTexture.Length; num++)
 			{
 				this.infoIconTexture[num] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"UI",
 							Path.DirectorySeparatorChar,
 							"InfoIcon_",
 							num
-						}));
-			}
+				}));
+			}
+
 			for (int num2 = 0; num2 < Main.reforgeTexture.Length; num2++)
 			{
 				Main.reforgeTexture[num2] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"UI",
 							Path.DirectorySeparatorChar,
 							"Reforge_",
 							num2
-						}));
-			}
+				}));
+			}
+
 			for (int num3 = 0; num3 < Main.cameraTexture.Length; num3++)
 			{
 				Main.cameraTexture[num3] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"UI",
 							Path.DirectorySeparatorChar,
 							"Camera_",
 							num3
-						}));
-			}
+				}));
+			}
+
 			for (int num4 = 0; num4 < Main.wireUITexture.Length; num4++)
 			{
 				Main.wireUITexture[num4] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"UI",
 							Path.DirectorySeparatorChar,
 							"Wires_",
 							num4
-						}));
-			}
+				}));
+			}
+
 			Main.builderAccTexture = this.OurLoad<Texture2D>(string.Concat(new object[]
-					{
+			{
+
 						"Images",
 						Path.DirectorySeparatorChar,
 						"UI",
 						Path.DirectorySeparatorChar,
 						"BuilderIcons"
-					}));
+			}));
 			Main.quicksIconTexture = this.OurLoad<Texture2D>(string.Concat(new object[]
-					{
+			{
+
 						"Images",
 						Path.DirectorySeparatorChar,
 						"UI",
 						Path.DirectorySeparatorChar,
 						"UI_quickicon1"
-					}));
+			}));
 			Main.craftUpButtonTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "RecUp");
 			Main.craftDownButtonTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "RecDown");
 			Main.scrollLeftButtonTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "RecLeft");
@@ -7398,13 +_,15 @@
 			for (int num5 = 1; num5 <= 3; num5++)
 			{
 				Main.jellyfishBowlTexture[num5 - 1] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"jellyfishBowl",
 							num5
-						}));
-			}
+				}));
+			}
+
 			Main.glowSnailTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "GlowSnail");
 			Main.iceQueenTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "IceQueen");
 			Main.santaTankTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "SantaTank");
@@ -7436,38 +_,43 @@
 			Main.colorBarTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "ColorBar");
 			Main.colorBlipTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "ColorBlip");
 			Main.colorHighlightTexture = this.OurLoad<Texture2D>(string.Concat(new object[]
-					{
+			{
+
 						"Images",
 						Path.DirectorySeparatorChar,
 						"UI",
 						Path.DirectorySeparatorChar,
 						"Slider_Highlight"
-					}));
+			}));
 			Main.LockOnCursorTexture = this.OurLoad<Texture2D>(string.Concat(new object[]
-					{
+			{
+
 						"Images",
 						Path.DirectorySeparatorChar,
 						"UI",
 						Path.DirectorySeparatorChar,
 						"LockOn_Cursor"
-					}));
+			}));
 			Main.rainTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Rain");
 			for (int num6 = 0; num6 < 245; num6++)
 			{
 				Main.glowMaskTexture[num6] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Glow_",
 							num6
-						}));
-			}
+				}));
+			}
+
 			for (int num7 = 0; num7 < Main.highlightMaskTexture.Length; num7++)
 			{
 				if (TileID.Sets.HasOutlines[num7])
 				{
 					Main.highlightMaskTexture[num7] = this.OurLoad<Texture2D>(string.Concat(new object[]
-							{
+					{
+
 								"Images",
 								Path.DirectorySeparatorChar,
 								"Misc",
@@ -7476,102 +_,120 @@
 								Path.DirectorySeparatorChar,
 								"Tiles_",
 								num7
-							}));
-				}
-			}
+					}));
+				}
+			}
+
 			for (int num8 = 0; num8 < 90; num8++)
 			{
 				Main.extraTexture[num8] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Extra_",
 							num8
-						}));
-			}
+				}));
+			}
+
 			for (int num9 = 0; num9 < 4; num9++)
 			{
 				Main.coinTexture[num9] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Coin_",
 							num9
-						}));
-			}
+				}));
+			}
+
 			Main.magicPixel = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MagicPixel");
 			Main.settingsPanelTexture = this.OurLoad<Texture2D>(string.Concat(new object[]
-					{
+			{
+
 						"Images",
 						Path.DirectorySeparatorChar,
 						"UI",
 						Path.DirectorySeparatorChar,
 						"Settings_Panel"
-					}));
+			}));
 			Main.settingsPanelTexture2 = this.OurLoad<Texture2D>(string.Concat(new object[]
-					{
+			{
+
 						"Images",
 						Path.DirectorySeparatorChar,
 						"UI",
 						Path.DirectorySeparatorChar,
 						"Settings_Panel_2"
-					}));
+			}));
 			Main.miniMapFrameTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MiniMapFrame");
 			Main.miniMapFrame2Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "MiniMapFrame2");
 			for (int num10 = 0; num10 < Main.xmasTree.Length; num10++)
 			{
 				Main.xmasTree[num10] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Xmas_",
 							num10
-						}));
-			}
+				}));
+			}
+
 			for (int num11 = 0; num11 < 4; num11++)
 			{
 				Main.clothesTexture[num11] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Clothes_",
 							num11
-						}));
-			}
+				}));
+			}
+
 			for (int num12 = 0; num12 < Main.FlameTexture.Length; num12++)
 			{
 				Main.FlameTexture[num12] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Flame_",
 							num12
-						}));
-			}
+				}));
+			}
+
 			for (int num13 = 0; num13 < 3; num13++)
 			{
 				Main.miniMapButtonTexture[num13] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"MiniMapButton_",
 							num13
-						}));
-			}
+				}));
+			}
+
 			for (int num14 = 0; num14 < 8; num14++)
 			{
 				Main.mapIconTexture[num14] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Map_",
 							num14
-						}));
-			}
+				}));
+			}
+
 			for (int num15 = 0; num15 < Main.underworldTexture.Length; num15++)
 			{
 				Main.underworldTexture[num15] = this.OurLoad<Texture2D>("Images/Backgrounds/Underworld " + num15);
 			}
+
 			Main.destTexture[0] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Dest1");
 			Main.destTexture[1] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Dest2");
 			Main.destTexture[2] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Dest3");
@@ -7585,77 +_,90 @@
 			Main.hbTexture1 = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "HealthBar1");
 			Main.hbTexture2 = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "HealthBar2");
 			Main.loTexture = this.OurLoad<Texture2D>(string.Concat(new object[]
-					{
+			{
+
 						"Images",
 						Path.DirectorySeparatorChar,
 						"logo_",
 						Main.rand.Next(1, 9)
-					}));
+			}));
 			Main.spriteBatch = new SpriteBatch(base.GraphicsDevice);
 			Main.tileBatch = new TileBatch(base.GraphicsDevice);
 			for (int num16 = 1; num16 < 2; num16++)
 			{
 				Main.bannerTexture[num16] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"House_Banner_",
 							num16
-						}));
-			}
+				}));
+			}
+
 			for (int num17 = 0; num17 < Main.npcHeadTexture.Length; num17++)
 			{
 				Main.npcHeadTexture[num17] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"NPC_Head_",
 							num17
-						}));
-			}
+				}));
+			}
+
 			for (int num18 = 0; num18 < Main.npcHeadBossTexture.Length; num18++)
 			{
 				Main.npcHeadBossTexture[num18] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"NPC_Head_Boss_",
 							num18
-						}));
-			}
+				}));
+			}
+
 			for (int num19 = 1; num19 < Main.BackPackTexture.Length; num19++)
 			{
 				Main.BackPackTexture[num19] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"BackPack_",
 							num19
-						}));
-			}
+				}));
+			}
+
 			for (int num20 = 1; num20 < 206; num20++)
 			{
 				Main.buffTexture[num20] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Buff_",
 							num20
-						}));
-			}
+				}));
+			}
+
 			this.LoadBackground(0);
 			this.LoadBackground(49);
 			Main.minecartMountTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Minecart");
 			for (int num21 = 0; num21 < Main.rudolphMountTexture.Length; num21++)
 			{
 				Main.rudolphMountTexture[num21] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Rudolph_",
 							num21
-						}));
-			}
+				}));
+			}
+
 			Main.bunnyMountTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Bunny");
 			Main.pigronMountTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Pigron");
 			Main.slimeMountTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Mount_Slime");
@@ -7690,54 +_,64 @@
 				else
 				{
 					Main.itemTexture[num22] = this.OurLoad<Texture2D>(string.Concat(new object[]
-							{
+					{
+
 								"Images",
 								Path.DirectorySeparatorChar,
 								"Item_",
 								num22
-							}));
-				}
-			}
+					}));
+				}
+			}
+
 			for (int num24 = 0; num24 < Main.gemTexture.Length; num24++)
 			{
 				Main.gemTexture[num24] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Gem_",
 							num24
-						}));
-			}
+				}));
+			}
+
 			for (int num25 = 0; num25 < 22; num25++)
 			{
 				Main.cloudTexture[num25] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Cloud_",
 							num25
-						}));
-			}
+				}));
+			}
+
 			for (int num26 = 0; num26 < 5; num26++)
 			{
 				Main.starTexture[num26] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Star_",
 							num26
-						}));
-			}
+				}));
+			}
+
 			for (int num27 = 0; num27 < 12; num27++)
 			{
 				Main.liquidTexture[num27] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Liquid_",
 							num27
-						}));
-			}
+				}));
+			}
+
 			this.waterfallManager.LoadContent();
 			Main.npcToggleTexture[0] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "House_1");
 			Main.npcToggleTexture[1] = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "House_2");
@@ -7761,23 +_,26 @@
 			for (int num28 = 0; num28 < Main.cursorTextures.Length; num28++)
 			{
 				Main.cursorTextures[num28] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"UI",
 							Path.DirectorySeparatorChar,
 							"Cursor_",
 							num28
-						}));
-			}
+				}));
+			}
+
 			Main.cursorRadialTexture = this.OurLoad<Texture2D>(string.Concat(new object[]
-					{
+			{
+
 						"Images",
 						Path.DirectorySeparatorChar,
 						"UI",
 						Path.DirectorySeparatorChar,
 						"Radial"
-					}));
+			}));
 			Main.ninjaTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Ninja");
 			Main.antLionTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "AntlionBody");
 			Main.spikeBaseTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Spike_Base");
@@ -7793,33 +_,39 @@
 			for (int num29 = 0; num29 < Main.moonTexture.Length; num29++)
 			{
 				Main.moonTexture[num29] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Moon_",
 							num29
-						}));
-			}
+				}));
+			}
+
 			for (int num30 = 0; num30 < Main.treeTopTexture.Length; num30++)
 			{
 				Main.treeTopTexture[num30] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Tree_Tops_",
 							num30
-						}));
-			}
+				}));
+			}
+
 			for (int num31 = 0; num31 < Main.treeBranchTexture.Length; num31++)
 			{
 				Main.treeBranchTexture[num31] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Tree_Branches_",
 							num31
-						}));
-			}
+				}));
+			}
+
 			Main.shroomCapTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Shroom_Tops");
 			Main.inventoryBackTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back");
 			Main.inventoryBack2Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Inventory_Back2");
@@ -7861,13 +_,15 @@
 			for (int num32 = 0; num32 < 17; num32++)
 			{
 				Main.chainsTexture[num32] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Chains_",
 							num32
-						}));
-			}
+				}));
+			}
+
 			Main.chain20Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain20");
 			Main.fishingLineTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "FishingLine");
 			Main.chainTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Chain");
@@ -7918,23 +_,27 @@
 			for (int num33 = 1; num33 < Main.gemChainTexture.Length; num33++)
 			{
 				Main.gemChainTexture[num33] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"GemChain_",
 							num33
-						}));
-			}
+				}));
+			}
+
 			for (int num34 = 1; num34 < Main.golemTexture.Length; num34++)
 			{
 				Main.golemTexture[num34] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"GolemLights",
 							num34
-						}));
-			}
+				}));
+			}
+
 			Main.npcAltTextures = new Texture2D[Main.npcTexture.Length][];
 			for (int num35 = 0; num35 < NPCID.Sets.ExtraTextureCount.Length; num35++)
 			{
@@ -7945,17 +_,19 @@
 					this.LoadNPC(num35);
 					Main.npcAltTextures[num35][0] = Main.npcTexture[num35];
 				}
+
 				for (int num37 = 1; num37 <= num36; num37++)
 				{
 					Main.npcAltTextures[num35][num37] = this.OurLoad<Texture2D>(string.Concat(new object[]
-							{
+					{
+
 								"Images",
 								Path.DirectorySeparatorChar,
 								"NPC_",
 								num35,
 								"_Alt_",
 								num37
-							}));
+					}));
 				}
 			}
 		}
@@ -7967,7 +_,7 @@
 			Main.waveBank = new WaveBank(Main.engine, "Content" + Path.DirectorySeparatorChar + "Wave Bank.xwb");
 			for (int i = 1; i < 42; i++)
 			{
-				Main.music[i] = Main.soundBank.GetCue("Music_" + i);
+				Main.music[i] = new MusicWrapper(Main.soundBank.GetCue("Music_" + i));
 			}
 		}
 
@@ -8026,58 +_,68 @@
 			for (int i = 0; i < Main.soundCoin.Length; i++)
 			{
 				Main.soundCoin[i] = this.OurLoad<SoundEffect>(string.Concat(new object[]
-						{
+				{
+
 							"Sounds",
 							Path.DirectorySeparatorChar,
 							"Coin_",
 							i
-						}));
+				}));
 				Main.soundInstanceCoin[i] = Main.soundCoin[i].CreateInstance();
 			}
+
 			for (int j = 0; j < Main.soundDrip.Length; j++)
 			{
 				Main.soundDrip[j] = this.OurLoad<SoundEffect>(string.Concat(new object[]
-						{
+				{
+
 							"Sounds",
 							Path.DirectorySeparatorChar,
 							"Drip_",
 							j
-						}));
+				}));
 				Main.soundInstanceDrip[j] = Main.soundDrip[j].CreateInstance();
 			}
+
 			for (int k = 0; k < Main.soundZombie.Length; k++)
 			{
 				Main.soundZombie[k] = this.OurLoad<SoundEffect>(string.Concat(new object[]
-						{
+				{
+
 							"Sounds",
 							Path.DirectorySeparatorChar,
 							"Zombie_",
 							k
-						}));
+				}));
 				Main.soundInstanceZombie[k] = Main.soundZombie[k].CreateInstance();
 			}
+
 			for (int l = 0; l < Main.soundLiquid.Length; l++)
 			{
 				Main.soundLiquid[l] = this.OurLoad<SoundEffect>(string.Concat(new object[]
-						{
+				{
+
 							"Sounds",
 							Path.DirectorySeparatorChar,
 							"Liquid_",
 							l
-						}));
+				}));
 				Main.soundInstanceLiquid[l] = Main.soundLiquid[l].CreateInstance();
 			}
+
 			for (int m = 0; m < Main.soundRoar.Length; m++)
 			{
 				Main.soundRoar[m] = this.OurLoad<SoundEffect>(string.Concat(new object[]
-						{
+				{
+
 							"Sounds",
 							Path.DirectorySeparatorChar,
 							"Roar_",
 							m
-						}));
+				}));
 				Main.soundInstanceRoar[m] = Main.soundRoar[m].CreateInstance();
 			}
+
 			Main.soundSplash[0] = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Splash_0");
 			Main.soundInstanceSplash[0] = Main.soundRoar[0].CreateInstance();
 			Main.soundSplash[1] = this.OurLoad<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Splash_1");
@@ -8097,50 +_,58 @@
 			for (int n = 1; n < 126; n++)
 			{
 				Main.soundItem[n] = this.OurLoad<SoundEffect>(string.Concat(new object[]
-						{
+				{
+
 							"Sounds",
 							Path.DirectorySeparatorChar,
 							"Item_",
 							n
-						}));
+				}));
 				Main.soundInstanceItem[n] = Main.soundItem[n].CreateInstance();
 			}
+
 			for (int num = 1; num < 58; num++)
 			{
 				Main.soundNPCHit[num] = this.OurLoad<SoundEffect>(string.Concat(new object[]
-						{
+				{
+
 							"Sounds",
 							Path.DirectorySeparatorChar,
 							"NPC_Hit_",
 							num
-						}));
+				}));
 				Main.soundInstanceNPCHit[num] = Main.soundNPCHit[num].CreateInstance();
 			}
+
 			for (int num2 = 1; num2 < 63; num2++)
 			{
 				Main.soundNPCKilled[num2] = this.OurLoad<SoundEffect>(string.Concat(new object[]
-						{
+				{
+
 							"Sounds",
 							Path.DirectorySeparatorChar,
 							"NPC_Killed_",
 							num2
-						}));
+				}));
 				Main.soundInstanceNPCKilled[num2] = Main.soundNPCKilled[num2].CreateInstance();
 			}
+
 			Main.trackableSounds = new SoundEffect[SoundID.TrackableLegacySoundCount];
 			Main.trackableSoundInstances = new SoundEffectInstance[Main.trackableSounds.Length];
 			for (int num3 = 0; num3 < Main.trackableSounds.Length; num3++)
 			{
 				Main.trackableSounds[num3] = this.OurLoad<SoundEffect>(string.Concat(new object[]
-						{
+				{
+
 							"Sounds",
 							Path.DirectorySeparatorChar,
 							"Custom",
 							Path.DirectorySeparatorChar,
 							SoundID.GetTrackableLegacySoundPath(num3)
-						}));
+				}));
 				Main.trackableSoundInstances[num3] = Main.trackableSounds[num3].CreateInstance();
 			}
+
 			Main.soundInstanceMoonlordCry = Main.soundNPCKilled[10].CreateInstance();
 		}
 
@@ -8180,14 +_,15 @@
 				NPC.waveKills = 0f;
 				NPC.waveNumber = 1;
 				string invasionWaveText = Lang.GetInvasionWaveText(1, new short[]
-					{
-						305
-					});
+				{
+					305
+				});
 				if (Main.netMode == 0)
 				{
 					Main.NewText(invasionWaveText, 175, 75, 255, false);
 					return;
 				}
+
 				if (Main.netMode == 2)
 				{
 					NetMessage.SendData(25, -1, -1, invasionWaveText, 255, 175f, 75f, 255f, 0, 0, 0);
@@ -8205,15 +_,16 @@
 				NPC.waveKills = 0f;
 				NPC.waveNumber = 1;
 				string invasionWaveText = Lang.GetInvasionWaveText(1, new short[]
-					{
-						338,
+				{
+					338,
 						342
-					});
+				});
 				if (Main.netMode == 0)
 				{
 					Main.NewText(invasionWaveText, 175, 75, 255, false);
 					return;
 				}
+
 				if (Main.netMode == 2)
 				{
 					NetMessage.SendData(25, -1, -1, invasionWaveText, 255, 175f, 75f, 255f, 0, 0, 0);
@@ -8223,11 +_,12 @@
 
 		protected void UpdateAudio()
 		{
-#if !WINDOWS
+			#if !WINDOWS
 			if (Main.engine != null)
 			{
 				Main.engine.Update();
 			}
+
 			object audioLock = Main._audioLock;
 			lock (audioLock)
 			{
@@ -8246,7 +_,8 @@
 					}
 				}
 			}
-#endif
+
+			#endif
 			if (!Main.dedServ)
 			{
 				bool flag = (!Main.hasFocus || Main.gamePaused) && Main.netMode == 0;
@@ -8344,6 +_,7 @@
 					bool flag13 = false;
 					Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)Main.screenPosition.X, (int)Main.screenPosition.Y, Main.screenWidth, Main.screenHeight);
 					int num = 5000;
+					int modMusic = -1;
 					for (int l = 0; l < 200; l++)
 					{
 						if (Main.npc[l].active)
@@ -8367,38 +_,43 @@
 												break;
 											default:
 												switch (type)
-												{
-													case 125:
+											{
+												case 125:
 													case 126:
 														break;
-													default:
+												default:
 														goto IL_4D9;
-												}
-												break;
+											}
+
+											break;
 										}
+
 										num2 = 2;
 										goto IL_4D9;
 									}
+
 									switch (type)
 									{
 										case 13:
 										case 14:
 										case 15:
 											num2 = 1;
-											goto IL_4D9;
+										goto IL_4D9;
 										default:
 											switch (type)
-											{
-												case 26:
+										{
+											case 26:
 												case 27:
 												case 28:
 												case 29:
 													break;
-												default:
+											default:
 													goto IL_4D9;
-											}
-											break;
+										}
+
+										break;
 									}
+
 									IL_486:
 									num2 = 11;
 								}
@@ -8434,13 +_,14 @@
 											break;
 										case 222:
 											num2 = 5;
-											break;
+										break;
 										default:
 											if (type == 245)
-											{
-												num2 = 4;
-											}
-											break;
+										{
+											num2 = 4;
+										}
+
+										break;
 									}
 								}
 							}
@@ -8456,15 +_,15 @@
 											case 263:
 											case 264:
 												num2 = 6;
-												goto IL_4D9;
+											goto IL_4D9;
 											case 265:
 												goto IL_4D9;
 											case 266:
 												goto IL_491;
 											default:
 												switch (type)
-												{
-													case 381:
+											{
+												case 381:
 													case 382:
 													case 383:
 													case 385:
@@ -8475,7 +_,7 @@
 													case 391:
 													case 395:
 														break;
-													case 384:
+												case 384:
 													case 387:
 													case 392:
 													case 393:
@@ -8483,13 +_,14 @@
 													case 396:
 													case 397:
 														goto IL_4D9;
-													case 398:
+												case 398:
 														num2 = 7;
+												goto IL_4D9;
+												default:
 														goto IL_4D9;
-													default:
-														goto IL_4D9;
-												}
-												break;
+											}
+
+											break;
 										}
 									}
 									else
@@ -8498,18 +_,20 @@
 										{
 											goto IL_4B5;
 										}
+
 										switch (type)
 										{
 											case 438:
 												if (Main.npc[l].ai[1] == 1f)
-												{
-													num2 = 4;
-													goto IL_4D9;
-												}
+											{
+												num2 = 4;
 												goto IL_4D9;
+											}
+
+											goto IL_4D9;
 											case 439:
 												num2 = 4;
-												goto IL_4D9;
+											goto IL_4D9;
 											default:
 												goto IL_4D9;
 										}
@@ -8527,10 +_,11 @@
 											goto IL_4B5;
 										default:
 											if (type != 507)
-											{
-												goto IL_4D9;
-											}
-											goto IL_4B5;
+										{
+											goto IL_4D9;
+										}
+
+										goto IL_4B5;
 									}
 								}
 								else
@@ -8539,94 +_,118 @@
 									{
 										goto IL_4B5;
 									}
+
 									if (type != 520)
 									{
 										goto IL_4D9;
 									}
 								}
+
 								num2 = 9;
 								goto IL_4D9;
 								IL_4B5:
 								num2 = 10;
 							}
+
 							IL_4D9:
-							if (NPCID.Sets.BelongsToInvasionOldOnesArmy[Main.npc[l].type])
+							if (Main.npc[l].type < NPCID.Sets.BelongsToInvasionOldOnesArmy.Length && NPCID.Sets.BelongsToInvasionOldOnesArmy[Main.npc[l].type])
 							{
 								num2 = 12;
 							}
+
 							if (num2 == 0 && Main.npc[l].boss)
 							{
 								num2 = 1;
 							}
-							if (num2 == 0)
+
+							if (num2 == 0 && (Main.npc[l].modNPC == null || Main.npc[l].modNPC.music < 0))
 							{
 								goto IL_5F6;
 							}
+
 							Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)(Main.npc[l].position.X + (float)(Main.npc[l].width / 2)) - num, (int)(Main.npc[l].position.Y + (float)(Main.npc[l].height / 2)) - num, num * 2, num * 2);
 							if (!rectangle.Intersects(value))
 							{
 								goto IL_5F6;
 							}
+
+							if (Main.npc[l].modNPC != null && Main.npc[l].modNPC.music >= 0 && modMusic < 0)
+							{
+								modMusic = Main.npc[l].modNPC.music;
+							}
+
 							if (num2 == 1)
 							{
 								flag2 = true;
 								break;
 							}
+
 							if (num2 == 2)
 							{
 								flag3 = true;
 								break;
 							}
+
 							if (num2 == 3)
 							{
 								flag4 = true;
 								break;
 							}
+
 							if (num2 == 4)
 							{
 								flag5 = true;
 								break;
 							}
+
 							if (num2 == 5)
 							{
 								flag6 = true;
 								break;
 							}
+
 							if (num2 == 6)
 							{
 								flag7 = true;
 								break;
 							}
+
 							if (num2 == 7)
 							{
 								flag8 = true;
 								break;
 							}
+
 							if (num2 == 8)
 							{
 								flag9 = true;
 								break;
 							}
+
 							if (num2 == 9)
 							{
 								flag10 = true;
 								break;
 							}
+
 							if (num2 == 10)
 							{
 								flag11 = true;
 								break;
 							}
+
 							if (num2 == 11)
 							{
 								flag12 = true;
 								break;
 							}
+
 							if (num2 == 12)
 							{
 								flag13 = true;
 								break;
 							}
+
 							break;
 							IL_491:
 							num2 = 3;
@@ -8663,6 +_,10 @@
 						{
 							this.newMusic = 38;
 						}
+						else if (modMusic >= 0)
+						{
+							this.newMusic = modMusic;
+						}
 						else if (flag10)
 						{
 							this.newMusic = 37;
@@ -8878,187 +_,238 @@
 								this.newMusic = 3;
 							}
 						}
+
 						if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 10.0 && Main.pumpkinMoon)
 						{
 							this.newMusic = 30;
 						}
+
 						if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 10.0 && Main.snowMoon)
 						{
 							this.newMusic = 32;
 						}
 					}
+
+					ModHooks.UpdateMusic(ref this.newMusic);
 					if (Main.gameMenu || Main.musicVolume == 0f)
 					{
 						Main.musicBox2 = -1;
 						Main.musicBox = -1;
 					}
+
 					if (Main.musicBox2 >= 0)
 					{
 						Main.musicBox = Main.musicBox2;
 					}
+
 					if (Main.musicBox >= 0)
 					{
 						if (Main.musicBox == 0)
 						{
 							this.newMusic = 1;
 						}
+
 						if (Main.musicBox == 1)
 						{
 							this.newMusic = 2;
 						}
+
 						if (Main.musicBox == 2)
 						{
 							this.newMusic = 3;
 						}
+
 						if (Main.musicBox == 4)
 						{
 							this.newMusic = 4;
 						}
+
 						if (Main.musicBox == 5)
 						{
 							this.newMusic = 5;
 						}
+
 						if (Main.musicBox == 3)
 						{
 							this.newMusic = 6;
 						}
+
 						if (Main.musicBox == 6)
 						{
 							this.newMusic = 7;
 						}
+
 						if (Main.musicBox == 7)
 						{
 							this.newMusic = 8;
 						}
+
 						if (Main.musicBox == 9)
 						{
 							this.newMusic = 9;
 						}
+
 						if (Main.musicBox == 8)
 						{
 							this.newMusic = 10;
 						}
+
 						if (Main.musicBox == 11)
 						{
 							this.newMusic = 11;
 						}
+
 						if (Main.musicBox == 10)
 						{
 							this.newMusic = 12;
 						}
+
 						if (Main.musicBox == 12)
 						{
 							this.newMusic = 13;
 						}
+
 						if (Main.musicBox == 13)
 						{
 							this.newMusic = 14;
 						}
+
 						if (Main.musicBox == 14)
 						{
 							this.newMusic = 15;
 						}
+
 						if (Main.musicBox == 15)
 						{
 							this.newMusic = 16;
 						}
+
 						if (Main.musicBox == 16)
 						{
 							this.newMusic = 17;
 						}
+
 						if (Main.musicBox == 17)
 						{
 							this.newMusic = 18;
 						}
+
 						if (Main.musicBox == 18)
 						{
 							this.newMusic = 19;
 						}
+
 						if (Main.musicBox == 19)
 						{
 							this.newMusic = 20;
 						}
+
 						if (Main.musicBox == 20)
 						{
 							this.newMusic = 21;
 						}
+
 						if (Main.musicBox == 21)
 						{
 							this.newMusic = 22;
 						}
+
 						if (Main.musicBox == 22)
 						{
 							this.newMusic = 23;
 						}
+
 						if (Main.musicBox == 23)
 						{
 							this.newMusic = 24;
 						}
+
 						if (Main.musicBox == 24)
 						{
 							this.newMusic = 25;
 						}
+
 						if (Main.musicBox == 25)
 						{
 							this.newMusic = 26;
 						}
+
 						if (Main.musicBox == 26)
 						{
 							this.newMusic = 27;
 						}
+
 						if (Main.musicBox == 27)
 						{
 							this.newMusic = 29;
 						}
+
 						if (Main.musicBox == 28)
 						{
 							this.newMusic = 30;
 						}
+
 						if (Main.musicBox == 29)
 						{
 							this.newMusic = 31;
 						}
+
 						if (Main.musicBox == 30)
 						{
 							this.newMusic = 32;
 						}
+
 						if (Main.musicBox == 31)
 						{
 							this.newMusic = 33;
 						}
+
 						if (Main.musicBox == 32)
 						{
 							this.newMusic = 38;
 						}
+
 						if (Main.musicBox == 33)
 						{
 							this.newMusic = 37;
 						}
+
 						if (Main.musicBox == 34)
 						{
 							this.newMusic = 35;
 						}
+
 						if (Main.musicBox == 35)
 						{
 							this.newMusic = 36;
 						}
+
 						if (Main.musicBox == 36)
 						{
 							this.newMusic = 34;
 						}
+
 						if (Main.musicBox == 37)
 						{
 							this.newMusic = 39;
 						}
+
 						if (Main.musicBox == 38)
 						{
 							this.newMusic = 40;
 						}
+
 						if (Main.musicBox == 39)
 						{
 							this.newMusic = 41;
 						}
-					}
+
+						if (Main.musicBox >= Main.maxMusic)
+						{
+							this.newMusic = Main.musicBox;
+						}
+					}
+
 					Main.curMusic = this.newMusic;
 					float num8 = 1f;
 					if (NPC.MoonLordCountdown > 0)
@@ -9074,13 +_,19 @@
 							num8 = 0f;
 							Main.curMusic = 0;
 						}
-						if (NPC.MoonLordCountdown == 1 && Main.curMusic >= 1 && Main.curMusic < 42)
+
+						if (NPC.MoonLordCountdown == 1 && Main.curMusic >= 1 && Main.curMusic < Main.music.Length)
 						{
 							Main.musicFade[Main.curMusic] = 0f;
 						}
 					}
-					for (int m = 1; m < 42; m++)
-					{
+
+					for (int m = 1; m < Main.music.Length; m++)
+					{
+						if (Main.music[m] == null)
+						{
+							continue; // Race condition, Music is resized during load.
+						}
 						if (m == 28)
 						{
 							if (Main.cloudAlpha > 0f && (double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2) && !Main.player[Main.myPlayer].ZoneSnow)
@@ -9094,7 +_,7 @@
 								}
 								else if (!Main.music[m].IsPlaying)
 								{
-									Main.music[m] = Main.soundBank.GetCue("Music_" + m);
+									Main.music[m].cue = Main.soundBank.GetCue("Music_" + m);
 									Main.music[m].Play();
 									Main.music[m].SetVariable("Volume", Main.musicFade[m] * Main.ambientVolume);
 								}
@@ -9141,7 +_,11 @@
 						{
 							if (!Main.music[m].IsPlaying)
 							{
-								Main.music[m] = Main.soundBank.GetCue("Music_" + m);
+								if (m < Main.maxMusic)
+								{
+									Main.music[m].cue = Main.soundBank.GetCue("Music_" + m);
+								}
+
 								Main.music[m].Play();
 								Main.music[m].SetVariable("Volume", Main.musicFade[m] * Main.musicVolume * num8);
 							}
@@ -11169,14 +_,15 @@
 					{
 						case 0:
 							num12 = 24;
-							break;
+						break;
 						case 1:
 							num12 = 31;
-							break;
+						break;
 						case 2:
 							num12 = 34;
-							break;
-					}
+						break;
+					}
+
 					for (int num14 = 0; num14 < Main.cageFrames; num14++)
 					{
 						if (++Main.slugCageFrameCounter[num13, num14] >= Main.rand.Next(5, 15))
@@ -11617,14 +_,16 @@
 					this._crazyTestArrayMemoryLimit[i] = new Player();
 				}
 			}
+
 			int num2 = Main.rand.Next(this._crazyTestArrayMemoryLimit.Length);
 			Main.NewText(string.Concat(new object[]
-					{
+			{
+
 						"testing ",
 						num2,
 						" ",
 						this._crazyTestArrayMemoryLimit[num2].name
-					}), 255, 255, 255, false);
+			}), 255, 255, 255, false);
 		}
 
 		protected override void Update(GameTime gameTime)
@@ -11637,22 +_,34 @@
 					Main.OnEnginePreload();
 				}
 			}
-			this.DoUpdate(gameTime);
-			CinematicManager.Instance.Update(gameTime);
-			if (Main.netMode == 2)
-			{
-				for (int i = 0; i < 256; i++)
-				{
-					if (Netplay.Clients[i].Socket != null)
-					{
-						Netplay.Clients[i].Socket.SendQueuedPackets();
-					}
-				}
-				return;
-			}
-			if (Main.netMode == 1)
-			{
-				Netplay.Connection.Socket.SendQueuedPackets();
+
+			// TODO, should I put everything in the try catch? this is new stuff.
+			// also, vanilla itself now separated update and doupdate
+			try
+			{
+				this.DoUpdate(gameTime);
+				CinematicManager.Instance.Update(gameTime);
+				if (Main.netMode == 2)
+				{
+					for (int i = 0; i < 256; i++)
+					{
+						if (Netplay.Clients[i].Socket != null)
+						{
+							Netplay.Clients[i].Socket.SendQueuedPackets();
+						}
+					}
+
+					return;
+				}
+
+				if (Main.netMode == 1)
+				{
+					Netplay.Connection.Socket.SendQueuedPackets();
+				}
+			}
+			catch (Exception e)
+			{
+				ErrorLogger.LogException(e);
 			}
 		}
 
@@ -11675,35 +_,43 @@
 			{
 				Main.InGameUI.SetState(null);
 			}
+
 			if (Main.MenuUI != null)
 			{
 				Main.MenuUI.Update(gameTime);
 			}
+
 			if (Main.InGameUI != null)
 			{
 				Main.InGameUI.Update(gameTime);
 			}
+
 			Main.MouseOversTryToClear();
 			PlayerInput.ResetInputsOnActiveStateChange();
-#if CLIENT
+			#if CLIENT
 			if (Main.OnTick != null)
 			{
 				Main.OnTick();
 			}
-#endif
+
+			#endif
 			if (Main._hasPendingNetmodeChange)
 			{
 				Main.netMode = Main._targetNetMode;
 				Main._hasPendingNetmodeChange = false;
 			}
+
+			Netplay.OnUpdate();
 			if (CaptureManager.Instance.IsCapturing)
 			{
 				return;
 			}
+
 			if (Main.ActivePlayerFileData != null)
 			{
 				Main.ActivePlayerFileData.UpdatePlayTimer();
 			}
+
 			Main.ignoreErrors = true;
 			if (Main.expertMode)
 			{
@@ -11738,18 +_,19 @@
 					{
 						Main.fpsTimer.Restart();
 					}
+
 					if (Main.fpsTimer.ElapsedMilliseconds >= 1000L)
 					{
 						Main.dedServCount1 += Main.updateTime;
 						Main.dedServCount2++;
 						float num = (float)Main.dedServCount1 / (float)Main.dedServCount2;
 						Console.WriteLine(string.Concat(new object[]
-								{
-									Main.updateTime,
+						{
+							Main.updateTime,
 									"  (",
 									num,
 									")"
-								}));
+						}));
 						Main.updateTime = 0;
 						Main.fpsTimer.Restart();
 					}
@@ -12033,27 +_,31 @@
 					WorldFile.tempRainTime = Main.rainTime;
 					WorldFile.tempMaxRain = Main.maxRaining;
 				}
+
 				if (!base.IsActive && Main.netMode == 0)
 				{
-#if !MAC
+					#if !MAC
 					base.IsMouseVisible = true;
-#endif
+					#endif
 					if (Main.netMode != 2 && Main.myPlayer >= 0)
 					{
 						Main.player[Main.myPlayer].delayUseItem = true;
 					}
+
 					Main.mouseLeftRelease = false;
 					Main.mouseRightRelease = false;
 					if (Main.gameMenu)
 					{
 						Main.UpdateMenu();
 					}
+
 					Main.gamePaused = true;
 					return;
 				}
-#if !MAC
+
+				#if !MAC
 				base.IsMouseVisible = false;
-#endif
+				#endif
 				EmoteBubble.UpdateAll();
 				ScreenObstruction.Update();
 				ScreenDarkness.Update();
@@ -12375,6 +_,8 @@
 						Main.wallFrameCounter[144] = 0;
 					}
 				}
+
+				WallLoader.AnimateWalls();
 				Main.tileFrameCounter[12]++;
 				if (Main.tileFrameCounter[12] > 5)
 				{
@@ -12940,6 +_,8 @@
 						Main.tileFrame[464] = 0;
 					}
 				}
+
+				TileLoader.AnimateTiles();
 				Main.CritterCages();
 				Main.UpdateDrawAnimations();
 				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F10) && !Main.drawingPlayerChat && !Main.editSign && !Main.editChest)
@@ -13045,13 +_,16 @@
 						Main.ToggleFullScreen();
 						Main.chatRelease = false;
 					}
+
 					Main.toggleFullscreen = false;
 				}
 				else
 				{
 					Main.toggleFullscreen = true;
 				}
+
 				PlayerInput.UpdateInput();
+				ModLoader.ModHooks.PostUpdateInput();
 				UILinkPointNavigator.Update();
 				Main.oldKeyState = Main.keyState;
 				Main.keyState = Keyboard.GetState();
@@ -13100,17 +_,23 @@
 							Main.chatText = Main.chatText.Substring(0, Main.chatText.Length - 1);
 						}
 					}
+
 					if (a != Main.chatText)
 					{
 						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 					}
+
 					if (Main.inputTextEnter && Main.chatRelease)
 					{
-						if (Main.chatText != "")
+						var handled = chatText.Length > 0 && chatText[0] == '/' &&
+								CommandManager.HandleCommand(chatText, new ChatCommandCaller());
+
+						if (Main.chatText != "" && !handled)
 						{
 							NetMessage.SendData(25, -1, -1, Main.chatText, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 						}
-						if (Main.netMode == 0 && Main.chatText != "")
+
+						if (Main.netMode == 0 && Main.chatText != "" && !handled)
 						{
 							Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
 							if (Main.player[Main.myPlayer].difficulty == 2)
@@ -13135,7 +_,8 @@
 						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
 					}
 				}
-				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && Main.netMode == 1 && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt) && Main.hasFocus)
+
+				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt) && Main.hasFocus)
 				{
 					if (Main.chatRelease && !Main.drawingPlayerChat && !Main.editSign && !Main.editChest && !Main.gameMenu && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Escape))
 					{
@@ -13274,35 +_,48 @@
 						NetMessage.SendData(33, -1, -1, "", Main.player[Main.myPlayer].chest, 0f, 0f, 0f, 0, 0, 0);
 					}
 				}
+
 				if (Main.player[Main.myPlayer].talkNPC != Main.clientPlayer.talkNPC)
 				{
 					NetMessage.SendData(40, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 				}
+
 				bool flag = false;
 				if (Main.player[Main.myPlayer].zone1 != Main.clientPlayer.zone1)
 				{
 					flag = true;
 				}
+
 				if (Main.player[Main.myPlayer].zone2 != Main.clientPlayer.zone2)
 				{
 					flag = true;
 				}
+
 				if (Main.player[Main.myPlayer].zone3 != Main.clientPlayer.zone3)
 				{
 					flag = true;
 				}
+
 				if (Main.player[Main.myPlayer].zone4 != Main.clientPlayer.zone4)
 				{
 					flag = true;
 				}
+
+				if (!PlayerHooks.CustomBiomesMatch(Main.player[Main.myPlayer], Main.clientPlayer))
+				{
+					flag = true;
+				}
+
 				if (flag)
 				{
 					NetMessage.SendData(36, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 				}
+
 				if (Main.player[Main.myPlayer].statLife != Main.clientPlayer.statLife || Main.player[Main.myPlayer].statLifeMax != Main.clientPlayer.statLifeMax)
 				{
 					Main.player[Main.myPlayer].netLife = true;
 				}
+
 				if (Main.player[Main.myPlayer].netLifeTime > 0)
 				{
 					Main.player[Main.myPlayer].netLifeTime--;
@@ -13335,34 +_,43 @@
 						flag2 = true;
 					}
 				}
+
 				if (flag2)
 				{
 					NetMessage.SendData(50, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 					NetMessage.SendData(13, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 				}
+
 				bool flag3 = false;
 				if (Main.player[Main.myPlayer].MinionRestTargetPoint != Main.clientPlayer.MinionRestTargetPoint)
 				{
 					flag3 = true;
 				}
+
 				if (flag3)
 				{
 					NetMessage.SendData(99, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 				}
+
 				bool flag4 = false;
 				if (Main.player[Main.myPlayer].MinionAttackTargetNPC != Main.clientPlayer.MinionAttackTargetNPC)
 				{
 					flag4 = true;
 				}
+
 				if (flag4)
 				{
 					NetMessage.SendData(115, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 				}
-			}
+
+				PlayerHooks.SendClientChanges(Main.player[Main.myPlayer], Main.clientPlayer);
+			}
+
 			if (Main.netMode == 1)
 			{
 				Main.clientPlayer = (Player)Main.player[Main.myPlayer].clientClone();
 			}
+
 			if (Main.netMode == 0 && (Main.playerInventory || Main.npcChatText != "" || Main.player[Main.myPlayer].sign >= 0 || Main.ingameOptionsWindow || Main.inFancyUI) && Main.autoPause)
 			{
 				if (!Main.drawingPlayerChat && !Main.editSign && !Main.editChest && !Main.blockInput)
@@ -13911,11 +_,12 @@
 
 		public static string GetInputText(string oldString)
 		{
-#if CLIENT
+			#if CLIENT
 			if (!Main.hasFocus)
 			{
 				return oldString;
 			}
+
 			Main.inputTextEnter = false;
 			Main.inputTextEscape = false;
 			string text = oldString;
@@ -14047,10 +_,11 @@
 					}
 				}
 			}
+
 			return text;
-#else
+			#else
 			return "";
-#endif
+			#endif
 		}
 
 		public string TooltipMousetextProcessor(string tooltip)
@@ -14062,13 +_,14 @@
 				{
 					inputMode = InputMode.XBoxGamepadUI;
 				}
+
 				if (inputMode == InputMode.XBoxGamepadUI)
 				{
 					KeyConfiguration keyConfiguration = PlayerInput.CurrentProfile.InputModes[inputMode];
 					string text = PlayerInput.BuildCommand("", true, new List<string>[]
-						{
-							keyConfiguration.KeyStatus["MouseRight"]
-						});
+					{
+						keyConfiguration.KeyStatus["MouseRight"]
+					});
 					text = text.Replace(": ", "");
 					tooltip = tooltip.Replace("<right>", text);
 				}
@@ -14204,28 +_,34 @@
 			{
 				num2 += 1f;
 			}
+
 			if (Main.player[Main.myPlayer].kbBuff)
 			{
 				num2 += 0.5f;
 			}
+
 			if (num2 != 1f)
 			{
 				Main.toolTip.knockBack *= num2;
 			}
+
 			if (Main.toolTip.ranged && Main.player[Main.myPlayer].shroomiteStealth)
 			{
 				Main.toolTip.knockBack *= 1f + (1f - Main.player[Main.myPlayer].stealth) * 0.5f;
 			}
+
 			int num3 = 20;
 			int num4 = 1;
 			string[] array = new string[num3];
 			bool[] array2 = new bool[num3];
 			bool[] array3 = new bool[num3];
+			string[] tooltipNames = new string[num3];
 			for (int i = 0; i < num3; i++)
 			{
 				array2[i] = false;
 				array3[i] = false;
 			}
+
 			array[0] = Main.toolTip.AffixName();
 			if (Main.toolTip.stack > 1)
 			{
@@ -14234,23 +_,30 @@
 				int arg_18C_1 = 0;
 				object obj = array4[0];
 				expr_148[arg_18C_1] = string.Concat(new object[]
-					{
-						obj,
+				{
+					obj,
 						" (",
 						Main.toolTip.stack,
 						")"
-					});
-			}
+				});
+			}
+
+			tooltipNames[0] = "ItemName";
 			if (Main.toolTip.favorited)
 			{
 				array[num4++] = Lang.tip[56];
+				tooltipNames[num4 - 1] = "Favorite";
 				array[num4++] = Lang.tip[57];
-			}
+				tooltipNames[num4 - 1] = "FavoriteDesc";
+			}
+
 			if (Main.toolTip.social)
 			{
 				array[num4] = Lang.tip[0];
+				tooltipNames[num4] = "Social";
 				num4++;
 				array[num4] = Lang.tip[1];
+				tooltipNames[num4] = "SocialDesc";
 				num4++;
 			}
 			else
@@ -14259,9 +_,13 @@
 				{
 					float num5 = 5E-06f;
 					int damage = Main.toolTip.damage;
+					Player player = Main.player[Main.myPlayer];
 					if (Main.toolTip.melee)
 					{
-						array[num4] = string.Concat((int)(Main.player[Main.myPlayer].meleeDamage * (float)damage + num5));
+						int damage2 = (int)(player.meleeDamage * (float)damage + num5);
+						ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+						PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+						array[num4] = string.Concat(damage2);
 						string[] array5;
 						IntPtr intPtr;
 						(array5 = array)[(int)(intPtr = (IntPtr)num4)] = array5[(int)intPtr] + Lang.tip[2];
@@ -14273,33 +_,46 @@
 						{
 							num6 *= Main.player[Main.myPlayer].arrowDamage;
 						}
+
 						if (Main.toolTip.useAmmo == AmmoID.Arrow && Main.player[Main.myPlayer].archery)
 						{
 							num6 *= 1.2f;
 						}
+
 						if (Main.toolTip.useAmmo == AmmoID.Bullet || Main.toolTip.useAmmo == AmmoID.CandyCorn)
 						{
 							num6 *= Main.player[Main.myPlayer].bulletDamage;
 						}
+
 						if (Main.toolTip.useAmmo == AmmoID.Rocket || Main.toolTip.useAmmo == AmmoID.StyngerBolt || Main.toolTip.useAmmo == AmmoID.JackOLantern || Main.toolTip.useAmmo == AmmoID.NailFriendly)
 						{
 							num6 *= Main.player[Main.myPlayer].rocketDamage;
 						}
-						array[num4] = string.Concat((int)(num6 + num5));
+
+						int damage2 = (int)(num6 + num5);
+						ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+						PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+						array[num4] = string.Concat(damage2);
 						string[] array6;
 						IntPtr intPtr2;
 						(array6 = array)[(int)(intPtr2 = (IntPtr)num4)] = array6[(int)intPtr2] + Lang.tip[3];
 					}
 					else if (Main.toolTip.magic)
 					{
-						array[num4] = string.Concat((int)(Main.player[Main.myPlayer].magicDamage * (float)damage + num5));
+						int damage2 = (int)(player.magicDamage * (float)damage + num5);
+						ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+						PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+						array[num4] = string.Concat(damage2);
 						string[] array7;
 						IntPtr intPtr3;
 						(array7 = array)[(int)(intPtr3 = (IntPtr)num4)] = array7[(int)intPtr3] + Lang.tip[4];
 					}
 					else if (Main.toolTip.thrown)
 					{
-						array[num4] = string.Concat((int)(Main.player[Main.myPlayer].thrownDamage * (float)damage + num5));
+						int damage2 = (int)(player.thrownDamage * (float)damage + num5);
+						ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+						PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+						array[num4] = string.Concat(damage2);
 						string[] array8;
 						IntPtr intPtr4;
 						(array8 = array)[(int)(intPtr4 = (IntPtr)num4)] = array8[(int)intPtr4] + Lang.tip[58];
@@ -14309,47 +_,65 @@
 						if (Main.toolTip.type == 3829 || Main.toolTip.type == 3830 || Main.toolTip.type == 3831)
 						{
 							array[num4] = string.Concat((int)((Main.player[Main.myPlayer].minionDamage * (float)damage + num5) * 3f));
+							int damage2 = (int)((player.minionDamage * (float)damage + num5) * 3f);
+							ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+							PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+							array[num4] = string.Concat(damage2);
 						}
 						else
 						{
-							array[num4] = string.Concat((int)(Main.player[Main.myPlayer].minionDamage * (float)damage + num5));
-						}
+							int damage2 = (int)(player.minionDamage * (float)damage + num5);
+							ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+							PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+							array[num4] = string.Concat(damage2);
+						}
+
 						string[] array4;
 						IntPtr intPtr;
 						(array4 = array)[(int)(intPtr = (IntPtr)num4)] = array4[(int)intPtr] + Lang.tip[53];
 					}
 					else
 					{
-						array[num4] = string.Concat(damage);
+						int damage2 = damage;
+						ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+						PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+						array[num4] = string.Concat(damage2);
 						string[] array4;
 						IntPtr intPtr;
 						(array4 = array)[(int)(intPtr = (IntPtr)num4)] = array4[(int)intPtr] + Lang.tip[55];
 					}
+
+					tooltipNames[num4] = "Damage";
 					num4++;
 					if (Main.toolTip.melee)
 					{
 						int num7 = Main.player[Main.myPlayer].meleeCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.toolTip.crit;
 						array[num4] = num7 + Lang.tip[5];
+						tooltipNames[num4] = "CritChance";
 						num4++;
 					}
 					else if (Main.toolTip.ranged)
 					{
 						int num8 = Main.player[Main.myPlayer].rangedCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.toolTip.crit;
 						array[num4] = num8 + Lang.tip[5];
+						tooltipNames[num4] = "CritChance";
 						num4++;
 					}
 					else if (Main.toolTip.magic)
 					{
 						int num9 = Main.player[Main.myPlayer].magicCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.toolTip.crit;
 						array[num4] = num9 + Lang.tip[5];
+						tooltipNames[num4] = "CritChance";
 						num4++;
 					}
 					else if (Main.toolTip.thrown)
 					{
 						int num10 = Main.player[Main.myPlayer].thrownCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.toolTip.crit;
 						array[num4] = num10 + Lang.tip[5];
+						tooltipNames[num4] = "CritChance";
 						num4++;
 					}
+
 					if (Main.toolTip.useStyle > 0 && !Main.toolTip.summon)
 					{
 						if (Main.toolTip.useAnimation <= 8)
@@ -14384,21 +_,29 @@
 						{
 							array[num4] = Lang.tip[13];
 						}
+
+						tooltipNames[num4] = "Speed";
 						num4++;
 					}
+
 					float num11 = Main.toolTip.knockBack;
 					if (Main.toolTip.summon)
 					{
 						num11 += Main.player[Main.myPlayer].minionKB;
 					}
+
 					if ((Main.player[Main.myPlayer].magicQuiver && Main.toolTip.useAmmo == AmmoID.Arrow) || Main.toolTip.useAmmo == AmmoID.Stake)
 					{
 						num11 = (float)((int)(num11 * 1.1f));
 					}
+
 					if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 3106 && Main.toolTip.type == 3106)
 					{
 						num11 += num11 * (1f - Main.player[Main.myPlayer].stealth);
 					}
+
+					ItemLoader.GetWeaponKnockback(Main.toolTip, player, ref num11);
+					PlayerHooks.GetWeaponKnockback(player, Main.toolTip, ref num11);
 					if (num11 == 0f)
 					{
 						array[num4] = Lang.tip[14];
@@ -14435,60 +_,84 @@
 					{
 						array[num4] = Lang.tip[22];
 					}
+
+					tooltipNames[num4] = "Knockback";
 					num4++;
 				}
+
 				if (Main.toolTip.fishingPole > 0)
 				{
 					array[num4] = Language.GetTextValue("GameUI.PrecentFishingPower", Main.toolTip.fishingPole);
+					tooltipNames[num4] = "FishingPower";
 					num4++;
 					array[num4] = Language.GetTextValue("GameUI.BaitRequired");
+					tooltipNames[num4] = "NeedsBait";
 					num4++;
 				}
+
 				if (Main.toolTip.bait > 0)
 				{
 					array[num4] = Language.GetTextValue("GameUI.BaitPower", Main.toolTip.bait);
+					tooltipNames[num4] = "BaitPower";
 					num4++;
 				}
+
 				if (Main.toolTip.headSlot > 0 || Main.toolTip.bodySlot > 0 || Main.toolTip.legSlot > 0 || Main.toolTip.accessory || Main.projHook[Main.toolTip.shoot] || Main.toolTip.mountType != -1 || (Main.toolTip.buffType > 0 && (Main.lightPet[Main.toolTip.buffType] || Main.vanityPet[Main.toolTip.buffType])))
 				{
 					array[num4] = Lang.tip[23];
+					tooltipNames[num4] = "Equipable";
 					num4++;
 				}
+
 				if (Main.toolTip.tileWand > 0)
 				{
 					array[num4] = Lang.tip[52] + Lang.itemName(Main.toolTip.tileWand, false);
+					tooltipNames[num4] = "WandConsumes";
 					num4++;
 				}
+
 				if (Main.toolTip.questItem)
 				{
 					array[num4] = Lang.inter[65];
+					tooltipNames[num4] = "Quest";
 					num4++;
 				}
+
 				if (Main.toolTip.vanity)
 				{
 					array[num4] = Lang.tip[24];
+					tooltipNames[num4] = "Vanity";
 					num4++;
 				}
+
 				if (Main.toolTip.defense > 0)
 				{
 					array[num4] = Main.toolTip.defense + Lang.tip[25];
+					tooltipNames[num4] = "Defense";
 					num4++;
 				}
+
 				if (Main.toolTip.pick > 0)
 				{
 					array[num4] = Main.toolTip.pick + Lang.tip[26];
+					tooltipNames[num4] = "PickPower";
 					num4++;
 				}
+
 				if (Main.toolTip.axe > 0)
 				{
 					array[num4] = Main.toolTip.axe * 5 + Lang.tip[27];
+					tooltipNames[num4] = "AxePower";
 					num4++;
 				}
+
 				if (Main.toolTip.hammer > 0)
 				{
 					array[num4] = Main.toolTip.hammer + Lang.tip[28];
+					tooltipNames[num4] = "HammerPower";
 					num4++;
 				}
+
 				if (Main.toolTip.tileBoost != 0)
 				{
 					int tileBoost = Main.toolTip.tileBoost;
@@ -14500,67 +_,82 @@
 					{
 						array[num4] = tileBoost + Lang.tip[54];
 					}
+
+					tooltipNames[num4] = "TileBoost";
 					num4++;
 				}
+
 				if (Main.toolTip.healLife > 0)
 				{
 					array[num4] = string.Concat(new object[]
-						{
-							Lang.tip[29],
+					{
+						Lang.tip[29],
 							" ",
 							Main.toolTip.healLife,
 							" ",
 							Lang.tip[30]
-						});
+					});
+					tooltipNames[num4] = "HealLife";
 					num4++;
 				}
+
 				if (Main.toolTip.healMana > 0)
 				{
 					array[num4] = string.Concat(new object[]
-						{
-							Lang.tip[29],
+					{
+						Lang.tip[29],
 							" ",
 							Main.toolTip.healMana,
 							" ",
 							Lang.tip[31]
-						});
+					});
+					tooltipNames[num4] = "HealMana";
 					num4++;
 				}
+
 				if (Main.toolTip.mana > 0 && (Main.toolTip.type != 127 || !Main.player[Main.myPlayer].spaceGun))
 				{
 					array[num4] = string.Concat(new object[]
-						{
-							Lang.tip[32],
+					{
+						Lang.tip[32],
 							" ",
 							(int)((float)Main.toolTip.mana * Main.player[Main.myPlayer].manaCost),
 							" ",
 							Lang.tip[31]
-						});
+					});
+					tooltipNames[num4] = "UseMana";
 					num4++;
 				}
+
 				if (Main.toolTip.createWall > 0 || Main.toolTip.createTile > -1)
 				{
 					if (Main.toolTip.type != 213 && Main.toolTip.tileWand < 1)
 					{
 						array[num4] = Lang.tip[33];
+						tooltipNames[num4] = "Placeable";
 						num4++;
 					}
 				}
 				else if (Main.toolTip.ammo > 0 && !Main.toolTip.notAmmo)
 				{
 					array[num4] = Lang.tip[34];
+					tooltipNames[num4] = "Ammo";
 					num4++;
 				}
 				else if (Main.toolTip.consumable)
 				{
 					array[num4] = Lang.tip[35];
+					tooltipNames[num4] = "Consumable";
 					num4++;
 				}
+
 				if (Main.toolTip.material)
 				{
 					array[num4] = Lang.tip[36];
+					tooltipNames[num4] = "Material";
 					num4++;
 				}
+
 				if (Main.toolTip.toolTip != null)
 				{
 					if (Main.toolTip.type >= 1533 && Main.toolTip.type <= 1537 && !NPC.downedPlantBoss)
@@ -14571,23 +_,32 @@
 					{
 						array[num4] = this.TooltipMousetextProcessor(Main.toolTip.toolTip);
 					}
+
+					tooltipNames[num4] = "Tooltip";
 					num4++;
 				}
+
 				if (Main.toolTip.toolTip2 != null)
 				{
 					array[num4] = this.TooltipMousetextProcessor(Main.toolTip.toolTip2);
+					tooltipNames[num4] = "Tooltip2";
 					num4++;
 				}
+
 				if ((Main.toolTip.type == 3818 || Main.toolTip.type == 3819 || Main.toolTip.type == 3820 || Main.toolTip.type == 3824 || Main.toolTip.type == 3825 || Main.toolTip.type == 3826 || Main.toolTip.type == 3829 || Main.toolTip.type == 3830 || Main.toolTip.type == 3831 || Main.toolTip.type == 3832 || Main.toolTip.type == 3833 || Main.toolTip.type == 3834) && !Main.player[Main.myPlayer].downedDD2EventAnyDifficulty)
 				{
 					array[num4] = Lang.misc[104];
+					tooltipNames[num4] = "EtherianManaWarning";
 					num4++;
 				}
+
 				if (Main.toolTip.buffType == 26 && Main.expertMode)
 				{
 					array[num4] = Lang.misc[40];
+					tooltipNames[num4] = "WellFedExpert";
 					num4++;
 				}
+
 				if (Main.toolTip.buffTime > 0)
 				{
 					string text;
@@ -14599,15 +_,20 @@
 					{
 						text = Math.Round((double)Main.toolTip.buffTime / 60.0) + Lang.tip[38];
 					}
+
 					array[num4] = text;
+					tooltipNames[num4] = "BuffTime";
 					num4++;
 				}
+
 				if (Main.toolTip.type == 3262 || Main.toolTip.type == 3282 || Main.toolTip.type == 3283 || Main.toolTip.type == 3284 || Main.toolTip.type == 3285 || Main.toolTip.type == 3286 || Main.toolTip.type == 3316 || Main.toolTip.type == 3315 || Main.toolTip.type == 3317 || Main.toolTip.type == 3291 || Main.toolTip.type == 3389)
 				{
 					array[num4] = " ";
 					num = num4;
+					tooltipNames[num4] = "OneDropLogo";
 					num4++;
 				}
+
 				if (Main.toolTip.prefix > 0)
 				{
 					if (Main.cpItem == null || Main.cpItem.netID != Main.toolTip.netID)
@@ -14628,13 +_,17 @@
 						{
 							array[num4] = num12 + Lang.tip[39];
 						}
+
 						if (num12 < 0.0)
 						{
 							array3[num4] = true;
 						}
+
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixDamage";
 						num4++;
 					}
+
 					if (Main.cpItem.useAnimation != Main.toolTip.useAnimation)
 					{
 						double num13 = (double)((float)Main.toolTip.useAnimation - (float)Main.cpItem.useAnimation);
@@ -14649,13 +_,17 @@
 						{
 							array[num4] = num13 + Lang.tip[40];
 						}
+
 						if (num13 < 0.0)
 						{
 							array3[num4] = true;
 						}
+
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixSpeed";
 						num4++;
 					}
+
 					if (Main.cpItem.crit != Main.toolTip.crit)
 					{
 						double num14 = (double)((float)Main.toolTip.crit - (float)Main.cpItem.crit);
@@ -14667,13 +_,17 @@
 						{
 							array[num4] = num14 + Lang.tip[41];
 						}
+
 						if (num14 < 0.0)
 						{
 							array3[num4] = true;
 						}
+
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixCritChance";
 						num4++;
 					}
+
 					if (Main.cpItem.mana != Main.toolTip.mana)
 					{
 						double num15 = (double)((float)Main.toolTip.mana - (float)Main.cpItem.mana);
@@ -14687,13 +_,17 @@
 						{
 							array[num4] = num15 + Lang.tip[42];
 						}
+
 						if (num15 > 0.0)
 						{
 							array3[num4] = true;
 						}
+
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixUseMana";
 						num4++;
 					}
+
 					if (Main.cpItem.scale != Main.toolTip.scale)
 					{
 						double num16 = (double)(Main.toolTip.scale - Main.cpItem.scale);
@@ -14707,13 +_,17 @@
 						{
 							array[num4] = num16 + Lang.tip[43];
 						}
+
 						if (num16 < 0.0)
 						{
 							array3[num4] = true;
 						}
+
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixSize";
 						num4++;
 					}
+
 					if (Main.cpItem.shootSpeed != Main.toolTip.shootSpeed)
 					{
 						double num17 = (double)(Main.toolTip.shootSpeed - Main.cpItem.shootSpeed);
@@ -14727,13 +_,17 @@
 						{
 							array[num4] = num17 + Lang.tip[44];
 						}
+
 						if (num17 < 0.0)
 						{
 							array3[num4] = true;
 						}
+
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixShootSpeed";
 						num4++;
 					}
+
 					if (Main.cpItem.knockBack != knockBack)
 					{
 						double num18 = (double)(knockBack - Main.cpItem.knockBack);
@@ -14747,140 +_,187 @@
 						{
 							array[num4] = num18 + Lang.tip[45];
 						}
+
 						if (num18 < 0.0)
 						{
 							array3[num4] = true;
 						}
+
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixKnockback";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 62)
 					{
 						array[num4] = "+1" + Lang.tip[25];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDefense";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 63)
 					{
 						array[num4] = "+2" + Lang.tip[25];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDefense";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 64)
 					{
 						array[num4] = "+3" + Lang.tip[25];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDefense";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 65)
 					{
 						array[num4] = "+4" + Lang.tip[25];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDefense";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 66)
 					{
 						array[num4] = "+20 " + Lang.tip[31];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMaxMana";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 67)
 					{
 						array[num4] = "+2" + Lang.tip[5];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccCritChance";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 68)
 					{
 						array[num4] = "+4" + Lang.tip[5];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccCritChance";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 69)
 					{
 						array[num4] = "+1" + Lang.tip[39];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDamage";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 70)
 					{
 						array[num4] = "+2" + Lang.tip[39];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDamage";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 71)
 					{
 						array[num4] = "+3" + Lang.tip[39];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDamage";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 72)
 					{
 						array[num4] = "+4" + Lang.tip[39];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDamage";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 73)
 					{
 						array[num4] = "+1" + Lang.tip[46];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMoveSpeed";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 74)
 					{
 						array[num4] = "+2" + Lang.tip[46];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMoveSpeed";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 75)
 					{
 						array[num4] = "+3" + Lang.tip[46];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMoveSpeed";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 76)
 					{
 						array[num4] = "+4" + Lang.tip[46];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMoveSpeed";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 77)
 					{
 						array[num4] = "+1" + Lang.tip[47];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMeleeSpeed";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 78)
 					{
 						array[num4] = "+2" + Lang.tip[47];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMeleeSpeed";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 79)
 					{
 						array[num4] = "+3" + Lang.tip[47];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMeleeSpeed";
 						num4++;
 					}
+
 					if (Main.toolTip.prefix == 80)
 					{
 						array[num4] = "+4" + Lang.tip[47];
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMeleeSpeed";
 						num4++;
 					}
 				}
+
 				if (Main.toolTip.wornArmor && Main.player[Main.myPlayer].setBonus != "")
 				{
 					array[num4] = Lang.tip[48] + " " + Main.player[Main.myPlayer].setBonus;
+					tooltipNames[num4] = "SetBonus";
 					num4++;
 				}
 			}
+
 			if (Main.toolTip.expert)
 			{
 				array[num4] = Language.GetTextValue("GameUI.Expert");
+				tooltipNames[num4] = "Expert";
 				num4++;
 			}
+
 			float num19 = (float)Main.mouseTextColor / 255f;
+			//patch file: num20
 			float num20 = num19;
 			int a = (int)Main.mouseTextColor;
 			if (Main.npcShop > 0)
@@ -14888,6 +_,7 @@
 				int storeValue = Main.toolTip.GetStoreValue();
 				if (Main.toolTip.shopSpecialCurrency != -1)
 				{
+					tooltipNames[num4] = "SpecialPrice";
 					CustomCurrencyManager.GetPriceText(Main.toolTip.shopSpecialCurrency, array, ref num4, storeValue);
 					color = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num20)), (int)((byte)(255f * num20)), (int)((byte)(255f * num20)), a);
 				}
@@ -14906,79 +_,90 @@
 						{
 							num25 = 1;
 						}
+
 						num25 *= Main.toolTip.stack;
 					}
+
 					if (num25 < 1)
 					{
 						num25 = 1;
 					}
+
 					if (num25 >= 1000000)
 					{
 						num21 = num25 / 1000000;
 						num25 -= num21 * 1000000;
 					}
+
 					if (num25 >= 10000)
 					{
 						num22 = num25 / 10000;
 						num25 -= num22 * 10000;
 					}
+
 					if (num25 >= 100)
 					{
 						num23 = num25 / 100;
 						num25 -= num23 * 100;
 					}
+
 					if (num25 >= 1)
 					{
 						num24 = num25;
 					}
+
 					if (num21 > 0)
 					{
 						object obj = text2;
 						text2 = string.Concat(new object[]
-							{
-								obj,
+						{
+							obj,
 								num21,
 								" ",
 								Lang.inter[15],
 								" "
-							});
-					}
+						});
+					}
+
 					if (num22 > 0)
 					{
 						object obj = text2;
 						text2 = string.Concat(new object[]
-							{
-								obj,
+						{
+							obj,
 								num22,
 								" ",
 								Lang.inter[16],
 								" "
-							});
-					}
+						});
+					}
+
 					if (num23 > 0)
 					{
 						object obj = text2;
 						text2 = string.Concat(new object[]
-							{
-								obj,
+						{
+							obj,
 								num23,
 								" ",
 								Lang.inter[17],
 								" "
-							});
-					}
+						});
+					}
+
 					if (num24 > 0)
 					{
 						object obj = text2;
 						text2 = string.Concat(new object[]
-							{
-								obj,
+						{
+							obj,
 								num24,
 								" ",
 								Lang.inter[18],
 								" "
-							});
-					}
+						});
+					}
+
 					if (!Main.toolTip.buy)
 					{
 						array[num4] = Lang.tip[49] + " " + text2;
@@ -14987,6 +_,8 @@
 					{
 						array[num4] = Lang.tip[50] + " " + text2;
 					}
+
+					tooltipNames[num4] = "Price";
 					num4++;
 					if (num21 > 0)
 					{
@@ -15008,31 +_,43 @@
 				else if (Main.toolTip.type != 3817)
 				{
 					array[num4] = Lang.tip[51];
+					tooltipNames[num4] = "Price";
 					num4++;
 					color = new Microsoft.Xna.Framework.Color((int)((byte)(120f * num20)), (int)((byte)(120f * num20)), (int)((byte)(120f * num20)), a);
 				}
 			}
+
 			Vector2 zero = Vector2.Zero;
+			Microsoft.Xna.Framework.Color?[] overrideColor;
+			ItemLoader.ModifyTooltips(Main.toolTip, ref num4, tooltipNames, ref array,
+				ref array2, ref array3, ref num, out overrideColor);
 			int num26 = 0;
 			for (int j = 0; j < num4; j++)
 			{
+				/*
 				Vector2 vector = Main.fontMouseText.MeasureString(array[j]);
+				*/
+				Vector2 vector = ChatManager.GetStringSize(Main.fontMouseText, array[j], Vector2.One);
 				if (vector.X > zero.X)
 				{
 					zero.X = vector.X;
 				}
+
 				zero.Y += vector.Y + (float)num26;
 			}
+
 			X += Main.toolTipDistance;
 			Y += Main.toolTipDistance;
 			if ((float)X + zero.X + 4f > (float)Main.screenWidth)
 			{
 				X = (int)((float)Main.screenWidth - zero.X - 4f);
 			}
+
 			if ((float)Y + zero.Y + 4f > (float)Main.screenHeight)
 			{
 				Y = (int)((float)Main.screenHeight - zero.Y - 4f);
 			}
+
 			int num27 = 0;
 			num19 = (float)Main.mouseTextColor / 255f;
 			for (int k = 0; k < num4; k++)
@@ -15155,8 +_,15 @@
 					{
 						baseColor = color;
 					}
+
+					if (overrideColor[k].HasValue)
+					{
+						baseColor = overrideColor[k].Value * num20;
+					}
+
 					ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, Main.fontMouseText, array[k], new Vector2((float)X, (float)(Y + num27)), baseColor, 0f, Vector2.Zero, Vector2.One, -1f, 2f);
 				}
+
 				num27 += (int)(Main.fontMouseText.MeasureString(array[k]).Y + (float)num26);
 			}
 		}
@@ -15170,7 +_,7 @@
 			if (Main.bannerMouseOver)
 			{
 				int num = 0;
-				for (int i = 0; i < 267; i++)
+				for (int i = 0; i < NPCLoader.NPCCount; i++)
 				{
 					if (Item.BannerToNPC(i) != 0 && Main.player[Main.myPlayer].NPCBannerBuff[i])
 					{
@@ -15186,22 +_,27 @@
 							num2 += 260;
 							num3 -= num4 * 20;
 						}
+
 						if (num > num4 * 2)
 						{
 							num5++;
 							num2 += 260;
 							num3 -= num4 * 20;
 						}
+
 						if (num > num4 * 3)
 						{
 							num5++;
 							num2 += 260;
 							num3 -= num4 * 20;
 						}
+
 						list.Add(new Vector2((float)(num2 - 260 * num5), (float)num3) + value - p.ToVector2());
 					}
 				}
 			}
+
+			BuffLoader.CustomBuffTipSize(Main.buffString, list);
 			Vector2 zero = Vector2.Zero;
 			foreach (Vector2 current in list)
 			{
@@ -15247,12 +_,14 @@
 				{
 					black = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
 				}
+
 				Main.spriteBatch.DrawString(Main.fontMouseText, Main.buffString, new Vector2((float)num6, (float)num7), black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 			}
+
 			if (Main.bannerMouseOver)
 			{
 				int num8 = 0;
-				for (int k = 0; k < 267; k++)
+				for (int k = 0; k < NPCLoader.NPCCount; k++)
 				{
 					if (Item.BannerToNPC(k) != 0 && Main.player[Main.myPlayer].NPCBannerBuff[k])
 					{
@@ -15299,11 +_,15 @@
 								float num12 = (float)Main.mouseTextColor / 255f;
 								black2 = new Microsoft.Xna.Framework.Color((int)((byte)(80f * num12)), (int)((byte)(255f * num12)), (int)((byte)(120f * num12)), (int)Main.mouseTextColor);
 							}
+
 							Main.spriteBatch.DrawString(Main.fontMouseText, Lang.npcName(Item.BannerToNPC(k), false), new Vector2((float)num9, (float)num10), black2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 						}
 					}
 				}
 			}
+
+			BuffLoader.DrawCustomBuffTip(Main.buffString, Main.spriteBatch,
+					X, Y + (int)Main.fontMouseText.MeasureString(Main.buffString).Y);
 		}
 
 		protected void DrawFPS()
@@ -15314,26 +_,27 @@
 				string text = string.Concat(Main.frameRate);
 				object obj = text;
 				text = string.Concat(new object[]
-					{
-						obj,
+				{
+					obj,
 						" (",
 						Liquid.numLiquid + LiquidBuffer.numLiquidBuffer,
 						")"
-					});
+				});
 				object obj2 = text;
 				text = string.Concat(new object[]
-					{
-						obj2,
+				{
+					obj2,
 						" (",
 						(int)(Main.gfxQuality * 100f),
 						"%)"
-					});
+				});
 				string text2 = text + " " + Main.debugWords;
 				int num = 4;
 				if (!Main.gameMenu)
 				{
 					num = Main.screenHeight - 24;
 				}
+
 				Vector2 position = new Vector2(4f, (float)num);
 				Vector2 origin = new Vector2(0f, 0f);
 				Vector2 vector = Main.fontMouseText.MeasureString(text2);
@@ -15548,13 +_,16 @@
 					if (j == 809)
 					{
 					}
+
 					Tile tile = Main.tile[j, i];
+					//patch file: j, i
 					if (tile == null)
 					{
 						tile = new Tile();
 						Main.tile[j, i] = tile;
 						Main.mapTime += 60;
 					}
+
 					ushort type = tile.type;
 					short num9 = tile.frameX;
 					short num10 = tile.frameY;
@@ -15595,6 +_,8 @@
 						{
 							effects = SpriteEffects.FlipHorizontally;
 						}
+
+						TileLoader.SetSpriteEffects(j, i, type, ref effects);
 						Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
 						int num11 = 0;
 						int num12 = 16;
@@ -15757,12 +_,15 @@
 								num12 = 18;
 							}
 						}
+
 						if (type == 410 && num10 == 36)
 						{
 							num12 = 18;
 						}
+
 						if (type == 227)
 						{
+							//patch file: num8, num12
 							num8 = 32;
 							num12 = 38;
 							if (num9 == 238)
@@ -15816,85 +_,104 @@
 								num11 = -2;
 							}
 						}
+
 						if (type == 28)
 						{
 							num11 += 2;
 						}
+
 						if (type == 81)
 						{
 							num11 -= 8;
 							num12 = 26;
 							num8 = 24;
 						}
+
 						if (type == 105)
 						{
 							num11 = 2;
 						}
+
 						if (type == 124)
 						{
 							num12 = 18;
 						}
+
 						if (type == 137)
 						{
 							num12 = 18;
 						}
+
 						if (type == 138)
 						{
 							num12 = 18;
 						}
+
 						if (type == 139 || type == 142 || type == 143)
 						{
 							num11 = 2;
 						}
+
+						TileLoader.SetDrawPositions(j, i, ref num8, ref num11, ref num12);
 						int num14 = 0;
 						if (tile.halfBrick())
 						{
 							num14 = 8;
 						}
+
 						int num15 = Main.tileFrame[(int)type] * 38;
 						int num16 = 0;
 						if (type == 272)
 						{
 							num15 = 0;
 						}
+
 						if (type == 106)
 						{
 							num15 = Main.tileFrame[(int)type] * 54;
 						}
+
 						if (type >= 300 && type <= 308)
 						{
 							num15 = Main.tileFrame[(int)type] * 54;
 							num11 = 2;
 						}
+
 						if (type == 354)
 						{
 							num15 = Main.tileFrame[(int)type] * 54;
 							num11 = 2;
 						}
+
 						if (type == 355)
 						{
 							num15 = Main.tileFrame[(int)type] * 54;
 							num11 = 2;
 						}
+
 						if (type == 377)
 						{
 							num15 = Main.tileFrame[(int)type] * 38;
 							num11 = 2;
 						}
+
 						if (type == 463)
 						{
 							num15 = Main.tileFrame[(int)type] * 72;
 							num11 = 2;
 						}
+
 						if (type == 464)
 						{
 							num15 = Main.tileFrame[(int)type] * 72;
 							num11 = 2;
 						}
+
 						if (type == 379)
 						{
 							num15 = Main.tileFrame[(int)type] * 90;
 						}
+
 						if (type == 349)
 						{
 							int num17 = (int)(num9 % 36);
@@ -16106,17 +_,18 @@
 							{
 								case 1:
 									num11 = -4;
-									break;
+								break;
 								case 2:
 									num11 = -2;
-									num8 = 24;
-									break;
+								num8 = 24;
+								break;
 								case 3:
 									num11 = -2;
-									num8 = 16;
-									break;
-							}
-						}
+								num8 = 16;
+								break;
+							}
+						}
+
 						if (TileID.Sets.TeamTiles[(int)type])
 						{
 							if (TileID.Sets.Platforms[(int)type])
@@ -16128,6 +_,14 @@
 								num15 += 90;
 							}
 						}
+
+						TileLoader.SetAnimationFrame(type, j, i, ref num16, ref num15);
+						if (!TileLoader.PreDraw(j, i, type, Main.spriteBatch))
+						{
+							TileLoader.PostDraw(j, i, type, Main.spriteBatch);
+							continue;
+						}
+
 						if (type == 373 || type == 374 || type == 375 || type == 461)
 						{
 							int num33 = 60;
@@ -16165,19 +_,27 @@
 									if (Main.waterStyle > 1)
 									{
 										num34 = 706 + Main.waterStyle - 1;
+										if (Main.waterStyle >= WaterStyleLoader.vanillaWaterCount)
+										{
+											num34 = WaterStyleLoader.GetWaterStyle(Main.waterStyle).GetDropletGore();
+										}
 									}
+
 									if (type == 374)
 									{
 										num34 = 716;
 									}
+
 									if (type == 375)
 									{
 										num34 = 717;
 									}
+
 									if (type == 461)
 									{
 										num34 = 943;
 									}
+
 									if (num34 != 943 || Main.rand.Next(3) == 0)
 									{
 										int num35 = Gore.NewGore(position, default(Vector2), num34, 1f);
@@ -16355,33 +_,38 @@
 									switch (num48)
 									{
 										case 10:
+										{
+											int num49 = (int)(num10 / 54);
+											if (num49 == 32)
 											{
-												int num49 = (int)(num10 / 54);
-												if (num49 == 32)
-												{
-													texture2D = Main.glowMaskTexture[57];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
-													color2 = color3;
-												}
-												break;
+												texture2D = Main.glowMaskTexture[57];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
+												color2 = color3;
 											}
+
+											break;
+										}
+
 										case 11:
+										{
+											int num49 = (int)(num10 / 54);
+											if (num49 == 32)
 											{
-												int num49 = (int)(num10 / 54);
-												if (num49 == 32)
-												{
-													texture2D = Main.glowMaskTexture[58];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
-													color2 = color3;
-												}
-												if (num49 == 33)
-												{
-													texture2D = Main.glowMaskTexture[119];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
-													color2 = color4;
-												}
-												break;
+												texture2D = Main.glowMaskTexture[58];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
+												color2 = color3;
 											}
+
+											if (num49 == 33)
+											{
+												texture2D = Main.glowMaskTexture[119];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
+												color2 = color4;
+											}
+
+											break;
+										}
+
 										case 12:
 										case 13:
 										case 16:
@@ -16389,119 +_,137 @@
 										case 20:
 											break;
 										case 14:
+										{
+											int num49 = (int)(num9 / 54);
+											if (num49 == 31)
 											{
-												int num49 = (int)(num9 / 54);
-												if (num49 == 31)
+												texture2D = Main.glowMaskTexture[67];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
+												color2 = color3;
+											}
+
+											if (num49 == 32)
+											{
+												texture2D = Main.glowMaskTexture[124];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
+												color2 = color4;
+											}
+
+											break;
+										}
+
+										case 15:
+										{
+											int num49 = (int)(num10 / 40);
+											if (num49 == 32)
+											{
+												texture2D = Main.glowMaskTexture[54];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 40), num8, num12);
+												color2 = color3;
+											}
+
+											if (num49 == 33)
+											{
+												texture2D = Main.glowMaskTexture[116];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 40), num8, num12);
+												color2 = color4;
+											}
+
+											break;
+										}
+
+										case 18:
+										{
+											int num49 = (int)(num9 / 36);
+											if (num49 == 27)
+											{
+												texture2D = Main.glowMaskTexture[69];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
+												color2 = color3;
+											}
+
+											if (num49 == 28)
+											{
+												texture2D = Main.glowMaskTexture[125];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
+												color2 = color4;
+											}
+
+											break;
+										}
+
+										case 19:
+										{
+											int num49 = (int)(num10 / 18);
+											if (num49 == 26)
+											{
+												texture2D = Main.glowMaskTexture[65];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 18), num8, num12);
+												color2 = color3;
+											}
+
+											if (num49 == 27)
+											{
+												texture2D = Main.glowMaskTexture[112];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 18), num8, num12);
+												color2 = color4;
+											}
+
+											break;
+										}
+
+										case 21:
+										{
+											int num49 = (int)(num9 / 36);
+											if (num49 == 48)
+											{
+												texture2D = Main.glowMaskTexture[56];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
+												color2 = color3;
+											}
+
+											if (num49 == 49)
+											{
+												texture2D = Main.glowMaskTexture[117];
+												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
+												color2 = color4;
+											}
+
+											break;
+										}
+
+										default:
+											switch (num48)
+										{
+											case 33:
+													if (num9 / 18 == 0)
+											{
+												int num49 = (int)(num10 / 22);
+												if (num49 == 26)
 												{
-													texture2D = Main.glowMaskTexture[67];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
+													texture2D = Main.glowMaskTexture[61];
+													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 22), num8, num12);
 													color2 = color3;
 												}
-												if (num49 == 32)
+											}
+
+											break;
+											case 34:
+													if (num9 / 54 == 0)
+											{
+												int num49 = (int)(num10 / 54);
+												if (num49 == 33)
 												{
-													texture2D = Main.glowMaskTexture[124];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
-													color2 = color4;
-												}
-												break;
-											}
-										case 15:
-											{
-												int num49 = (int)(num10 / 40);
-												if (num49 == 32)
-												{
-													texture2D = Main.glowMaskTexture[54];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 40), num8, num12);
+													texture2D = Main.glowMaskTexture[55];
+													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
 													color2 = color3;
 												}
-												if (num49 == 33)
-												{
-													texture2D = Main.glowMaskTexture[116];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 40), num8, num12);
-													color2 = color4;
-												}
-												break;
 											}
-										case 18:
-											{
-												int num49 = (int)(num9 / 36);
-												if (num49 == 27)
-												{
-													texture2D = Main.glowMaskTexture[69];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
-													color2 = color3;
-												}
-												if (num49 == 28)
-												{
-													texture2D = Main.glowMaskTexture[125];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
-													color2 = color4;
-												}
-												break;
-											}
-										case 19:
-											{
-												int num49 = (int)(num10 / 18);
-												if (num49 == 26)
-												{
-													texture2D = Main.glowMaskTexture[65];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 18), num8, num12);
-													color2 = color3;
-												}
-												if (num49 == 27)
-												{
-													texture2D = Main.glowMaskTexture[112];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 18), num8, num12);
-													color2 = color4;
-												}
-												break;
-											}
-										case 21:
-											{
-												int num49 = (int)(num9 / 36);
-												if (num49 == 48)
-												{
-													texture2D = Main.glowMaskTexture[56];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
-													color2 = color3;
-												}
-												if (num49 == 49)
-												{
-													texture2D = Main.glowMaskTexture[117];
-													empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
-													color2 = color4;
-												}
-												break;
-											}
-										default:
-											switch (num48)
-											{
-												case 33:
-													if (num9 / 18 == 0)
-													{
-														int num49 = (int)(num10 / 22);
-														if (num49 == 26)
-														{
-															texture2D = Main.glowMaskTexture[61];
-															empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 22), num8, num12);
-															color2 = color3;
-														}
-													}
-													break;
-												case 34:
-													if (num9 / 54 == 0)
-													{
-														int num49 = (int)(num10 / 54);
-														if (num49 == 33)
-														{
-															texture2D = Main.glowMaskTexture[55];
-															empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
-															color2 = color3;
-														}
-													}
-													break;
-											}
+
 											break;
+										}
+
+										break;
 									}
 								}
 								else if (num48 != 42)
@@ -16511,84 +_,97 @@
 										switch (num48)
 										{
 											case 87:
+											{
+												int num49 = (int)(num9 / 54);
+												if (num49 == 26)
 												{
-													int num49 = (int)(num9 / 54);
-													if (num49 == 26)
-													{
-														texture2D = Main.glowMaskTexture[64];
-														empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
-														color2 = color3;
-													}
-													if (num49 == 27)
-													{
-														texture2D = Main.glowMaskTexture[121];
-														empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
-														color2 = color4;
-													}
-													break;
+													texture2D = Main.glowMaskTexture[64];
+													empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
+													color2 = color3;
 												}
+
+												if (num49 == 27)
+												{
+													texture2D = Main.glowMaskTexture[121];
+													empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
+													color2 = color4;
+												}
+
+												break;
+											}
+
 											case 88:
+											{
+												int num49 = (int)(num9 / 54);
+												if (num49 == 24)
 												{
-													int num49 = (int)(num9 / 54);
-													if (num49 == 24)
-													{
-														texture2D = Main.glowMaskTexture[59];
-														empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
-														color2 = color3;
-													}
-													if (num49 == 25)
-													{
-														texture2D = Main.glowMaskTexture[120];
-														empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
-														color2 = color4;
-													}
-													break;
+													texture2D = Main.glowMaskTexture[59];
+													empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
+													color2 = color3;
 												}
+
+												if (num49 == 25)
+												{
+													texture2D = Main.glowMaskTexture[120];
+													empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
+													color2 = color4;
+												}
+
+												break;
+											}
+
 											case 89:
+											{
+												int num49 = (int)(num9 / 54);
+												if (num49 == 29)
 												{
-													int num49 = (int)(num9 / 54);
-													if (num49 == 29)
-													{
-														texture2D = Main.glowMaskTexture[66];
-														empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
-														color2 = color3;
-													}
-													if (num49 == 30)
-													{
-														texture2D = Main.glowMaskTexture[123];
-														empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
-														color2 = color4;
-													}
-													break;
+													texture2D = Main.glowMaskTexture[66];
+													empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
+													color2 = color3;
 												}
+
+												if (num49 == 30)
+												{
+													texture2D = Main.glowMaskTexture[123];
+													empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
+													color2 = color4;
+												}
+
+												break;
+											}
+
 											case 90:
+											{
+												int num49 = (int)(num10 / 36);
+												if (num49 == 27)
 												{
-													int num49 = (int)(num10 / 36);
-													if (num49 == 27)
-													{
-														texture2D = Main.glowMaskTexture[52];
-														empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 36), num8, num12);
-														color2 = color3;
-													}
-													if (num49 == 28)
-													{
-														texture2D = Main.glowMaskTexture[113];
-														empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 36), num8, num12);
-														color2 = color4;
-													}
-													break;
+													texture2D = Main.glowMaskTexture[52];
+													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 36), num8, num12);
+													color2 = color3;
 												}
+
+												if (num49 == 28)
+												{
+													texture2D = Main.glowMaskTexture[113];
+													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 36), num8, num12);
+													color2 = color4;
+												}
+
+												break;
+											}
+
 											case 93:
+											{
+												int num49 = (int)(num9 / 54);
+												if (num49 == 27)
 												{
-													int num49 = (int)(num9 / 54);
-													if (num49 == 27)
-													{
-														texture2D = Main.glowMaskTexture[62];
-														empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
-														color2 = color3;
-													}
-													break;
+													texture2D = Main.glowMaskTexture[62];
+													empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 54), num8, num12);
+													color2 = color3;
 												}
+
+												break;
+											}
 										}
 									}
 									else
@@ -16625,71 +_,80 @@
 								{
 									case 100:
 										if (num9 / 36 == 0)
+									{
+										int num49 = (int)(num10 / 36);
+										if (num49 == 27)
 										{
-											int num49 = (int)(num10 / 36);
-											if (num49 == 27)
-											{
-												texture2D = Main.glowMaskTexture[68];
-												empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 36), num8, num12);
-												color2 = color3;
-											}
+											texture2D = Main.glowMaskTexture[68];
+											empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 36), num8, num12);
+											color2 = color3;
 										}
+									}
+
+									break;
+									case 101:
+									{
+										int num49 = (int)(num9 / 54);
+										if (num49 == 28)
+										{
+											texture2D = Main.glowMaskTexture[60];
+											empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
+											color2 = color3;
+										}
+
+										if (num49 == 29)
+										{
+											texture2D = Main.glowMaskTexture[115];
+											empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
+											color2 = color4;
+										}
+
 										break;
-									case 101:
-										{
-											int num49 = (int)(num9 / 54);
-											if (num49 == 28)
-											{
-												texture2D = Main.glowMaskTexture[60];
-												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
-												color2 = color3;
-											}
-											if (num49 == 29)
-											{
-												texture2D = Main.glowMaskTexture[115];
-												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 54), (int)num10, num8, num12);
-												color2 = color4;
-											}
-											break;
-										}
+									}
+
 									case 102:
 									case 103:
 										break;
 									case 104:
+									{
+										int num49 = (int)(num9 / 36);
+										if (num49 == 24)
 										{
-											int num49 = (int)(num9 / 36);
-											if (num49 == 24)
-											{
-												texture2D = Main.glowMaskTexture[51];
-												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
-												color2 = color3;
-											}
-											if (num49 == 25)
-											{
-												texture2D = Main.glowMaskTexture[118];
-												empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
-												color2 = color4;
-											}
-											break;
+											texture2D = Main.glowMaskTexture[51];
+											empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
+											color2 = color3;
 										}
+
+										if (num49 == 25)
+										{
+											texture2D = Main.glowMaskTexture[118];
+											empty = new Microsoft.Xna.Framework.Rectangle((int)(num9 % 36), (int)num10, num8, num12);
+											color2 = color4;
+										}
+
+										break;
+									}
+
 									default:
 										if (num48 == 172)
+									{
+										int num49 = (int)(num10 / 38);
+										if (num49 == 28)
 										{
-											int num49 = (int)(num10 / 38);
-											if (num49 == 28)
-											{
-												texture2D = Main.glowMaskTexture[88];
-												empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 38), num8, num12);
-												color2 = color3;
-											}
-											if (num49 == 29)
-											{
-												texture2D = Main.glowMaskTexture[122];
-												empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 38), num8, num12);
-												color2 = color4;
-											}
+											texture2D = Main.glowMaskTexture[88];
+											empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 38), num8, num12);
+											color2 = color3;
 										}
-										break;
+
+										if (num49 == 29)
+										{
+											texture2D = Main.glowMaskTexture[122];
+											empty = new Microsoft.Xna.Framework.Rectangle((int)num9, (int)(num10 % 38), num8, num12);
+											color2 = color4;
+										}
+									}
+
+									break;
 								}
 							}
 							else if (num48 != 184)
@@ -16760,25 +_,31 @@
 									{
 										flag4 = (flag4 || type == 37 || type == 58 || type == 76);
 									}
+
 									if (!Main.player[Main.myPlayer].iceSkate)
 									{
 										flag4 = (flag4 || type == 162);
 									}
 								}
+
+								flag4 = flag4 || TileLoader.Dangersense(j, i, type, Main.player[Main.myPlayer]);
 								if (flag4)
 								{
 									if (color.R < 255)
 									{
 										color.R = 255;
 									}
+
 									if (color.G < 50)
 									{
 										color.G = 50;
 									}
+
 									if (color.B < 50)
 									{
 										color.B = 50;
 									}
+
 									color.A = Main.mouseTextColor;
 									if (!Main.gamePaused && base.IsActive && Main.rand.Next(30) == 0)
 									{
@@ -17055,8 +_,9 @@
 												goto IL_2EEE;
 											case 20:
 												num66 = 59;
-												goto IL_2EFC;
+											goto IL_2EFC;
 										}
+
 										num66 = -1;
 										IL_2EFC:
 										if (num66 != -1)
@@ -17097,7 +_,7 @@
 											case 15:
 											case 16:
 												num69 = 6;
-												break;
+											break;
 											case 1:
 											case 3:
 											case 4:
@@ -17111,10 +_,11 @@
 												goto IL_3043;
 											case 20:
 												num69 = 59;
-												break;
+											break;
 											default:
 												goto IL_3043;
 										}
+
 										IL_3046:
 										if (num69 != -1)
 										{
@@ -17230,22 +_,25 @@
 												goto IL_348C;
 											default:
 												switch (num65)
-												{
-													case 19:
+											{
+												case 19:
 													case 21:
 														goto IL_3481;
-													case 20:
+												case 20:
 														goto IL_348C;
-													default:
+												default:
 														if (num65 != 25)
-														{
-															goto IL_348C;
-														}
-														num77 = 59;
-														break;
+												{
+													goto IL_348C;
 												}
+
+												num77 = 59;
 												break;
+											}
+
+											break;
 										}
+
 										IL_348F:
 										if (num77 != -1)
 										{
@@ -17466,38 +_,47 @@
 												{
 													white = new Microsoft.Xna.Framework.Color(0, 0, 255, 255);
 												}
+
 												if (type == 64)
 												{
 													white = new Microsoft.Xna.Framework.Color(255, 0, 0, 255);
 												}
+
 												if (type == 65)
 												{
 													white = new Microsoft.Xna.Framework.Color(0, 255, 0, 255);
 												}
+
 												if (type == 66)
 												{
 													white = new Microsoft.Xna.Framework.Color(255, 255, 0, 255);
 												}
+
 												if (type == 67)
 												{
 													white = new Microsoft.Xna.Framework.Color(255, 0, 255, 255);
 												}
+
 												if (type == 68)
 												{
 													white = new Microsoft.Xna.Framework.Color(255, 255, 255, 255);
 												}
+
 												if (type == 12)
 												{
 													white = new Microsoft.Xna.Framework.Color(255, 0, 0, 255);
 												}
+
 												if (type == 204)
 												{
 													white = new Microsoft.Xna.Framework.Color(255, 0, 0, 255);
 												}
+
 												if (type == 211)
 												{
 													white = new Microsoft.Xna.Framework.Color(50, 255, 100, 255);
 												}
+												// TODO, ModTile hook for Shine color.
 												int num90 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 43, 0f, 0f, 254, white, 0.5f);
 												Main.dust[num90].velocity *= 0f;
 											}
@@ -17505,21 +_,25 @@
 									}
 								}
 							}
-							if (type == 21)
+
+							if (TileLoader.IsChest(type))
 							{
 								Microsoft.Xna.Framework.Point key = new Microsoft.Xna.Framework.Point(j, i);
 								if (num9 % 36 != 0)
 								{
 									key.X--;
 								}
+
 								if (num10 % 36 != 0)
 								{
 									key.Y--;
 								}
+
 								if (!dictionary.ContainsKey(key))
 								{
 									dictionary[key] = Chest.FindChest(key.X, key.Y);
 								}
+
 								int num91 = (int)(num9 / 18);
 								int num92 = (int)(num10 / 18);
 								int num93 = (int)(num9 / 36);
@@ -17631,22 +_,25 @@
 														break;
 													default:
 														switch (num65)
-														{
-															case 58:
+													{
+														case 58:
 															case 59:
 															case 60:
 															case 61:
 															case 62:
 															case 63:
 																break;
-															default:
+														default:
 																goto IL_4404;
-														}
-														break;
+													}
+
+													break;
 												}
 											}
+
 											flag6 = true;
 										}
+
 										IL_4404:
 										if (!flag6)
 										{
@@ -17748,8 +_,11 @@
 								{
 									num104 = 2;
 								}
+
 								Main.spriteBatch.Draw(Main.shroomCapTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X - 22), (float)(i * 16 - (int)Main.screenPosition.Y - 26)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num104 * 62, 0, 60, 42)), Lighting.GetColor(j, i), 0f, default(Vector2), 1f, effects, 0f);
 							}
+
+							TileLoader.DrawEffects(j, i, type, Main.spriteBatch, ref color, ref num3);
 							if (color.R >= 1 || color.G >= 1 || color.B >= 1)
 							{
 								Tile tile2 = Main.tile[j + 1, i];
@@ -17804,19 +_,21 @@
 											{
 												case 0:
 													flag12 = true;
-													break;
+												break;
 												case 1:
 													num107 = 1;
-													break;
+												break;
 												case 2:
 													num107 = 11;
-													break;
+												break;
 											}
+
 											if ((int)tile3.liquid > num106)
 											{
 												num106 = (int)tile3.liquid;
 											}
 										}
+
 										if (tile2.liquid > 0 && num108 != 2 && num108 != 4)
 										{
 											flag9 = true;
@@ -17824,19 +_,21 @@
 											{
 												case 0:
 													flag12 = true;
-													break;
+												break;
 												case 1:
 													num107 = 1;
-													break;
+												break;
 												case 2:
 													num107 = 11;
-													break;
+												break;
 											}
+
 											if ((int)tile2.liquid > num106)
 											{
 												num106 = (int)tile2.liquid;
 											}
 										}
+
 										if (tile4.liquid > 0 && num108 != 3 && num108 != 4)
 										{
 											flag10 = true;
@@ -17844,42 +_,47 @@
 											{
 												case 0:
 													flag12 = true;
-													break;
+												break;
 												case 1:
 													num107 = 1;
-													break;
+												break;
 												case 2:
 													num107 = 11;
-													break;
+												break;
 											}
 										}
+
 										if (tile5.liquid > 0 && num108 != 1 && num108 != 2)
 										{
 											if (tile5.liquid > 240)
 											{
 												flag11 = true;
 											}
+
 											switch (tile5.liquidType())
 											{
 												case 0:
 													flag12 = true;
-													break;
+												break;
 												case 1:
 													num107 = 1;
-													break;
+												break;
 												case 2:
 													num107 = 11;
-													break;
+												break;
 											}
 										}
+
 										if (waterStyleOverride != -1)
 										{
 											Main.waterStyle = waterStyleOverride;
 										}
+
 										if (num107 == 0)
 										{
 											num107 = Main.waterStyle;
 										}
+
 										if ((flag10 || flag11 || flag8 || flag9) && (!flag12 || num107 != 1))
 										{
 											Microsoft.Xna.Framework.Color color6 = Lighting.GetColor(j, i);
@@ -18544,6 +_,7 @@
 									bool flag13 = false;
 									bool flag14 = false;
 									bool flag15 = false;
+									Texture2D modCactusTexture = null;
 									if (!Main.canDrawColorTile(j, i))
 									{
 										int num166 = j;
@@ -18566,38 +_,52 @@
 												num166++;
 											}
 										}
+
 										int num167 = i;
 										bool flag16 = false;
 										if (Main.tile[num166, num167].type == 80 && Main.tile[num166, num167].active())
 										{
 											flag16 = true;
 										}
+
 										while (!Main.tile[num166, num167].active() || !Main.tileSolid[(int)Main.tile[num166, num167].type] || !flag16)
 										{
 											if (Main.tile[num166, num167].type == 80 && Main.tile[num166, num167].active())
 											{
 												flag16 = true;
 											}
+
 											num167++;
 											if (num167 > i + 20)
 											{
 												break;
 											}
 										}
+
 										if (Main.tile[num166, num167].type == 112)
 										{
 											flag13 = true;
 										}
+
 										if (Main.tile[num166, num167].type == 116)
 										{
 											flag14 = true;
 										}
+
+										//patch file: num166, num167
 										if (Main.tile[num166, num167].type == 234)
 										{
 											flag15 = true;
 										}
+
+										modCactusTexture = TileLoader.GetCactusTexture(Main.tile[num166, num167].type);
 									}
-									if (flag13)
+
+									if (modCactusTexture != null)
+									{
+										Main.spriteBatch.Draw(modCactusTexture, new Vector2(j * 16 - (int)Main.screenPosition.X - ((float)num8 - 16f) / 2f, i * 16 - (int)Main.screenPosition.Y + num11) + zero, new Microsoft.Xna.Framework.Rectangle(num9, num10, num8, num12), color, 0f, default(Vector2), 1f, effects, 0f);
+									}
+									else if (flag13)
 									{
 										Main.spriteBatch.Draw(Main.evilCactusTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
 									}
@@ -18746,40 +_,41 @@
 												{
 													case 1:
 														width = 8;
-														num170 = 4;
-														break;
+													num170 = 4;
+													break;
 													case 2:
 														num170 = 12;
-														break;
+													break;
 													case 3:
 														height6 = 8;
-														num171 = 4;
-														break;
+													num171 = 4;
+													break;
 													case 4:
 														width = 8;
-														height6 = 8;
-														num170 = 4;
-														num171 = 4;
-														break;
+													height6 = 8;
+													num170 = 4;
+													num171 = 4;
+													break;
 													case 5:
 														num170 = 12;
-														num171 = 4;
-														height6 = 8;
-														break;
+													num171 = 4;
+													height6 = 8;
+													break;
 													case 6:
 														num171 = 12;
-														break;
+													break;
 													case 7:
 														width = 8;
-														height6 = 4;
-														num170 = 4;
-														num171 = 12;
-														break;
+													height6 = 4;
+													num170 = 4;
+													num171 = 12;
+													break;
 													case 8:
 														num170 = 12;
-														num171 = 12;
-														break;
+													num171 = 12;
+													break;
 												}
+
 												Microsoft.Xna.Framework.Color color11 = color;
 												Microsoft.Xna.Framework.Color color12 = array[num169];
 												color11.R = (byte)((color.R + color12.R) / 2);
@@ -18818,15 +_,16 @@
 												{
 													case 1:
 														num173 = 8;
-														break;
+													break;
 													case 2:
 														num174 = 8;
-														break;
+													break;
 													case 3:
 														num173 = 8;
-														num174 = 8;
-														break;
+													num174 = 8;
+													break;
 												}
+
 												Microsoft.Xna.Framework.Color color13 = color;
 												Microsoft.Xna.Framework.Color color14 = array[num172];
 												color13.R = (byte)((color.R + color14.R) / 2);
@@ -18916,27 +_,38 @@
 											{
 												num178++;
 											}
+
 											if (num9 == 88 && num10 >= 66 && num10 <= 110)
 											{
 												num178--;
 											}
+
 											if (num9 == 22 && num10 >= 132)
 											{
 												num178--;
 											}
+
 											if (num9 == 44 && num10 >= 132)
 											{
 												num178++;
 											}
+
 											while (Main.tile[num178, num179].active() && Main.tile[num178, num179].type == 5)
 											{
 												num179++;
 											}
+
 											int treeVariant = Main.GetTreeVariant(num178, num179);
-											if (treeVariant == -1)
+											Texture2D modTreeTexture = TileLoader.GetTreeTexture(Main.tile[num178, num179]);
+											if (modTreeTexture != null)
+											{
+												Main.spriteBatch.Draw(modTreeTexture, new Vector2(j * 16 - (int)Main.screenPosition.X - (num8 - 16f) / 2f, i * 16 - (int)Main.screenPosition.Y + num11) + zero, new Microsoft.Xna.Framework.Rectangle(num9, num10, num8, num12), color, 0f, default(Vector2), 1f, effects, 0f);
+											}
+											else if (treeVariant == -1)
 											{
 												if (Main.canDrawColorTile(j, i))
 												{
+													//patch file
 													Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
 												}
 												else
@@ -18962,25 +_,36 @@
 											{
 												num182++;
 											}
+
 											if (Main.tile[num181, num182].active() && Main.tile[num181, num182].type == 53)
 											{
 												num180 = 0;
 											}
+
 											if (Main.tile[num181, num182].active() && Main.tile[num181, num182].type == 234)
 											{
 												num180 = 1;
 											}
+
 											if (Main.tile[num181, num182].active() && Main.tile[num181, num182].type == 116)
 											{
 												num180 = 2;
 											}
+
 											if (Main.tile[num181, num182].active() && Main.tile[num181, num182].type == 112)
 											{
+												//patch file: num181, num182
 												num180 = 3;
 											}
+
 											int y2 = 22 * num180;
 											int num183 = (int)num10;
-											if (Main.canDrawColorTile(j, i))
+											Texture2D modTreeTexture = TileLoader.GetPalmTreeTexture(Main.tile[num181, num182]);
+											if (modTreeTexture != null)
+											{
+												Main.spriteBatch.Draw(modTreeTexture, new Vector2(j * 16 - (int)Main.screenPosition.X - (num8 - 16f) / 2f + num181, i * 16 - (int)Main.screenPosition.Y + num11) + zero, new Microsoft.Xna.Framework.Rectangle(num9, y2, num8, num12), color, 0f, default(Vector2), 1f, effects, 0f);
+											}
+											else if (Main.canDrawColorTile(j, i))
 											{
 												Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num183, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, y2, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
 											}
@@ -19532,27 +_,30 @@
 										{
 											case 2:
 												value5.X = 16 - num295;
-												num296 = 16 - num295;
-												break;
+											num296 = 16 - num295;
+											break;
 											case 3:
 												value5.Width = 16 - num295;
-												break;
+											break;
 											case 4:
 												value5.Width = 14 - num295;
-												value5.X = num295 + 2;
-												num296 = num295 + 2;
-												break;
+											value5.X = num295 + 2;
+											num296 = num295 + 2;
+											break;
 										}
+
 										Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num296, (float)(i * 16 - (int)Main.screenPosition.Y + num294 * 2)) + zero, new Microsoft.Xna.Framework.Rectangle?(value5), color17, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 									}
 								}
 							}
+
 							if (texture2D != null)
 							{
 								int num297 = 0;
 								int num298 = 0;
 								Main.spriteBatch.Draw(texture2D, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num297, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num298)) + zero, new Microsoft.Xna.Framework.Rectangle?(empty), color2, 0f, default(Vector2), 1f, effects, 0f);
 							}
+
 							if (texture2D2 != null)
 							{
 								empty2 = new Microsoft.Xna.Framework.Rectangle((int)num9 + num16, (int)num10 + num15, num8, num12);
@@ -19560,14 +_,18 @@
 								int num300 = 0;
 								Main.spriteBatch.Draw(texture2D2, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num299, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num300)) + zero, new Microsoft.Xna.Framework.Rectangle?(empty2), transparent, 0f, default(Vector2), 1f, effects, 0f);
 							}
-						}
-					}
-				}
-			}
+
+							TileLoader.PostDraw(j, i, type, Main.spriteBatch);
+						}
+					}
+				}
+			}
+
 			if (solidOnly)
 			{
 				this.DrawTileCracks(1);
 			}
+
 			for (int num301 = 0; num301 < num3; num301++)
 			{
 				int num302 = Main.specX[num301];
@@ -19755,10 +_,12 @@
 					Main.spriteBatch.Draw(texture2D5, new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X), (float)(num303 * 16 - (int)Main.screenPosition.Y + 2)) + zero, new Microsoft.Xna.Framework.Rectangle?(texture2D5.Frame(1, 4, 0, num318)), value8 * (1f - num319), 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 					Main.spriteBatch.Draw(texture2D5, new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X), (float)(num303 * 16 - (int)Main.screenPosition.Y + 2)) + zero, new Microsoft.Xna.Framework.Rectangle?(texture2D5.Frame(1, 4, 0, frameY2)), value8 * num319, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 				}
+
 				try
 				{
 					if (type4 == 5 && frameY >= 198 && frameX >= 22)
 					{
+						//frame
 						int num320 = 0;
 						if (frameX == 22)
 						{
@@ -19770,29 +_,45 @@
 							{
 								num320 = 2;
 							}
+
 							int num321 = 0;
+							//frame width
 							int num322 = 80;
+							//frame height
 							int num323 = 80;
+							//x offset left
 							int num324 = 32;
+							//y offset
 							int num325 = 0;
 							int num326 = num303;
+							Texture2D modTopTextures = null;
 							while (num326 < num303 + 100)
 							{
+								modTopTextures = TileLoader.GetTreeTopTextures(Main.tile[num302, num326].type,
+									num302, num326, ref num320, ref num322, ref num323, ref num324, ref num325);
+								if (modTopTextures != null)
+								{
+									break;
+								}
+
 								if (Main.tile[num302, num326].type == 2)
 								{
 									num321 = Main.GetTreeStyle(num302);
 									break;
 								}
+
 								if (Main.tile[num302, num326].type == 23)
 								{
 									num321 = 1;
 									break;
 								}
+
 								if (Main.tile[num302, num326].type == 70)
 								{
 									num321 = 14;
 									break;
 								}
+
 								if (Main.tile[num302, num326].type == 60)
 								{
 									num321 = 2;
@@ -19874,17 +_,24 @@
 									}
 								}
 							}
+
 							if (num321 == 14)
 							{
 								float num327 = (float)Main.rand.Next(28, 42) * 0.005f;
 								num327 += (float)(270 - (int)Main.mouseTextColor) / 1000f;
 								Lighting.AddLight(num302, num303, 0.1f, 0.2f + num327 / 2f, 0.7f + num327);
 							}
-							if (tile6.color() > 0)
+
+							if (modTopTextures == null && tile6.color() > 0)
 							{
 								Main.checkTreeAlt[num321, (int)tile6.color()] = true;
 							}
-							if (tile6.color() > 0 && Main.treeAltTextureDrawn[num321, (int)tile6.color()])
+
+							if (modTopTextures != null)
+							{
+								Main.spriteBatch.Draw(modTopTextures, new Vector2(num302 * 16 - (int)Main.screenPosition.X - num324, num303 * 16 - (int)Main.screenPosition.Y - num323 + 16 + num325) + zero, new Microsoft.Xna.Framework.Rectangle(num320 * (num322 + 2), 0, num322, num323), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+							}
+							else if (tile6.color() > 0 && Main.treeAltTextureDrawn[num321, (int)tile6.color()])
 							{
 								Main.spriteBatch.Draw(Main.treeTopAltTexture[num321, (int)tile6.color()], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X - num324), (float)(num303 * 16 - (int)Main.screenPosition.Y - num323 + 16 + num325)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num320 * (num322 + 2), 0, num322, num323)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 							}
@@ -19903,25 +_,37 @@
 							{
 								num320 = 2;
 							}
+
 							int num328 = 0;
 							int num329 = num303;
+							Texture2D modBranchTextures = null;
 							while (num329 < num303 + 100)
 							{
+								modBranchTextures = TileLoader.GetTreeBranchTextures(Main.tile[num302 + 1, num329].type,
+									num302, num329, 1, ref num320);
+								if (modBranchTextures != null)
+								{
+									break;
+								}
+
 								if (Main.tile[num302 + 1, num329].type == 2)
 								{
 									num328 = Main.GetTreeStyle(num302 + 1);
 									break;
 								}
+
 								if (Main.tile[num302 + 1, num329].type == 23)
 								{
 									num328 = 1;
 									break;
 								}
+
 								if (Main.tile[num302 + 1, num329].type == 70)
 								{
 									num328 = 14;
 									break;
 								}
+
 								if (Main.tile[num302 + 1, num329].type == 60)
 								{
 									num328 = 2;
@@ -19970,17 +_,24 @@
 									}
 								}
 							}
+
 							if (num328 == 14)
 							{
 								float num330 = (float)Main.rand.Next(28, 42) * 0.005f;
 								num330 += (float)(270 - (int)Main.mouseTextColor) / 1000f;
 								Lighting.AddLight(num302, num303, 0.1f, 0.2f + num330 / 2f, 0.7f + num330);
 							}
-							if (tile6.color() > 0)
+
+							if (modBranchTextures == null && tile6.color() > 0)
 							{
 								Main.checkTreeAlt[num328, (int)tile6.color()] = true;
 							}
-							if (tile6.color() > 0 && Main.treeAltTextureDrawn[num328, (int)tile6.color()])
+
+							if (modBranchTextures != null)
+							{
+								Main.spriteBatch.Draw(modBranchTextures, new Vector2(num302 * 16 - (int)Main.screenPosition.X - 24, num303 * 16 - (int)Main.screenPosition.Y - 12) + zero, new Microsoft.Xna.Framework.Rectangle(0, num320 * 42, 40, 40), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+							}
+							else if (tile6.color() > 0 && Main.treeAltTextureDrawn[num328, (int)tile6.color()])
 							{
 								Main.spriteBatch.Draw(Main.treeBranchAltTexture[num328, (int)tile6.color()], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X - 24), (float)(num303 * 16 - (int)Main.screenPosition.Y - 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num320 * 42, 40, 40)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 							}
@@ -19999,25 +_,37 @@
 							{
 								num320 = 2;
 							}
+
 							int num331 = 0;
 							int num332 = num303;
+							Texture2D modBranchTextures = null;
 							while (num332 < num303 + 100)
 							{
+								modBranchTextures = TileLoader.GetTreeBranchTextures(Main.tile[num302 - 1, num332].type,
+									num302, num332, -1, ref num320);
+								if (modBranchTextures != null)
+								{
+									break;
+								}
+
 								if (Main.tile[num302 - 1, num332].type == 2)
 								{
 									num331 = Main.GetTreeStyle(num302 - 1);
 									break;
 								}
+
 								if (Main.tile[num302 - 1, num332].type == 23)
 								{
 									num331 = 1;
 									break;
 								}
+
 								if (Main.tile[num302 - 1, num332].type == 70)
 								{
 									num331 = 14;
 									break;
 								}
+
 								if (Main.tile[num302 - 1, num332].type == 60)
 								{
 									num331 = 2;
@@ -20066,17 +_,24 @@
 									}
 								}
 							}
+
 							if (num331 == 14)
 							{
 								float num333 = (float)Main.rand.Next(28, 42) * 0.005f;
 								num333 += (float)(270 - (int)Main.mouseTextColor) / 1000f;
 								Lighting.AddLight(num302, num303, 0.1f, 0.2f + num333 / 2f, 0.7f + num333);
 							}
-							if (tile6.color() > 0)
+
+							if (modBranchTextures == null && tile6.color() > 0)
 							{
 								Main.checkTreeAlt[num331, (int)tile6.color()] = true;
 							}
-							if (tile6.color() > 0 && Main.treeAltTextureDrawn[num331, (int)tile6.color()])
+
+							if (modBranchTextures != null)
+							{
+								Main.spriteBatch.Draw(modBranchTextures, new Vector2(num302 * 16 - (int)Main.screenPosition.X, num303 * 16 - (int)Main.screenPosition.Y - 12) + zero, new Microsoft.Xna.Framework.Rectangle(42, num320 * 42, 40, 40), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+							}
+							else if (tile6.color() > 0 && Main.treeAltTextureDrawn[num331, (int)tile6.color()])
 							{
 								Main.spriteBatch.Draw(Main.treeBranchAltTexture[num331, (int)tile6.color()], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X), (float)(num303 * 16 - (int)Main.screenPosition.Y - 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(42, num320 * 42, 40, 40)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 							}
@@ -20097,42 +_,59 @@
 						{
 							num334 = 2;
 						}
+
 						int num335 = 15;
 						int num336 = 0;
 						int num337 = 80;
 						int num338 = 80;
 						int num339 = 32;
 						int num340 = 0;
+						Texture2D modTopTextures = null;
 						for (int num341 = num303; num341 < num303 + 100; num341++)
 						{
+							modTopTextures = TileLoader.GetPalmTreeTopTextures(Main.tile[num302, num341].type);
+							if (modTopTextures != null)
+							{
+								break;
+							}
+
 							if (Main.tile[num302, num341].type == 53)
 							{
 								num336 = 0;
 								break;
 							}
+
 							if (Main.tile[num302, num341].type == 234)
 							{
 								num336 = 1;
 								break;
 							}
+
 							if (Main.tile[num302, num341].type == 116)
 							{
 								num336 = 2;
 								break;
 							}
+
 							if (Main.tile[num302, num341].type == 112)
 							{
 								num336 = 3;
 								break;
 							}
 						}
+
 						int frameY3 = (int)Main.tile[num302, num303].frameY;
 						int y3 = num336 * 82;
-						if (tile6.color() > 0)
+						if (modTopTextures == null && tile6.color() > 0)
 						{
 							Main.checkTreeAlt[num335, (int)tile6.color()] = true;
 						}
-						if (tile6.color() > 0 && Main.treeAltTextureDrawn[num335, (int)tile6.color()])
+
+						if (modTopTextures != null)
+						{
+							Main.spriteBatch.Draw(modTopTextures, new Vector2(num302 * 16 - (int)Main.screenPosition.X - num339 + frameY3, num303 * 16 - (int)Main.screenPosition.Y - num338 + 16 + num340) + zero, new Microsoft.Xna.Framework.Rectangle(num334 * (num337 + 2), y3, num337, num338), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+						}
+						else if (tile6.color() > 0 && Main.treeAltTextureDrawn[num335, (int)tile6.color()])
 						{
 							Main.spriteBatch.Draw(Main.treeTopAltTexture[num335, (int)tile6.color()], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X - num339 + frameY3), (float)(num303 * 16 - (int)Main.screenPosition.Y - num338 + 16 + num340)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num334 * (num337 + 2), y3, num337, num338)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 						}
@@ -20145,17 +_,21 @@
 				catch
 				{
 				}
-			}
+				TileLoader.SpecialDraw(type4, num302, num303, Main.spriteBatch);
+			}
+
 			if (TileObject.objectPreview.Active && Main.player[Main.myPlayer].showItemIcon && Main.placementPreview && !CaptureManager.Instance.Active)
 			{
 				this.LoadTiles((int)TileObject.objectPreview.Type);
 				TileObject.DrawPreview(Main.spriteBatch, TileObject.objectPreview, Main.screenPosition - zero);
 			}
+
 			if (solidOnly)
 			{
 				TimeLogger.DrawTime(0, stopwatch.Elapsed.TotalMilliseconds);
 				return;
 			}
+
 			TimeLogger.DrawTime(1, stopwatch.Elapsed.TotalMilliseconds);
 		}
 
@@ -20217,17 +_,20 @@
 						{
 							case 83:
 								if (type == 128)
-								{
-									num7 = 117;
-								}
-								break;
+							{
+								num7 = 117;
+							}
+
+							break;
 							case 84:
 								if (type == 128)
-								{
-									num7 = 120;
-								}
-								break;
-						}
+							{
+								num7 = 120;
+							}
+
+							break;
+						}
+
 						this.LoadArmorLegs(num7);
 						Main.spriteBatch.Draw(Main.armorLegTexture[num7], new Vector2((float)(num * 16 - (int)Main.screenPosition.X + num5), (float)(num2 * 16 - (int)Main.screenPosition.Y - 44)) + offSet, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 40, 54)), Lighting.GetColor(num, num2), 0f, default(Vector2), 1f, effects, 0f);
 					}
@@ -20242,10 +_,11 @@
 				if (Main.gore[i].active && Main.gore[i].type > 0)
 				{
 					bool flag = false;
-					if (((Main.gore[i].type >= 706 && Main.gore[i].type <= 717) || Main.gore[i].type == 943) && (Main.gore[i].frame < 7 || Main.gore[i].frame > 9))
+					if (ModGore.DrawBackGore(Main.gore[i]))
 					{
 						flag = true;
 					}
+
 					if (flag)
 					{
 						this.LoadGore(Main.gore[i].type);
@@ -20272,7 +_,7 @@
 			{
 				if (Main.gore[i].active && Main.gore[i].type > 0)
 				{
-					if (((Main.gore[i].type >= 706 && Main.gore[i].type <= 717) || Main.gore[i].type == 943) && (Main.gore[i].frame < 7 || Main.gore[i].frame > 9))
+					if (ModGore.DrawBackGore(Main.gore[i]))
 					{
 						Main.drawBackGore = true;
 					}
@@ -20293,20 +_,23 @@
 					}
 				}
 			}
+
 			TimeLogger.DetailedDrawTime(24);
 		}
 
-		protected void DrawHealthBar(float X, float Y, int Health, int MaxHealth, float alpha, float scale = 1f)
+		public void DrawHealthBar(float X, float Y, int Health, int MaxHealth, float alpha, float scale = 1f)
 		{
 			if (Health <= 0)
 			{
 				return;
 			}
+
 			float num = (float)Health / (float)MaxHealth;
 			if (num > 1f)
 			{
 				num = 1f;
 			}
+
 			int num2 = (int)(36f * num);
 			float num3 = X - 18f * scale;
 			float num4 = Y;
@@ -20502,6 +_,10 @@
 			{
 				num = 6f;
 			}
+			else if (Main.npc[i].modNPC != null)
+			{
+				num = Main.npc[i].modNPC.drawOffsetY;
+			}
 			else if (Main.npc[i].type == 153 || Main.npc[i].type == 154)
 			{
 				num = 4f;
@@ -20743,25 +_,27 @@
 									case 0:
 									default:
 										num3 = num2;
-										num4 = 0f;
-										break;
+									num4 = 0f;
+									break;
 									case 1:
 										num3 = -num2;
-										num4 = 0f;
-										break;
+									num4 = 0f;
+									break;
 									case 2:
 										num3 = 0f;
-										num4 = num2;
-										break;
+									num4 = num2;
+									break;
 									case 3:
 										num3 = 0f;
-										num4 = -num2;
-										break;
-								}
+									num4 = -num2;
+									break;
+								}
+
 								position = new Vector2(player.position.X + num3, player.position.Y + player.gfxOffY + num4);
 								this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, player.ghostFade);
 							}
 						}
+
 						if (player.armorEffectDrawOutlinesForbidden)
 						{
 							Vector2 arg_37A_0 = player.position;
@@ -20789,25 +_,27 @@
 									case 0:
 									default:
 										num6 = num5;
-										num7 = 0f;
-										break;
+									num7 = 0f;
+									break;
 									case 1:
 										num6 = -num5;
-										num7 = 0f;
-										break;
+									num7 = 0f;
+									break;
 									case 2:
 										num6 = 0f;
-										num7 = num5;
-										break;
+									num7 = num5;
+									break;
 									case 3:
 										num6 = 0f;
-										num7 = -num5;
-										break;
-								}
+									num7 = -num5;
+									break;
+								}
+
 								position = new Vector2(player.position.X + num6, player.position.Y + player.gfxOffY + num7);
 								this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, player.ghostFade);
 							}
 						}
+
 						if (player.armorEffectDrawShadowBasilisk)
 						{
 							int num8 = (int)(player.basiliskCharge * 3f);
@@ -21042,7 +_,7 @@
 			{
 				try
 				{
-					if (Main.npc[i].active && Main.npc[i].type > 0 && Main.npc[i].type < 580 && !Main.npc[i].hide)
+					if (Main.npc[i].active && Main.npc[i].type > 0 && !Main.npc[i].hide)
 					{
 						Main.npc[i].visualOffset *= 0.95f;
 						Main.npc[i].position += Main.npc[i].visualOffset;
@@ -21170,20 +_,22 @@
 			}
 		}
 
-		protected void DrawNPCCheckAlt(NPC n)
+		public void DrawNPCCheckAlt(NPC n)
 		{
 			if (NPCID.Sets.ExtraTextureCount[n.type] == 0)
 			{
 				return;
 			}
+
 			if (!Main.NPCLoaded[n.type])
 			{
 				return;
 			}
+
 			Main.npcTexture[n.type] = Main.npcAltTextures[n.type][n.altTexture];
 		}
 
-		protected void DrawNPC(int iNPCIndex, bool behindTiles)
+		public void DrawNPC(int iNPCIndex, bool behindTiles)
 		{
 			NPC nPC = Main.npc[iNPCIndex];
 			int type = nPC.type;
@@ -21833,14 +_,18 @@
 						Main.dust[num53].velocity += nPC.velocity;
 					}
 				}
+
 				num37 *= 0.8f;
 				num38 *= 0.8f;
 				color9 = Main.buffColor(color9, num37, num38, num39, a);
 			}
+
 			if (nPC.ichor)
 			{
+				//patch file: color9
 				color9 = new Microsoft.Xna.Framework.Color(255, 255, 0, 255);
 			}
+
 			if (nPC.onFrostBurn)
 			{
 				if (Main.rand.Next(4) < 3)
@@ -21873,8 +_,11 @@
 						Main.dust[num55].scale *= 0.5f;
 					}
 				}
+
 				Lighting.AddLight((int)(nPC.position.X / 16f), (int)(nPC.position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
 			}
+
+			NPCLoader.DrawEffects(nPC, ref color9);
 			if (Main.player[Main.myPlayer].detectCreature && nPC.lifeMax > 1)
 			{
 				byte b;
@@ -21892,19 +_,29 @@
 					b2 = 50;
 					b3 = 50;
 				}
+
 				if (color9.R < b)
 				{
 					color9.R = b;
 				}
+
 				if (color9.G < b2)
 				{
 					color9.G = b2;
 				}
+
 				if (color9.B < b3)
 				{
 					color9.B = b3;
 				}
 			}
+
+			if (!NPCLoader.PreDraw(Main.npc[iNPCIndex], Main.spriteBatch, color9))
+			{
+				NPCLoader.PostDraw(Main.npc[iNPCIndex], Main.spriteBatch, color9);
+				return;
+			}
+
 			if (type == 50)
 			{
 				Vector2 zero = Vector2.Zero;
@@ -22122,62 +_,62 @@
 				{
 					case 426:
 						num76 = 4;
-						scaleFactor = 4f;
-						num77 = (float)Math.Cos((double)(Main.GlobalTime % 1.2f / 1.2f * 6.28318548f)) / 2f + 0.5f;
-						color10 = Microsoft.Xna.Framework.Color.Turquoise;
-						amount = 0.5f;
-						num71 = 6;
-						num72 = 2;
-						num74 = num71;
-						break;
+					scaleFactor = 4f;
+					num77 = (float)Math.Cos((double)(Main.GlobalTime % 1.2f / 1.2f * 6.28318548f)) / 2f + 0.5f;
+					color10 = Microsoft.Xna.Framework.Color.Turquoise;
+					amount = 0.5f;
+					num71 = 6;
+					num72 = 2;
+					num74 = num71;
+					break;
 					case 427:
 						num71 = 8;
-						num72 = 2;
-						num74 = num71 * 3;
-						break;
+					num72 = 2;
+					num74 = num71 * 3;
+					break;
 					default:
 						if (num79 != 509)
-						{
-							switch (num79)
-							{
-								case 521:
+					{
+						switch (num79)
+						{
+							case 521:
 									num71 = 10;
-									num72 = 2;
-									num74 = num71;
-									num75 = 1;
-									value3 = 0.3f;
-									break;
-								case 523:
+							num72 = 2;
+							num74 = num71;
+							num75 = 1;
+							value3 = 0.3f;
+							break;
+							case 523:
 									num76 = 3;
-									scaleFactor = 10f * nPC.scale;
-									amount = 0.5f;
-									amount2 = 0.8f;
-									color10 = Microsoft.Xna.Framework.Color.HotPink;
-									color10.A = 128;
-									num78 = nPC.localAI[0];
-									num77 = nPC.localAI[1];
-									break;
-								case 541:
+							scaleFactor = 10f * nPC.scale;
+							amount = 0.5f;
+							amount2 = 0.8f;
+							color10 = Microsoft.Xna.Framework.Color.HotPink;
+							color10.A = 128;
+							num78 = nPC.localAI[0];
+							num77 = nPC.localAI[1];
+							break;
+							case 541:
 									num76 = 4;
-									scaleFactor = 6f;
-									num77 = (float)Math.Cos((double)(Main.GlobalTime % 2.4f / 2.4f * 6.28318548f)) / 2f + 0.5f;
-									color10 = Microsoft.Xna.Framework.Color.Gold;
-									amount = 0.5f;
-									break;
-								case 542:
+							scaleFactor = 6f;
+							num77 = (float)Math.Cos((double)(Main.GlobalTime % 2.4f / 2.4f * 6.28318548f)) / 2f + 0.5f;
+							color10 = Microsoft.Xna.Framework.Color.Gold;
+							amount = 0.5f;
+							break;
+							case 542:
 								case 543:
 								case 544:
 								case 545:
 									num71 = 6;
-									num72 = 3;
-									num74 = num71 * 2;
-									break;
-								case 546:
+							num72 = 3;
+							num74 = num71 * 2;
+							break;
+							case 546:
 									num71 = 8;
-									num72 = 2;
-									num74 = num71 * 3;
-									break;
-								case 552:
+							num72 = 2;
+							num74 = num71 * 3;
+							break;
+							case 552:
 								case 553:
 								case 554:
 								case 555:
@@ -22193,79 +_,88 @@
 								case 572:
 								case 573:
 									num71 = 0;
-									if (type == 561 || type == 562 || type == 563)
-									{
-										num69 = -8f;
-									}
-									if (type == 555 || type == 556 || type == 557)
-									{
-										num69 = -5f;
-									}
-									if (type == 572 || type == 573)
-									{
-										num69 = -4f;
-									}
-									if (type == 570 || type == 571)
-									{
-										spriteEffects ^= SpriteEffects.FlipHorizontally;
-										num69 = -2f;
-									}
-									if (type == 568 || type == 569)
-									{
-										spriteEffects ^= SpriteEffects.FlipHorizontally;
-										num69 = -3f;
-										num76 = 4;
-										scaleFactor = 4f;
-										num77 = (float)Math.Cos((double)(Main.GlobalTime % 1.5f / 1.5f * 6.28318548f)) / 6f + 0.75f;
-										color10 = Microsoft.Xna.Framework.Color.HotPink;
-										color10.A = 127;
-										amount = 0.5f;
-									}
-									if (nPC.localAI[3] < 60f)
-									{
-										float num80 = 8f;
-										float num81 = nPC.localAI[3] / 60f;
-										num76 = 3;
-										num77 = 1f - num81 * num81;
-										scaleFactor = num80;
-										color10 = new Microsoft.Xna.Framework.Color(127, 0, 255, 0);
-										amount2 = 1f;
-										color11 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, color11, num81 * num81);
-									}
-									break;
-								case 558:
+							if (type == 561 || type == 562 || type == 563)
+							{
+								num69 = -8f;
+							}
+
+							if (type == 555 || type == 556 || type == 557)
+							{
+								num69 = -5f;
+							}
+
+							if (type == 572 || type == 573)
+							{
+								num69 = -4f;
+							}
+
+							if (type == 570 || type == 571)
+							{
+								spriteEffects ^= SpriteEffects.FlipHorizontally;
+								num69 = -2f;
+							}
+
+							if (type == 568 || type == 569)
+							{
+								spriteEffects ^= SpriteEffects.FlipHorizontally;
+								num69 = -3f;
+								num76 = 4;
+								scaleFactor = 4f;
+								num77 = (float)Math.Cos((double)(Main.GlobalTime % 1.5f / 1.5f * 6.28318548f)) / 6f + 0.75f;
+								color10 = Microsoft.Xna.Framework.Color.HotPink;
+								color10.A = 127;
+								amount = 0.5f;
+							}
+
+							if (nPC.localAI[3] < 60f)
+							{
+								float num80 = 8f;
+								float num81 = nPC.localAI[3] / 60f;
+								num76 = 3;
+								num77 = 1f - num81 * num81;
+								scaleFactor = num80;
+								color10 = new Microsoft.Xna.Framework.Color(127, 0, 255, 0);
+								amount2 = 1f;
+								color11 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, color11, num81 * num81);
+							}
+
+							break;
+							case 558:
 								case 559:
 								case 560:
 								case 574:
 								case 575:
 									if (nPC.ai[0] != 2f)
-									{
-										num71 = 0;
-									}
-									else
-									{
-										num71 = 6;
-										num72 = 2;
-										num74 = num71 * 3;
-										num75 = 1;
-									}
-									break;
-								case 566:
+							{
+								num71 = 0;
+							}
+							else
+							{
+								num71 = 6;
+								num72 = 2;
+								num74 = num71 * 3;
+								num75 = 1;
+							}
+
+							break;
+							case 566:
 								case 567:
 								case 578:
 									num71 = 0;
-									num69 = -2f;
-									break;
-							}
-						}
-						else
-						{
-							num71 = 6;
-							num72 = 2;
-							num74 = num71 * 3;
-						}
-						break;
-				}
+							num69 = -2f;
+							break;
+						}
+					}
+					else
+					{
+						num71 = 6;
+						num72 = 2;
+						num74 = num71 * 3;
+					}
+
+					break;
+				}
+
 				for (int n = num73; n < num71; n += num72)
 				{
 					Vector2 arg_3B84_0 = nPC.oldPos[n];
@@ -22380,32 +_,33 @@
 					{
 						case 0:
 							num93 = 6;
-							break;
+						break;
 						case 1:
 							num93 = 4;
-							break;
+						break;
 						case 2:
 							num93 = 2;
-							break;
+						break;
 						case 3:
 							num93 = 6;
-							break;
+						break;
 						case 4:
 							num93 = 8;
-							break;
+						break;
 						case 5:
 							num93 = 6;
-							break;
+						break;
 						case 6:
 							num93 = 4;
-							break;
+						break;
 						case 7:
 							num93 = 6;
-							break;
+						break;
 						case 8:
 							num93 = 2;
-							break;
-					}
+						break;
+					}
+
 					Microsoft.Xna.Framework.Color color19 = new Microsoft.Xna.Framework.Color(255, 255, 255, 130);
 					value4.Y += (float)num93;
 					Main.spriteBatch.Draw(texture2D4, vector14 + value4 * nPC.scale, new Microsoft.Xna.Framework.Rectangle?(rectangle), color19, MathHelper.Clamp(nPC.velocity.X * 0.1f, -0.3926991f, 0.3926991f), rectangle.Size() / 2f, nPC.scale * 0.7f, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
@@ -24037,32 +_,33 @@
 										{
 											case 0:
 												vector56 += new Vector2(8f, 32f);
-												break;
+											break;
 											case 1:
 												vector56 += new Vector2(6f, 72f);
-												break;
+											break;
 											case 2:
 												vector56 += new Vector2(8f, 126f);
-												break;
+											break;
 											case 3:
 												vector56 += new Vector2(6f, 174f);
-												break;
+											break;
 											case 4:
 												vector56 += new Vector2(6f, 224f);
-												break;
+											break;
 											case 5:
 												vector56 += new Vector2(8f, 272f);
-												break;
+											break;
 											case 6:
 												vector56 += new Vector2(10f, 318f);
-												break;
+											break;
 											case 7:
 												vector56 += new Vector2(14f, 366f);
-												break;
+											break;
 											case 8:
 												vector56 += new Vector2(10f, 414f);
-												break;
+											break;
 										}
+
 										vector56.Y -= (float)(num231 * num232);
 										vector56 -= vector10;
 										int num233 = 2;
@@ -24070,34 +_,38 @@
 										{
 											num233 = (int)nPC.ai[2] - 1;
 										}
+
 										if (nPC.velocity.Y != 0f)
 										{
 											num233 = 3;
 										}
+
 										value40.Y += 44 * num233;
 										switch (num233)
 										{
 											case 0:
 												zero3 = new Vector2(10f, 18f);
-												break;
+											break;
 											case 1:
 												zero3 = new Vector2(8f, 20f);
-												break;
+											break;
 											case 2:
 												zero3 = new Vector2(8f, 20f);
-												break;
+											break;
 											case 3:
 												zero3 = new Vector2(8f, 20f);
-												break;
+											break;
 											case 4:
 												zero3 = new Vector2(6f, 18f);
-												break;
+											break;
 										}
+
 										if (spriteEffects.HasFlag(SpriteEffects.FlipHorizontally))
 										{
 											vector56.X *= -1f;
 											zero3.X = (float)value40.Width - zero3.X;
 										}
+
 										vector56 += nPC.Center;
 										vector56 -= Main.screenPosition;
 										vector56.Y += nPC.gfxOffY;
@@ -24115,32 +_,33 @@
 										{
 											case 0:
 												vector57 += new Vector2(8f, 30f);
-												break;
+											break;
 											case 1:
 												vector57 += new Vector2(6f, 68f);
-												break;
+											break;
 											case 2:
 												vector57 += new Vector2(8f, 120f);
-												break;
+											break;
 											case 3:
 												vector57 += new Vector2(6f, 166f);
-												break;
+											break;
 											case 4:
 												vector57 += new Vector2(6f, 214f);
-												break;
+											break;
 											case 5:
 												vector57 += new Vector2(8f, 260f);
-												break;
+											break;
 											case 6:
 												vector57 += new Vector2(14f, 304f);
-												break;
+											break;
 											case 7:
 												vector57 += new Vector2(14f, 350f);
-												break;
+											break;
 											case 8:
 												vector57 += new Vector2(10f, 396f);
-												break;
+											break;
 										}
+
 										vector57.Y -= (float)(num234 * num235);
 										vector57 -= vector10;
 										int num236 = 2;
@@ -24148,34 +_,38 @@
 										{
 											num236 = (int)nPC.ai[2] - 1;
 										}
+
 										if (nPC.velocity.Y != 0f)
 										{
 											num236 = 3;
 										}
+
 										value41.Y += 44 * num236;
 										switch (num236)
 										{
 											case 0:
 												zero4 = new Vector2(10f, 18f);
-												break;
+											break;
 											case 1:
 												zero4 = new Vector2(8f, 20f);
-												break;
+											break;
 											case 2:
 												zero4 = new Vector2(8f, 20f);
-												break;
+											break;
 											case 3:
 												zero4 = new Vector2(8f, 20f);
-												break;
+											break;
 											case 4:
 												zero4 = new Vector2(6f, 18f);
-												break;
+											break;
 										}
+
 										if (spriteEffects.HasFlag(SpriteEffects.FlipHorizontally))
 										{
 											vector57.X *= -1f;
 											zero4.X = (float)value41.Width - zero4.X;
 										}
+
 										vector57 += nPC.Center;
 										vector57 -= Main.screenPosition;
 										vector57.Y += nPC.gfxOffY;
@@ -24330,23 +_,24 @@
 										{
 											case 0:
 												num246 = 2f;
-												break;
+											break;
 											case 1:
 												num246 = -6f;
-												break;
+											break;
 											case 2:
 												num246 = 2f;
-												break;
+											break;
 											case 3:
 												num246 = 10f;
-												break;
+											break;
 											case 4:
 												num246 = 2f;
-												break;
+											break;
 											case 5:
 												num246 = 0f;
-												break;
+											break;
 										}
+
 										center3.Y += nPC.gfxOffY - (70f - num246) * nPC.scale;
 										Main.spriteBatch.Draw(texture2D33, center3 - Main.screenPosition, null, color9, 0f, texture2D33.Size() / 2f, 1f, spriteEffects, 0f);
 									}
@@ -24515,6 +_,8 @@
 					}
 				}
 			}
+
+			NPCLoader.PostDraw(Main.npc[iNPCIndex], Main.spriteBatch, color9);
 		}
 
 		protected void DrawNPCExtras(NPC n, bool beforeDraw, float addHeight, float addY, Microsoft.Xna.Framework.Color npcColor, Vector2 halfSize, SpriteEffects npcSpriteEffect)
@@ -24527,23 +_,25 @@
 				{
 					num = 0;
 				}
+
 				Texture2D texture2D = Main.extraTexture[72];
 				int num2 = 0;
 				switch (n.GetPartyHatColor())
 				{
 					case PartyHatColor.Pink:
 						num2 = 16;
-						break;
+					break;
 					case PartyHatColor.Cyan:
 						num2 = 17;
-						break;
+					break;
 					case PartyHatColor.Purple:
 						num2 = 18;
-						break;
+					break;
 					case PartyHatColor.White:
 						num2 = 19;
-						break;
-				}
+					break;
+				}
+
 				Microsoft.Xna.Framework.Rectangle rectangle = texture2D.Frame(20, 1, num2 % 20, 0);
 				rectangle.Width -= 2;
 				rectangle.Height -= 2;
@@ -24598,19 +_,20 @@
 									break;
 								default:
 									switch (type)
-									{
-										case 227:
+								{
+									case 227:
 											num4 = -4;
+									goto IL_2FE;
+									case 228:
+											num4 = -2;
+									goto IL_2FE;
+									case 229:
+											goto IL_2F0;
+									default:
 											goto IL_2FE;
-										case 228:
-											num4 = -2;
-											goto IL_2FE;
-										case 229:
-											goto IL_2F0;
-										default:
-											goto IL_2FE;
-									}
-									break;
+								}
+
+								break;
 							}
 						}
 					}
@@ -24647,18 +_,20 @@
 							goto IL_2FE;
 						default:
 							switch (type)
-							{
-								case 37:
+						{
+							case 37:
 								case 38:
 									goto IL_2F5;
-								default:
+							default:
 									if (type != 54)
-									{
-										goto IL_2FE;
-									}
-									goto IL_2F5;
-							}
-							break;
+							{
+								goto IL_2FE;
+							}
+
+							goto IL_2F5;
+						}
+
+						break;
 					}
 				}
 				else
@@ -24670,16 +_,19 @@
 							goto IL_2F5;
 						default:
 							if (type != 124)
-							{
-								if (type != 160)
-								{
-									goto IL_2FE;
-								}
-								goto IL_2F5;
-							}
-							break;
-					}
-				}
+						{
+							if (type != 160)
+							{
+								goto IL_2FE;
+							}
+
+							goto IL_2F5;
+						}
+
+						break;
+					}
+				}
+
 				IL_2F0:
 				num4 = -1;
 				goto IL_2FE;
@@ -24756,9 +_,12 @@
 						{
 							num8 = 28;
 						}
+
 						num6 = 0.75f;
 					}
 				}
+
+				NPCLoader.DrawTownAttackGun(n, ref num6, ref num7, ref num8);
 				Texture2D texture2D2 = Main.itemTexture[num7];
 				int num9 = (int)this.DrawPlayerItemPos(1f, num7).X - num8;
 				Vector2 origin2 = new Vector2((float)(-(float)num9), (float)(texture2D2.Height / 2));
@@ -24829,16 +_,20 @@
 					{
 						return;
 					}
+
 					if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
 					{
 						zero.Y = 12f;
 					}
 				}
+
+				NPCLoader.DrawTownAttackSwing(n, ref texture2D6, ref num10, ref scaleFactor, ref zero);
 				Tuple<Vector2, float> swingStats = n.GetSwingStats(NPCID.Sets.AttackTime[n.type] * 2, (int)n.ai[1], n.spriteDirection, num10, num10);
 				Vector2 vector4 = swingStats.Item1 + (swingStats.Item1 - n.Center) * scaleFactor + zero;
 				Vector2 origin4 = texture2D6.Size() * new Vector2((float)((n.spriteDirection == 1) ? 0 : 1), 1f);
 				Main.spriteBatch.Draw(texture2D6, new Vector2((float)((int)(vector4.X - Main.screenPosition.X)), (float)((int)(vector4.Y - Main.screenPosition.Y))), null, n.GetAlpha(npcColor), swingStats.Item2, origin4, n.scale, npcSpriteEffect ^ SpriteEffects.FlipHorizontally, 0f);
 			}
+
 			if (n.type == 550 && n.ai[0] == 18f)
 			{
 				Texture2D texture2D7 = Main.itemTexture[353];
@@ -25037,7 +_,12 @@
 					}
 				}
 			}
-			if (projectile.bobber && Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].holdStyle > 0)
+
+			if (!ProjectileLoader.PreDrawExtras(projectile, Main.spriteBatch))
+			{
+				//fluff
+			}
+			else if (projectile.bobber && Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].holdStyle > 0)
 			{
 				num = mountedCenter.X;
 				num2 = mountedCenter.Y;
@@ -25850,10 +_,10 @@
 						{
 							case 487:
 								num92 = 8f;
-								break;
+							break;
 							case 489:
 								num92 = 10f;
-								break;
+							break;
 						}
 					}
 					else
@@ -26445,266 +_,332 @@
 					}
 				}
 			}
+
 			Microsoft.Xna.Framework.Color color25 = Lighting.GetColor((int)((double)projectile.position.X + (double)projectile.width * 0.5) / 16, (int)(((double)projectile.position.Y + (double)projectile.height * 0.5) / 16.0));
 			if (projectile.hide && !ProjectileID.Sets.DontAttachHideToAlpha[projectile.type])
 			{
 				color25 = Lighting.GetColor((int)mountedCenter.X / 16, (int)(mountedCenter.Y / 16f));
 			}
+
 			if (projectile.type == 14)
 			{
 				color25 = Microsoft.Xna.Framework.Color.White;
 			}
+
+			if (!ProjectileLoader.PreDraw(projectile, Main.spriteBatch, color25))
+			{
+				ProjectileLoader.PostDraw(projectile, Main.spriteBatch, color25);
+				return;
+			}
+
 			int num147 = 0;
 			int num148 = 0;
 			if (projectile.type == 175)
 			{
 				num147 = 10;
 			}
+
 			if (projectile.type == 392)
 			{
 				num147 = -2;
 			}
+
 			if (projectile.type == 499)
 			{
 				num147 = 12;
 			}
+
 			if (projectile.bobber)
 			{
 				num147 = 8;
 			}
+
 			if (projectile.type == 519)
 			{
+				//patch file: num147, num148
 				num147 = 6;
 				num148 -= 6;
 			}
+
 			if (projectile.type == 520)
 			{
 				num147 = 12;
 			}
+
 			if (projectile.type == 492)
 			{
 				num148 -= 4;
 				num147 += 5;
 			}
+
 			if (projectile.type == 498)
 			{
 				num147 = 6;
 			}
+
 			if (projectile.type == 489)
 			{
 				num147 = -2;
 			}
+
 			if (projectile.type == 486)
 			{
 				num147 = -6;
 			}
+
 			if (projectile.type == 525)
 			{
 				num147 = 5;
 			}
+
 			if (projectile.type == 488)
 			{
 				num148 -= 8;
 			}
+
 			if (projectile.type == 373)
 			{
 				num148 = -10;
 				num147 = 6;
 			}
+
 			if (projectile.type == 375)
 			{
 				num148 = -11;
 				num147 = 12;
 			}
+
 			if (projectile.type == 423)
 			{
 				num148 = -5;
 			}
+
 			if (projectile.type == 346)
 			{
 				num147 = 4;
 			}
+
 			if (projectile.type == 331)
 			{
 				num148 = -4;
 			}
+
 			if (projectile.type == 254)
 			{
 				num147 = 3;
 			}
+
 			if (projectile.type == 273)
 			{
 				num148 = 2;
 			}
+
 			if (projectile.type == 335)
 			{
 				num147 = 6;
 			}
+
 			if (projectile.type == 162)
 			{
 				num147 = 1;
 				num148 = 1;
 			}
+
 			if (projectile.type == 377)
 			{
 				num147 = -6;
 			}
+
 			if (projectile.type == 353)
 			{
 				num147 = 36;
 				num148 = -12;
 			}
+
 			if (projectile.type == 324)
 			{
 				num147 = 22;
 				num148 = -6;
 			}
+
 			if (projectile.type == 266)
 			{
 				num147 = 10;
 				num148 = -10;
 			}
+
 			if (projectile.type == 319)
 			{
 				num147 = 10;
 				num148 = -12;
 			}
+
 			if (projectile.type == 315)
 			{
 				num147 = -13;
 				num148 = -6;
 			}
+
 			if (projectile.type == 313 && projectile.height != 54)
 			{
 				num148 = -12;
 				num147 = 20;
 			}
+
 			if (projectile.type == 314)
 			{
 				num148 = -8;
 				num147 = 0;
 			}
+
 			if (projectile.type == 269)
 			{
 				num147 = 18;
 				num148 = -14;
 			}
+
 			if (projectile.type == 268)
 			{
 				num147 = 22;
 				num148 = -2;
 			}
+
 			if (projectile.type == 18)
 			{
 				num147 = 3;
 				num148 = 3;
 			}
+
 			if (projectile.type == 16)
 			{
 				num147 = 6;
 			}
+
 			if (projectile.type == 17 || projectile.type == 31)
 			{
 				num147 = 2;
 			}
+
 			if (projectile.type == 25 || projectile.type == 26 || projectile.type == 35 || projectile.type == 63 || projectile.type == 154)
 			{
 				num147 = 6;
 				num148 -= 6;
 			}
+
 			if (projectile.type == 28 || projectile.type == 37 || projectile.type == 75)
 			{
 				num147 = 8;
 			}
+
 			if (projectile.type == 29 || projectile.type == 470 || projectile.type == 637)
 			{
 				num147 = 11;
 			}
+
 			if (projectile.type == 43)
 			{
 				num147 = 4;
 			}
+
 			if (projectile.type == 208)
 			{
 				num147 = 2;
 				num148 -= 12;
 			}
+
 			if (projectile.type == 209)
 			{
 				num147 = 4;
 				num148 -= 8;
 			}
+
 			if (projectile.type == 210)
 			{
 				num147 = 2;
 				num148 -= 22;
 			}
+
 			if (projectile.type == 251)
 			{
 				num147 = 18;
 				num148 -= 10;
 			}
+
 			if (projectile.type == 163 || projectile.type == 310)
 			{
 				num147 = 10;
 			}
+
 			if (projectile.type == 69 || projectile.type == 70)
 			{
 				num147 = 4;
 				num148 = 4;
 			}
+
+			//patch file: num149
 			float num149 = (float)(Main.projectileTexture[projectile.type].Width - projectile.width) * 0.5f + (float)projectile.width * 0.5f;
 			if (projectile.type == 50 || projectile.type == 53 || projectile.type == 515)
 			{
 				num148 = -8;
 			}
+
 			if (projectile.type == 473)
 			{
 				num148 = -6;
 				num147 = 2;
 			}
+
 			if (projectile.type == 72 || projectile.type == 86 || projectile.type == 87)
 			{
 				num148 = -16;
 				num147 = 8;
 			}
+
 			if (projectile.type == 74)
 			{
 				num148 = -6;
 			}
+
 			if (projectile.type == 99)
 			{
 				num147 = 1;
 			}
+
 			if (projectile.type == 655)
 			{
 				num147 = 1;
 			}
+
 			if (projectile.type == 111)
 			{
 				num147 = 18;
 				num148 = -16;
 			}
+
 			if (projectile.type == 334)
 			{
 				num148 = -18;
 				num147 = 8;
 			}
+
 			if (projectile.type == 200)
 			{
 				num147 = 12;
 				num148 = -12;
 			}
+
 			if (projectile.type == 211)
 			{
 				num147 = 14;
 				num148 = 0;
 			}
+
 			if (projectile.type == 236)
 			{
 				num147 = 30;
 				num148 = -14;
 			}
+
 			if (projectile.type >= 191 && projectile.type <= 194)
 			{
 				num147 = 26;
@@ -26717,51 +_,63 @@
 					num148 = -22;
 				}
 			}
+
 			if (projectile.type >= 390 && projectile.type <= 392)
 			{
 				num148 = 4 * projectile.direction;
 			}
+
 			if (projectile.type == 112)
 			{
 				num147 = 12;
 			}
+
 			int arg_536F_0 = projectile.type;
 			if (projectile.type == 517 || projectile.type == 681)
 			{
 				num147 = 6;
 			}
+
 			if (projectile.type == 516)
 			{
 				num147 = 6;
 			}
+
 			if (projectile.type == 127)
 			{
 				num147 = 8;
 			}
+
 			if (projectile.type == 155)
 			{
 				num147 = 3;
 				num148 = 3;
 			}
+
 			if (projectile.type == 397)
 			{
 				num149 -= 1f;
 				num147 = -2;
 				num148 = -2;
 			}
+
 			if (projectile.type == 398)
 			{
 				num147 = 8;
 			}
+
+			ProjectileLoader.DrawOffset(projectile, ref num147, ref num148, ref num149);
 			SpriteEffects spriteEffects = SpriteEffects.None;
 			if (projectile.spriteDirection == -1)
 			{
 				spriteEffects = SpriteEffects.FlipHorizontally;
 			}
+
 			if (projectile.type == 681 && projectile.velocity.X > 0f)
 			{
 				spriteEffects ^= SpriteEffects.FlipHorizontally;
 			}
+
 			if (projectile.type == 221)
 			{
 				for (int num150 = 1; num150 < 10; num150++)
@@ -27746,22 +_,24 @@
 					{
 						case 688:
 							texture2D8 = Main.glowMaskTexture[228];
-							texture2D9 = Main.extraTexture[86];
-							break;
+						texture2D9 = Main.extraTexture[86];
+						break;
 						case 689:
 							texture2D8 = Main.glowMaskTexture[229];
-							texture2D9 = Main.extraTexture[87];
-							break;
+						texture2D9 = Main.extraTexture[87];
+						break;
 						case 690:
 							texture2D8 = Main.glowMaskTexture[230];
-							texture2D9 = Main.extraTexture[88];
-							break;
-					}
+						texture2D9 = Main.extraTexture[88];
+						break;
+					}
+
 					Main.spriteBatch.Draw(texture2D7, position11, new Microsoft.Xna.Framework.Rectangle?(rectangle5), color39, projectile.rotation, origin4, projectile.scale, spriteEffects, 0f);
 					if (texture2D8 != null)
 					{
 						Main.spriteBatch.Draw(texture2D8, position11, new Microsoft.Xna.Framework.Rectangle?(rectangle5), color40, projectile.rotation, origin4, projectile.scale, spriteEffects, 0f);
 					}
+
 					if (texture2D9 != null)
 					{
 						Vector2 position12 = projectile.Center + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
@@ -27783,8 +_,9 @@
 						case 694:
 						case 695:
 							origin5.X += 3f;
-							break;
-					}
+						break;
+					}
+
 					Microsoft.Xna.Framework.Color color41 = Microsoft.Xna.Framework.Color.Lerp(projectile.GetAlpha(color25), Microsoft.Xna.Framework.Color.White, 0f);
 					Main.spriteBatch.Draw(texture2D10, position13, new Microsoft.Xna.Framework.Rectangle?(rectangle6), color41, projectile.rotation, origin5, projectile.scale, spriteEffects, 0f);
 					Main.spriteBatch.Draw(texture2D10, position13, new Microsoft.Xna.Framework.Rectangle?(rectangle6), color41 * 0.3f, projectile.rotation, origin5, projectile.scale * 1.1f, spriteEffects, 0f);
@@ -28686,11 +_,12 @@
 						{
 							case 665:
 								texture2 = Main.glowMaskTexture[222];
-								break;
+							break;
 							case 667:
 								texture2 = Main.glowMaskTexture[223];
-								break;
-						}
+							break;
+						}
+
 						float num284 = (projectile.localAI[0] / 100f * 6.28318548f).ToRotationVector2().X * 1f + 1f;
 						Microsoft.Xna.Framework.Color color63 = new Microsoft.Xna.Framework.Color(140, 100, 40, 0) * (num284 / 4f + 0.5f) * 1f;
 						for (float num285 = 0f; num285 < 4f; num285 += 1f)
@@ -28744,11 +_,12 @@
 						{
 							case 692:
 								texture3 = Main.glowMaskTexture[236];
-								break;
+							break;
 							case 693:
 								texture3 = Main.glowMaskTexture[237];
-								break;
-						}
+							break;
+						}
+
 						Main.spriteBatch.Draw(texture3, vector42, new Microsoft.Xna.Framework.Rectangle?(rectangle15), new Microsoft.Xna.Framework.Color(255, 255, 255, 127), projectile.rotation, origin11, projectile.scale, spriteEffects, 0f);
 					}
 					else if (projectile.type == 590)
@@ -29192,9 +_,10 @@
 							Main.spriteBatch.Draw(Main.projectileTexture[projectile.type], new Vector2(projectile.position.X - Main.screenPosition.X + num149 + (float)num148 - num326, projectile.position.Y - Main.screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num327), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.projectileTexture[projectile.type].Width, Main.projectileTexture[projectile.type].Height)), alpha11, projectile.rotation, new Vector2(num149, (float)(projectile.height / 2 + num147)), projectile.scale, spriteEffects, 0f);
 						}
 					}
+
 					if (projectile.bobber)
 					{
-						if (projectile.ai[1] > 0f && projectile.ai[1] < 3884f && projectile.ai[0] == 1f)
+						if (projectile.ai[1] > 0f && projectile.ai[0] == 1f)
 						{
 							int num329 = (int)projectile.ai[1];
 							Vector2 center = projectile.Center;
@@ -29388,6 +_,8 @@
 					}
 				}
 			}
+
+			ProjectileLoader.PostDraw(projectile, Main.spriteBatch, color25);
 		}
 
 		private static Microsoft.Xna.Framework.Color buffColor(Microsoft.Xna.Framework.Color newColor, float R, float G, float B, float A)
@@ -29512,14 +_,18 @@
 								{
 									this.DrawCacheProjsBehindNPCs.Add(i);
 								}
+
 								flag = false;
 							}
 						}
+
 						if (flag)
 						{
 							this.DrawCacheProjsBehindProjectiles.Add(i);
 						}
 					}
+
+					ProjectileLoader.DrawBehind(Main.projectile[i], i, DrawCacheProjsBehindNPCsAndTiles, DrawCacheProjsBehindNPCs, DrawCacheProjsBehindProjectiles, DrawCacheProjsOverWiresUI);
 				}
 			}
 		}
@@ -30150,7 +_,9 @@
 				num = 2f;
 				result.Y += 2f * gravdir;
 			}
+
 			result.X = num;
+			ItemLoader.HoldoutOffset(gravdir, itemtype, ref result);
 			return result;
 		}
 
@@ -30166,6 +_,12 @@
 
 		protected void DrawPlayerHead(Player drawPlayer, float X, float Y, float Alpha = 1f, float Scale = 1f)
 		{
+			//prepare for lots of ugly code
+			PlayerHeadDrawInfo drawInfo = new PlayerHeadDrawInfo();
+			drawInfo.spriteBatch = Main.spriteBatch;
+			drawInfo.drawPlayer = drawPlayer;
+			drawInfo.alpha = Alpha;
+			drawInfo.scale = Scale;
 			int shaderId = 0;
 			int skinVariant = drawPlayer.skinVariant;
 			short num = (short)drawPlayer.hairDye;
@@ -30173,34 +_,48 @@
 			{
 				num = 1;
 			}
+
+			drawInfo.hairShader = num;
 			for (int i = 0; i < 16 + drawPlayer.extraAccessorySlots * 2; i++)
 			{
 				int num2 = i % 10;
-				if (drawPlayer.dye[num2] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && drawPlayer.armor[i].faceSlot > 0 && drawPlayer.armor[i].faceSlot < 9)
+				if (drawPlayer.dye[num2] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && drawPlayer.armor[i].faceSlot > 0)
 				{
 					byte arg_81_0 = drawPlayer.dye[num2].dye;
 				}
 			}
+
 			if (drawPlayer.face > 0 && drawPlayer.face < 9)
 			{
 				this.LoadAccFace((int)drawPlayer.face);
 			}
+
 			if (drawPlayer.dye[0] != null)
 			{
 				shaderId = (int)drawPlayer.dye[0].dye;
 			}
+
+			drawInfo.armorShader = shaderId;
 			this.LoadHair(drawPlayer.hair);
 			Microsoft.Xna.Framework.Color color = this.quickAlpha(Microsoft.Xna.Framework.Color.White, Alpha);
+			drawInfo.eyeWhiteColor = color;
 			Microsoft.Xna.Framework.Color color2 = this.quickAlpha(drawPlayer.eyeColor, Alpha);
+			drawInfo.eyeColor = color2;
 			Microsoft.Xna.Framework.Color color3 = this.quickAlpha(drawPlayer.GetHairColor(false), Alpha);
+			drawInfo.hairColor = color3;
 			Microsoft.Xna.Framework.Color color4 = this.quickAlpha(drawPlayer.skinColor, Alpha);
+			drawInfo.skinColor = color4;
 			Microsoft.Xna.Framework.Color color5 = this.quickAlpha(Microsoft.Xna.Framework.Color.White, Alpha);
+			drawInfo.armorColor = color5;
 			SpriteEffects spriteEffects = SpriteEffects.None;
 			if (drawPlayer.direction < 0)
 			{
 				spriteEffects = SpriteEffects.FlipHorizontally;
 			}
+
+			drawInfo.spriteEffects = spriteEffects;
 			Vector2 vector = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.4f);
+			drawInfo.drawOrigin = vector;
 			Vector2 position = drawPlayer.position;
 			Microsoft.Xna.Framework.Rectangle bodyFrame = drawPlayer.bodyFrame;
 			drawPlayer.bodyFrame.Y = 0;
@@ -30215,26 +_,77 @@
 			{
 				this.LoadArmorHead(drawPlayer.head);
 			}
+
 			if (drawPlayer.face > 0 && drawPlayer.face < 9)
 			{
 				this.LoadAccFace((int)drawPlayer.face);
 			}
+
 			bool flag = false;
 			if (drawPlayer.head == 10 || drawPlayer.head == 12 || drawPlayer.head == 28 || drawPlayer.head == 62 || drawPlayer.head == 97 || drawPlayer.head == 106 || drawPlayer.head == 113 || drawPlayer.head == 116 || drawPlayer.head == 119 || drawPlayer.head == 133 || drawPlayer.head == 138 || drawPlayer.head == 139 || drawPlayer.head == 163 || drawPlayer.head == 178 || drawPlayer.head == 181 || drawPlayer.head == 191 || drawPlayer.head == 198)
 			{
 				flag = true;
 			}
+
 			bool flag2 = false;
 			if (drawPlayer.head == 161 || drawPlayer.head == 14 || drawPlayer.head == 15 || drawPlayer.head == 16 || drawPlayer.head == 18 || drawPlayer.head == 21 || drawPlayer.head == 24 || drawPlayer.head == 25 || drawPlayer.head == 26 || drawPlayer.head == 40 || drawPlayer.head == 44 || drawPlayer.head == 51 || drawPlayer.head == 56 || drawPlayer.head == 59 || drawPlayer.head == 60 || drawPlayer.head == 67 || drawPlayer.head == 68 || drawPlayer.head == 69 || drawPlayer.head == 114 || drawPlayer.head == 121 || drawPlayer.head == 126 || drawPlayer.head == 130 || drawPlayer.head == 136 || drawPlayer.head == 140 || drawPlayer.head == 145 || drawPlayer.head == 158 || drawPlayer.head == 159 || drawPlayer.head == 184 || drawPlayer.head == 190 || (double)drawPlayer.head == 92.0 || drawPlayer.head == 195)
 			{
 				flag2 = true;
 			}
-			if (drawPlayer.head != 38 && drawPlayer.head != 135)
+
+			ItemLoader.DrawHair(drawPlayer, ref flag, ref flag2);
+			drawInfo.drawHair = flag;
+			drawInfo.drawAltHair = flag2;
+			List<PlayerHeadLayer> drawLayers = PlayerHooks.GetDrawHeadLayers(drawPlayer);
+			int layerIndex = -1;
+			layerLoopContinue:
+			layerIndex++;
+			if (layerIndex >= drawLayers.Count)
+			{
+				goto postDraw;
+			}
+
+			if (!drawLayers[layerIndex].ShouldDraw(drawLayers))
+			{
+				goto layerLoopContinue;
+			}
+
+			if (drawLayers[layerIndex] == PlayerHeadLayer.Head)
+			{
+				goto headLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.Hair)
+			{
+				goto hairLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.AltHair)
+			{
+				goto altHairLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.Armor)
+			{
+				goto armorLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.FaceAcc)
+			{
+				goto faceLayer;
+			}
+			else
+			{
+				drawLayers[layerIndex].Draw(ref drawInfo);
+			}
+
+			goto layerLoopContinue;
+			headLayer:
+			if (drawPlayer.head != 38 && drawPlayer.head != 135 && ItemLoader.DrawHead(drawPlayer))
 			{
 				Main.spriteBatch.Draw(Main.playerTextures[skinVariant, 0], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color4, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
 				Main.spriteBatch.Draw(Main.playerTextures[skinVariant, 1], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
 				Main.spriteBatch.Draw(Main.playerTextures[skinVariant, 2], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color2, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
 			}
+
+			goto layerLoopContinue;
+			hairLayer:
 			if (flag)
 			{
 				DrawData value = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
@@ -30249,12 +_,16 @@
 					{
 						bodyFrame2.Y = 0;
 					}
+
 					value = new DrawData(Main.playerHairTexture[drawPlayer.hair], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(bodyFrame2), color3, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
 					GameShaders.Hair.Apply(num, drawPlayer, new DrawData?(value));
 					value.Draw(Main.spriteBatch);
 					Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 				}
 			}
+
+			goto layerLoopContinue;
+			altHairLayer:
 			if (flag2)
 			{
 				Microsoft.Xna.Framework.Rectangle bodyFrame3 = drawPlayer.bodyFrame;
@@ -30271,6 +_,9 @@
 					Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 				}
 			}
+
+			goto layerLoopContinue;
+			armorLayer:
 			if (drawPlayer.head == 23)
 			{
 				Microsoft.Xna.Framework.Rectangle bodyFrame4 = drawPlayer.bodyFrame;
@@ -30336,13 +_,14 @@
 				{
 					num4 = -2;
 				}
+
 				bodyFrame5.Y += num4;
 				DrawData value4 = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f + (float)num4) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(bodyFrame5), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
 				GameShaders.Armor.Apply(shaderId, drawPlayer, new DrawData?(value4));
 				value4.Draw(Main.spriteBatch);
 				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 			}
-			else if (drawPlayer.head > 0 && drawPlayer.head < 214 && drawPlayer.head != 28)
+			else if (drawPlayer.head > 0 && drawPlayer.head != 28)
 			{
 				DrawData value5 = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
 				GameShaders.Armor.Apply(shaderId, drawPlayer, new DrawData?(value5));
@@ -30357,12 +_,16 @@
 				{
 					bodyFrame6.Y = 0;
 				}
+
 				DrawData value6 = new DrawData(Main.playerHairTexture[drawPlayer.hair], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(bodyFrame6), color3, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
 				GameShaders.Hair.Apply(num, drawPlayer, new DrawData?(value6));
 				value6.Draw(Main.spriteBatch);
 				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 			}
-			if (drawPlayer.face > 0 && drawPlayer.face < 9)
+
+			goto layerLoopContinue;
+			faceLayer:
+			if (drawPlayer.face > 0)
 			{
 				DrawData value7;
 				if (drawPlayer.face == 7)
@@ -30373,10 +_,14 @@
 				{
 					value7 = new DrawData(Main.accFaceTexture[(int)drawPlayer.face], new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
 				}
+
 				GameShaders.Armor.Apply(shaderId, drawPlayer, new DrawData?(value7));
 				value7.Draw(Main.spriteBatch);
 				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 			}
+
+			goto layerLoopContinue;
+			postDraw:
 			drawPlayer.position = position;
 			drawPlayer.bodyFrame.Y = bodyFrame.Y;
 		}
@@ -30396,17 +_,24 @@
 			{
 				effects = SpriteEffects.FlipHorizontally;
 			}
+
 			Main.spriteBatch.Draw(Main.extraTexture[37], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 8f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), null, Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.5) / 16, Microsoft.Xna.Framework.Color.White), 0f, new Vector2((float)(Main.extraTexture[37].Width / 2), (float)(Main.extraTexture[37].Height / 2)), 1f, effects, 0f);
 		}
 
 		public void DrawPlayer(Player drawPlayer, Vector2 Position, float rotation, Vector2 rotationOrigin, float shadow = 0f)
 		{
+			//prepare for code more ugly than DrawPlayerHead
+ 			PlayerDrawInfo drawInfo = new PlayerDrawInfo();
+			drawInfo.drawPlayer = drawPlayer;
+			drawInfo.position = Position;
+			drawInfo.shadow = shadow;
 			DrawData value = default(DrawData);
 			int projectileDrawPosition = -1;
 			Main.playerDrawData.Clear();
 			Main.playerDrawDust.Clear();
 			Main.playerDrawGore.Clear();
 			Vector2 value2 = Position + (drawPlayer.itemLocation - drawPlayer.position);
+			drawInfo.itemLocation = value2;
 			int num = 0;
 			bool flag = false;
 			bool flag2 = false;
@@ -30416,10 +_,15 @@
 			{
 				flag = true;
 			}
+
 			if (drawPlayer.body == 99 || drawPlayer.body == 98 || drawPlayer.body == 100 || drawPlayer.body == 167 || drawPlayer.body == 171 || drawPlayer.body == 183 || drawPlayer.body == 191 || drawPlayer.body == 192 || drawPlayer.body == 198 || drawPlayer.body == 199 || drawPlayer.body == 202 || drawPlayer.body == 201 || drawPlayer.body == 203)
 			{
 				flag2 = true;
 			}
+
+			ItemLoader.DrawHands(drawPlayer, ref flag, ref flag2);
+			drawInfo.drawHands = flag;
+			drawInfo.drawArms = flag2;
 			int num2;
 			if (drawPlayer.heldProj >= 0 && shadow == 0f)
 			{
@@ -30428,48 +_,68 @@
 				{
 					flag3 = true;
 				}
-			}
+
+				ProjectileLoader.DrawHeldProjInFrontOfHeldItemAndArms(Main.projectile[drawPlayer.heldProj], ref flag3);
+			}
+
+			drawInfo.drawHeldProjInFrontOfHeldItemAndBody = flag3;
 			bool flag4 = false;
 			if (drawPlayer.head == 10 || drawPlayer.head == 12 || drawPlayer.head == 28 || drawPlayer.head == 62 || drawPlayer.head == 97 || drawPlayer.head == 106 || drawPlayer.head == 113 || drawPlayer.head == 116 || drawPlayer.head == 119 || drawPlayer.head == 133 || drawPlayer.head == 138 || drawPlayer.head == 139 || drawPlayer.head == 163 || drawPlayer.head == 178 || drawPlayer.head == 181 || drawPlayer.head == 191 || drawPlayer.head == 198)
 			{
 				flag4 = true;
 			}
+
 			bool flag5 = false;
 			if (drawPlayer.head == 161 || drawPlayer.head == 14 || drawPlayer.head == 15 || drawPlayer.head == 16 || drawPlayer.head == 18 || drawPlayer.head == 21 || drawPlayer.head == 24 || drawPlayer.head == 25 || drawPlayer.head == 26 || drawPlayer.head == 40 || drawPlayer.head == 44 || drawPlayer.head == 51 || drawPlayer.head == 56 || drawPlayer.head == 59 || drawPlayer.head == 60 || drawPlayer.head == 67 || drawPlayer.head == 68 || drawPlayer.head == 69 || drawPlayer.head == 114 || drawPlayer.head == 121 || drawPlayer.head == 126 || drawPlayer.head == 130 || drawPlayer.head == 136 || drawPlayer.head == 140 || drawPlayer.head == 145 || drawPlayer.head == 158 || drawPlayer.head == 159 || drawPlayer.head == 184 || drawPlayer.head == 190 || drawPlayer.head == 92 || drawPlayer.head == 195)
 			{
 				flag5 = true;
 			}
+
+			ItemLoader.DrawHair(drawPlayer, ref flag4, ref flag5);
+			drawInfo.drawHair = flag4;
+			drawInfo.drawAltHair = flag5;
 			bool flag6 = false;
 			if (drawPlayer.face == 4 || drawPlayer.face == 3 || drawPlayer.face == 2)
 			{
 				flag6 = true;
 			}
+
 			int num3 = (int)drawPlayer.hairDye;
 			if (drawPlayer.head == 0 && num3 == 0)
 			{
 				num3 = 1;
 			}
+
+			drawInfo.hairShader = num3;
 			float num4 = (float)drawPlayer.mount.PlayerOffset;
 			Position.Y -= num4;
+			drawInfo.position = Position;
 			int num5 = 0;
 			if (drawPlayer.dye[0] != null)
 			{
 				num5 = (int)drawPlayer.dye[0].dye;
 			}
+
+			drawInfo.headArmorShader = num5;
 			int num6 = 0;
 			if (drawPlayer.dye[1] != null)
 			{
 				num6 = (int)drawPlayer.dye[1].dye;
 			}
+
+			drawInfo.bodyArmorShader = num6;
 			int shader = 0;
 			if (drawPlayer.dye[2] != null)
 			{
 				shader = (int)drawPlayer.dye[2].dye;
 			}
+
 			if (drawPlayer.wearsRobe)
 			{
 				shader = num6;
 			}
+
+			drawInfo.legArmorShader = shader;
 			int shader2 = 0;
 			int shader3 = 0;
 			int shader4 = 0;
@@ -30487,56 +_,80 @@
 				int num7 = i % 10;
 				if (drawPlayer.dye[num7] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && (i / 10 >= 1 || !drawPlayer.hideVisual[num7] || drawPlayer.armor[i].wingSlot > 0 || drawPlayer.armor[i].type == 934))
 				{
-					if (drawPlayer.armor[i].handOnSlot > 0 && drawPlayer.armor[i].handOnSlot < 20)
+					if (drawPlayer.armor[i].handOnSlot > 0)
 					{
 						shader2 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].handOffSlot > 0 && drawPlayer.armor[i].handOffSlot < 12)
+						drawInfo.handOnShader = shader2;
+					}
+
+					if (drawPlayer.armor[i].handOffSlot > 0)
 					{
 						shader3 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].backSlot > 0 && drawPlayer.armor[i].backSlot < 14)
+						drawInfo.handOffShader = shader3;
+					}
+
+					if (drawPlayer.armor[i].backSlot > 0)
 					{
 						shader4 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].frontSlot > 0 && drawPlayer.armor[i].frontSlot < 5)
+						drawInfo.backShader = shader4;
+					}
+
+					if (drawPlayer.armor[i].frontSlot > 0)
 					{
 						shader5 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].shoeSlot > 0 && drawPlayer.armor[i].shoeSlot < 18)
+						drawInfo.frontShader = shader5;
+					}
+
+					if (drawPlayer.armor[i].shoeSlot > 0)
 					{
 						shader6 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].waistSlot > 0 && drawPlayer.armor[i].waistSlot < 13)
+						drawInfo.shoeShader = shader6;
+					}
+
+					if (drawPlayer.armor[i].waistSlot > 0)
 					{
 						shader7 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].shieldSlot > 0 && drawPlayer.armor[i].shieldSlot < 7)
+						drawInfo.waistShader = shader7;
+					}
+
+					if (drawPlayer.armor[i].shieldSlot > 0)
 					{
 						shader8 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].neckSlot > 0 && drawPlayer.armor[i].neckSlot < 10)
+						drawInfo.shieldShader = shader8;
+					}
+
+					if (drawPlayer.armor[i].neckSlot > 0)
 					{
 						shader9 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].faceSlot > 0 && drawPlayer.armor[i].faceSlot < 9)
+						drawInfo.neckShader = shader9;
+					}
+
+					if (drawPlayer.armor[i].faceSlot > 0)
 					{
 						shader10 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].balloonSlot > 0 && drawPlayer.armor[i].balloonSlot < 18)
+						drawInfo.faceShader = shader10;
+					}
+
+					if (drawPlayer.armor[i].balloonSlot > 0)
 					{
 						shader11 = (int)drawPlayer.dye[num7].dye;
-					}
-					if (drawPlayer.armor[i].wingSlot > 0 && drawPlayer.armor[i].wingSlot < 38)
+						drawInfo.balloonShader = shader11;
+					}
+
+					if (drawPlayer.armor[i].wingSlot > 0)
 					{
 						shader12 = (int)drawPlayer.dye[num7].dye;
-					}
+						drawInfo.wingShader = shader12;
+					}
+
 					if (drawPlayer.armor[i].type == 934)
 					{
 						shader13 = (int)drawPlayer.dye[num7].dye;
-					}
-				}
-			}
+						drawInfo.carpetShader = shader13;
+					}
+				}
+			}
+
 			if (drawPlayer.mount.Active)
 			{
 				Mount.currentShader = (drawPlayer.mount.Cart ? drawPlayer.cMinecart : drawPlayer.cMount);
@@ -30545,94 +_,124 @@
 			{
 				Mount.currentShader = 0;
 			}
+
 			SpriteEffects spriteEffects = SpriteEffects.None;
 			SpriteEffects effect = SpriteEffects.FlipHorizontally;
 			Microsoft.Xna.Framework.Color color = drawPlayer.GetImmuneAlpha(drawPlayer.GetHairColor(true), shadow);
+			drawInfo.hairColor = color;
 			Microsoft.Xna.Framework.Color color2 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.eyeWhiteColor = color2;
 			Microsoft.Xna.Framework.Color color3 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), drawPlayer.eyeColor), shadow);
+			drawInfo.eyeColor = color3;
 			Microsoft.Xna.Framework.Color color4 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), drawPlayer.skinColor), shadow);
+			drawInfo.faceColor = color4;
 			Microsoft.Xna.Framework.Color color5 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.skinColor), shadow);
+			drawInfo.bodyColor = color5;
 			Microsoft.Xna.Framework.Color color6 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.skinColor), shadow);
+			drawInfo.legColor = color6;
 			Microsoft.Xna.Framework.Color color7 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.shirtColor), shadow);
+			drawInfo.shirtColor = color7;
 			Microsoft.Xna.Framework.Color color8 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.underShirtColor), shadow);
+			drawInfo.underShirtColor = color8;
 			Microsoft.Xna.Framework.Color color9 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.pantsColor), shadow);
+			drawInfo.pantsColor = color9;
 			Microsoft.Xna.Framework.Color color10 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.shoeColor), shadow);
+			drawInfo.shoeColor = color10;
 			Microsoft.Xna.Framework.Color color11 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.25) / 16, Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.upperArmorColor = color11;
 			Microsoft.Xna.Framework.Color color12 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.5) / 16, Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.middleArmorColor = color12;
 			Microsoft.Xna.Framework.Color color13 = color12;
+			drawInfo.mountColor = color13;
 			Microsoft.Xna.Framework.Color color14 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.75) / 16, Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.lowerArmorColor = color14;
 			Microsoft.Xna.Framework.Color color15 = new Microsoft.Xna.Framework.Color(255, 255, 255, 100);
 			int num8 = 0;
 			int num9 = 0;
 			int num10 = 0;
 			int num11 = 0;
 			int num12 = -1;
+			drawInfo.headGlowMask = num12;
 			int num13 = -1;
+			drawInfo.bodyGlowMask = num13;
 			int num14 = -1;
+			drawInfo.armGlowMask = num14;
 			int num15 = -1;
+			drawInfo.legGlowMask = num15;
 			Microsoft.Xna.Framework.Color color16 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.headGlowMaskColor = color16;
 			Microsoft.Xna.Framework.Color color17 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.bodyGlowMaskColor = color17;
 			Microsoft.Xna.Framework.Color color18 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.armGlowMaskColor = color18;
 			Microsoft.Xna.Framework.Color color19 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.legGlowMaskColor = color19;
 			num2 = drawPlayer.head;
 			switch (num2)
 			{
 				case 169:
 					num8++;
-					break;
+				break;
 				case 170:
 					num9++;
-					break;
+				break;
 				case 171:
 					num10++;
-					break;
+				break;
 				default:
 					if (num2 == 189)
-					{
-						num11++;
-					}
-					break;
-			}
+				{
+					num11++;
+				}
+
+				break;
+			}
+
 			num2 = drawPlayer.body;
 			switch (num2)
 			{
 				case 175:
 					num8++;
-					break;
+				break;
 				case 176:
 					num9++;
-					break;
+				break;
 				case 177:
 					num10++;
-					break;
+				break;
 				default:
 					if (num2 == 190)
-					{
-						num11++;
-					}
-					break;
-			}
+				{
+					num11++;
+				}
+
+				break;
+			}
+
 			num2 = drawPlayer.legs;
 			switch (num2)
 			{
 				case 110:
 					num8++;
-					break;
+				break;
 				case 111:
 					num9++;
-					break;
+				break;
 				case 112:
 					num10++;
-					break;
+				break;
 				default:
 					if (num2 == 130)
-					{
-						num11++;
-					}
-					break;
-			}
+				{
+					num11++;
+				}
+
+				break;
+			}
+
 			if (drawPlayer.head == 169)
 			{
+				//patch file: num12, color16
 				num12 = 15;
 				byte b = (byte)(62.5f * (float)(1 + num8));
 				color16 = new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, 0);
@@ -30681,16 +_,22 @@
 				num12 = 96;
 				color16 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
 			}
+
 			if (drawPlayer.body == 175)
 			{
+				//patch file: num13
 				if (drawPlayer.Male)
 				{
 					num13 = 13;
 				}
+
+				//patch file
 				else
 				{
 					num13 = 18;
 				}
+
+				//patch file: color17
 				byte b6 = (byte)(62.5f * (float)(1 + num8));
 				color17 = new Microsoft.Xna.Framework.Color((int)b6, (int)b6, (int)b6, 0);
 			}
@@ -30704,7 +_,9 @@
 				{
 					num13 = 186;
 				}
+
 				num14 = 188;
+				//patch file: num14, color18
 				byte b7 = (byte)(62.5f * (float)(1 + num11));
 				color17 = new Microsoft.Xna.Framework.Color((int)b7, (int)b7, (int)b7, 0);
 				color18 = new Microsoft.Xna.Framework.Color((int)b7, (int)b7, (int)b7, 0);
@@ -30747,12 +_,15 @@
 				{
 					num13 = 43;
 				}
+
 				num14 = 44;
 				color17 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
 				color18 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
 			}
+
 			if (drawPlayer.legs == 111)
 			{
+				//patch file: num15, color19
 				num15 = 17;
 				byte b10 = (byte)(62.5f * (float)(1 + num9));
 				color19 = new Microsoft.Xna.Framework.Color((int)b10, (int)b10, (int)b10, 0);
@@ -30780,6 +_,11 @@
 				color19 = new Microsoft.Xna.Framework.Color((int)b13, (int)b13, (int)b13, 0);
 				color14 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color((int)b13, (int)b13, (int)b13, 255), shadow);
 			}
+
+			ItemLoader.DrawArmorColor(EquipType.Head, drawPlayer.head, drawPlayer, shadow, ref color11, ref num12, ref color16);
+			ItemLoader.DrawArmorColor(EquipType.Body, drawPlayer.body, drawPlayer, shadow, ref color12, ref num13, ref color17);
+			ItemLoader.ArmorArmGlowMask(drawPlayer.body, drawPlayer, shadow, ref num14, ref color18);
+			ItemLoader.DrawArmorColor(EquipType.Legs, drawPlayer.legs, drawPlayer, shadow, ref color14, ref num15, ref color19);
 			color16 = drawPlayer.GetImmuneAlphaPure(color16, shadow);
 			color17 = drawPlayer.GetImmuneAlphaPure(color17, shadow);
 			color18 = drawPlayer.GetImmuneAlphaPure(color18, shadow);
@@ -31143,10 +_,10 @@
 				if (Main.rand.Next(5) == 0 && shadow == 0f)
 				{
 					int type = Utils.SelectRandom<int>(Main.rand, new int[]
-						{
-							4,
+					{
+						4,
 							256
-						});
+					});
 					Dust dust = Main.dust[Dust.NewDust(Position, drawPlayer.width, drawPlayer.height, type, 0f, 0f, 100, default(Microsoft.Xna.Framework.Color), 1f)];
 					dust.scale = 0.8f + Main.rand.NextFloat() * 0.6f;
 					dust.fadeIn = 0.5f;
@@ -31156,20 +_,23 @@
 					{
 						dust.color = new Microsoft.Xna.Framework.Color(80, 170, 40, 120);
 					}
+
 					Main.playerDrawDust.Add(dust.dustIndex);
 				}
+
 				if (Main.rand.Next(5) == 0 && shadow == 0f)
 				{
 					int num38 = Gore.NewGore(Position + new Vector2(Main.rand.NextFloat(), Main.rand.NextFloat()) * drawPlayer.Size, Vector2.Zero, Utils.SelectRandom<int>(Main.rand, new int[]
-							{
-								1024,
+					{
+						1024,
 								1025,
 								1026
-							}), 0.65f);
+					}), 0.65f);
 					Main.gore[num38].velocity *= 0.05f;
 					Main.playerDrawGore.Add(num38);
 				}
 			}
+
 			if (base.IsActive && !Main.gamePaused && shadow == 0f)
 			{
 				float num39 = (float)drawPlayer.miscCounter / 180f;
@@ -31184,37 +_,41 @@
 					{
 						case 0:
 							if (drawPlayer.nebulaLevelLife >= 1)
-							{
-								num40 = 6.28318548f / (float)drawPlayer.nebulaLevelLife;
-								num41 = drawPlayer.nebulaLevelLife;
-								goto IL_2C54;
-							}
-							break;
+						{
+							num40 = 6.28318548f / (float)drawPlayer.nebulaLevelLife;
+							num41 = drawPlayer.nebulaLevelLife;
+							goto IL_2C54;
+						}
+
+						break;
 						case 1:
 							if (drawPlayer.nebulaLevelMana >= 1)
-							{
-								num40 = -6.28318548f / (float)drawPlayer.nebulaLevelMana;
-								num41 = drawPlayer.nebulaLevelMana;
-								num39 = (float)(-(float)drawPlayer.miscCounter) / 180f;
-								scaleFactor = 20f;
-								type2 = 88;
-								goto IL_2C54;
-							}
-							break;
+						{
+							num40 = -6.28318548f / (float)drawPlayer.nebulaLevelMana;
+							num41 = drawPlayer.nebulaLevelMana;
+							num39 = (float)(-(float)drawPlayer.miscCounter) / 180f;
+							scaleFactor = 20f;
+							type2 = 88;
+							goto IL_2C54;
+						}
+
+						break;
 						case 2:
 							if (drawPlayer.nebulaLevelDamage >= 1)
-							{
-								num40 = 6.28318548f / (float)drawPlayer.nebulaLevelDamage;
-								num41 = drawPlayer.nebulaLevelDamage;
-								num39 = (float)drawPlayer.miscCounter / 180f;
-								scaleFactor = 30f;
-								type2 = 86;
-								goto IL_2C54;
-							}
-							break;
+						{
+							num40 = 6.28318548f / (float)drawPlayer.nebulaLevelDamage;
+							num41 = drawPlayer.nebulaLevelDamage;
+							num39 = (float)drawPlayer.miscCounter / 180f;
+							scaleFactor = 30f;
+							type2 = 86;
+							goto IL_2C54;
+						}
+
+						break;
 						default:
 							goto IL_2C54;
 					}
+
 					IL_2D22:
 					j++;
 					continue;
@@ -31245,9 +_,12 @@
 				Main.dust[num43].position = Vector2.Lerp(Main.dust[num43].position, drawPlayer.Center, 0.5f);
 				Main.playerDrawDust.Add(num43);
 			}
+
+			bool fullBright = false;
+			PlayerHooks.DrawEffects(drawInfo, ref num18, ref num19, ref num20, ref num21, ref fullBright);
 			if (num18 != 1f || num19 != 1f || num20 != 1f || num21 != 1f)
 			{
-				if (drawPlayer.onFire || drawPlayer.onFire2 || drawPlayer.onFrostBurn)
+				if (drawPlayer.onFire || drawPlayer.onFire2 || drawPlayer.onFrostBurn || fullBright)
 				{
 					color2 = drawPlayer.GetImmuneAlpha(Microsoft.Xna.Framework.Color.White, shadow);
 					color3 = drawPlayer.GetImmuneAlpha(drawPlayer.eyeColor, shadow);
@@ -31431,6 +_,28 @@
 				color18 = Microsoft.Xna.Framework.Color.Multiply(color18, num49);
 				color19 = Microsoft.Xna.Framework.Color.Multiply(color19, num49);
 			}
+
+			drawInfo.hairColor = color;
+			drawInfo.eyeWhiteColor = color2;
+			drawInfo.eyeColor = color3;
+			drawInfo.faceColor = color4;
+			drawInfo.bodyColor = color5;
+			drawInfo.legColor = color6;
+			drawInfo.shirtColor = color7;
+			drawInfo.underShirtColor = color8;
+			drawInfo.pantsColor = color9;
+			drawInfo.shoeColor = color10;
+			drawInfo.upperArmorColor = color11;
+			drawInfo.middleArmorColor = color12;
+			drawInfo.lowerArmorColor = color14;
+			drawInfo.headGlowMask = num12;
+			drawInfo.bodyGlowMask = num13;
+			drawInfo.armGlowMask = num14;
+			drawInfo.legGlowMask = num15;
+			drawInfo.headGlowMaskColor = color16;
+			drawInfo.bodyGlowMaskColor = color17;
+			drawInfo.armGlowMaskColor = color18;
+			drawInfo.legGlowMaskColor = color19;
 			if (drawPlayer.gravDir == 1f)
 			{
 				if (drawPlayer.direction == 1)
@@ -31469,9 +_,14 @@
 					drawPlayer.bodyPosition.Y = 6f;
 				}
 			}
+
+			drawInfo.spriteEffects = spriteEffects;
 			Vector2 vector2 = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.75f);
+			drawInfo.legOrigin = vector2;
 			Vector2 origin = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.5f);
+			drawInfo.bodyOrigin = origin;
 			Vector2 vector3 = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.4f);
+			drawInfo.headOrigin = vector3;
 			if ((drawPlayer.merman || drawPlayer.forceMerman) && !drawPlayer.hideMerman)
 			{
 				drawPlayer.headRotation = drawPlayer.velocity.Y * (float)drawPlayer.direction * 0.1f;
@@ -31501,6 +_,189 @@
 			{
 				flag7 = true;
 			}
+
+			goto heldItemColor;
+			postSetupVars:
+			PlayerHooks.ModifyDrawInfo(ref drawInfo);
+			List<PlayerLayer> drawLayers = PlayerHooks.GetDrawLayers(drawPlayer);
+			int layerIndex = -1;
+			layerLoopContinue:
+			layerIndex++;
+			Position = drawInfo.position;
+			shadow = drawInfo.shadow;
+			value2 = drawInfo.itemLocation;
+			flag = drawInfo.drawHands;
+			flag2 = drawInfo.drawArms;
+			flag3 = drawInfo.drawHeldProjInFrontOfHeldItemAndBody;
+			flag4 = drawInfo.drawHair;
+			flag5 = drawInfo.drawAltHair;
+			num3 = drawInfo.hairShader;
+			num5 = drawInfo.headArmorShader;
+			num6 = drawInfo.bodyArmorShader;
+			shader = drawInfo.legArmorShader;
+			shader2 = drawInfo.handOnShader;
+			shader3 = drawInfo.handOffShader;
+			shader4 = drawInfo.backShader;
+			shader5 = drawInfo.frontShader;
+			shader6 = drawInfo.shoeShader;
+			shader7 = drawInfo.waistShader;
+			shader8 = drawInfo.shieldShader;
+			shader9 = drawInfo.neckShader;
+			shader10 = drawInfo.faceShader;
+			shader11 = drawInfo.balloonShader;
+			shader12 = drawInfo.wingShader;
+			shader13 = drawInfo.carpetShader;
+			color = drawInfo.hairColor;
+			color2 = drawInfo.eyeWhiteColor;
+			color3 = drawInfo.eyeColor;
+			color4 = drawInfo.faceColor;
+			color5 = drawInfo.bodyColor;
+			color6 = drawInfo.legColor;
+			color7 = drawInfo.shirtColor;
+			color8 = drawInfo.underShirtColor;
+			color9 = drawInfo.pantsColor;
+			color10 = drawInfo.shoeColor;
+			color11 = drawInfo.upperArmorColor;
+			color12 = drawInfo.middleArmorColor;
+			color13 = drawInfo.mountColor;
+			color14 = drawInfo.lowerArmorColor;
+			num12 = drawInfo.headGlowMask;
+			num13 = drawInfo.bodyGlowMask;
+			num14 = drawInfo.armGlowMask;
+			num15 = drawInfo.legGlowMask;
+			color16 = drawInfo.headGlowMaskColor;
+			color17 = drawInfo.bodyGlowMaskColor;
+			color18 = drawInfo.armGlowMaskColor;
+			color19 = drawInfo.legGlowMaskColor;
+			spriteEffects = drawInfo.spriteEffects;
+			vector2 = drawInfo.legOrigin;
+			origin = drawInfo.bodyOrigin;
+			vector3 = drawInfo.headOrigin;
+			if (layerIndex >= drawLayers.Count)
+			{
+				goto postDraw;
+			}
+
+			if (!drawLayers[layerIndex].ShouldDraw(drawLayers))
+			{
+				goto layerLoopContinue;
+			}
+
+			if (drawLayers[layerIndex] == PlayerLayer.HairBack)
+			{
+				goto hairBackLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.MountBack)
+			{
+				goto mountBackLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.MiscEffectsBack)
+			{
+				goto miscEffectsBackLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.BackAcc)
+			{
+				goto backAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Wings)
+			{
+				goto wingsLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.BalloonAcc)
+			{
+				goto balloonAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Skin)
+			{
+				goto skinLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Legs)
+			{
+				goto legsLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.ShoeAcc)
+			{
+				goto shoeAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Body)
+			{
+				goto bodyLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HandOffAcc)
+			{
+				goto handOffAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.WaistAcc)
+			{
+				goto waistAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.NeckAcc)
+			{
+				goto neckAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Face)
+			{
+				goto faceLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Hair)
+			{
+				goto hairLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Head)
+			{
+				goto headLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.FaceAcc)
+			{
+				goto faceAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.MountFront)
+			{
+				goto mountFrontLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.ShieldAcc)
+			{
+				goto shieldAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.SolarShield)
+			{
+				goto solarShieldLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HeldProjBack)
+			{
+				goto heldProjBackLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HeldItem)
+			{
+				goto heldItemLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Arms)
+			{
+				goto armsLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HandOnAcc)
+			{
+				goto handOnAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HeldProjFront)
+			{
+				goto heldProjFrontLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.FrontAcc)
+			{
+				goto frontAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.MiscEffectsFront)
+			{
+				goto miscEffectsFrontLayer;
+			}
+			else
+			{
+				drawLayers[layerIndex].Draw(ref drawInfo);
+			}
+
+			goto layerLoopContinue;
+			hairBackLayer:
 			if (flag6)
 			{
 				bodyFrame.Height = 0;
@@ -31519,16 +_,21 @@
 					value.shader = -num3;
 					Main.playerDrawData.Add(value);
 				}
+
 				if (drawPlayer.gravDir == 1f)
 				{
 					bodyFrame.Height = height;
 				}
 			}
+
+			goto layerLoopContinue;
+			mountBackLayer:
 			if (drawPlayer.mount.Active)
 			{
 				drawPlayer.mount.Draw(Main.playerDrawData, 0, drawPlayer, Position, color13, spriteEffects, shadow);
 				drawPlayer.mount.Draw(Main.playerDrawData, 1, drawPlayer, Position, color13, spriteEffects, shadow);
 			}
+
 			if (drawPlayer.carpetFrame >= 0)
 			{
 				Microsoft.Xna.Framework.Color color20 = color14;
@@ -31537,10 +_,14 @@
 				{
 					num50 = 10f;
 				}
+
 				value = new DrawData(Main.flyingCarpetTexture, new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2) + 28f * drawPlayer.gravDir + num50))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.flyingCarpetTexture.Height / 6 * drawPlayer.carpetFrame, Main.flyingCarpetTexture.Width, Main.flyingCarpetTexture.Height / 6)), color20, drawPlayer.bodyRotation, new Vector2((float)(Main.flyingCarpetTexture.Width / 2), (float)(Main.flyingCarpetTexture.Height / 8)), 1f, spriteEffects, 0);
 				value.shader = shader13;
 				Main.playerDrawData.Add(value);
 			}
+
+			goto layerLoopContinue;
+			miscEffectsBackLayer:
 			if (drawPlayer.electrified && shadow == 0f)
 			{
 				Texture2D texture2D = Main.glowMaskTexture[25];
@@ -31553,14 +_,17 @@
 						value = new DrawData(texture2D, new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num51 * texture2D.Height / 7, texture2D.Width, texture2D.Height / 7)), color15, drawPlayer.bodyRotation, new Vector2((float)(texture2D.Width / 2), (float)(texture2D.Height / 14)), 1f, spriteEffects, 0);
 						Main.playerDrawData.Add(value);
 					}
+
 					num51 += 3;
 				}
 			}
+
 			if (drawPlayer.setForbidden && shadow == 0f)
 			{
 				Microsoft.Xna.Framework.Color color21 = Microsoft.Xna.Framework.Color.Lerp(color12, Microsoft.Xna.Framework.Color.White, 0.7f);
 				Texture2D texture2D2 = Main.extraTexture[74];
 				Texture2D texture = Main.glowMaskTexture[217];
+				// TODO do we need flag8
 				bool flag8 = !drawPlayer.setForbiddenCooldownLocked;
 				int num52 = (int)(((float)drawPlayer.miscCounter / 300f * 6.28318548f).ToRotationVector2().Y * 6f);
 				float num53 = ((float)drawPlayer.miscCounter / 75f * 6.28318548f).ToRotationVector2().X * 4f;
@@ -31590,6 +_,9 @@
 				value = new DrawData(texture2D3, new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), null, color23, drawPlayer.bodyRotation, texture2D3.Size() / 2f, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
+
+			goto layerLoopContinue;
+			backAccLayer:
 			bool flag9 = false;
 			if ((drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].type == 779 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106 || drawPlayer.body == 170))
 			{
@@ -31649,9 +_,10 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
-			if (!flag9 && drawPlayer.back > 0 && drawPlayer.back < 14 && !drawPlayer.mount.Active)
-			{
-				if (drawPlayer.front >= 1 && drawPlayer.front <= 4)
+
+			if (!flag9 && drawPlayer.back > 0 && !drawPlayer.mount.Active)
+			{
+				if (drawPlayer.front >= 1)
 				{
 					int num58 = drawPlayer.bodyFrame.Y / 56;
 					if (num58 < 1 || num58 > 5)
@@ -31664,24 +_,32 @@
 						{
 							num = 0;
 						}
+
 						if (drawPlayer.front == 2)
 						{
 							num = 8;
 						}
+
 						if (drawPlayer.front == 3)
 						{
 							num = 0;
 						}
+
 						if (drawPlayer.front == 4)
 						{
 							num = 8;
 						}
 					}
 				}
+
 				value = new DrawData(Main.accBackTexture[(int)drawPlayer.back], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader4;
 				Main.playerDrawData.Add(value);
 			}
+
+			goto layerLoopContinue;
+			wingsLayer:
+			flag9 = (drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].type == 779 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106 || drawPlayer.body == 170);
 			Position.Y += (float)((int)num4 / 2);
 			if (!flag9 && drawPlayer.wings > 0)
 			{
@@ -31859,6 +_,11 @@
 					}
 				}
 			}
+
+			Position.Y -= (float)((int)num4 / 2);
+			goto layerLoopContinue;
+			balloonAccLayer:
+			Position.Y += (float)((int)num4 / 2);
 			if (drawPlayer.balloon > 0)
 			{
 				int num64 = DateTime.Now.Millisecond % 800 / 200;
@@ -31867,30 +_,39 @@
 				{
 					vector6.X = (float)drawPlayer.width - vector6.X;
 				}
+
 				if (drawPlayer.gravDir != 1f)
 				{
 					vector6.Y -= (float)drawPlayer.height;
 				}
+
 				value = new DrawData(Main.accBalloonTexture[(int)drawPlayer.balloon], new Vector2((float)((int)(Position.X - Main.screenPosition.X + vector6.X)), (float)((int)(Position.Y - Main.screenPosition.Y + vector6.Y * drawPlayer.gravDir))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.accBalloonTexture[(int)drawPlayer.balloon].Height / 4 * num64, Main.accBalloonTexture[(int)drawPlayer.balloon].Width, Main.accBalloonTexture[(int)drawPlayer.balloon].Height / 4)), color12, drawPlayer.bodyRotation, new Vector2((float)(26 + drawPlayer.direction * 4), 28f + drawPlayer.gravDir * 6f), 1f, spriteEffects, 0);
 				value.shader = shader11;
 				Main.playerDrawData.Add(value);
 			}
+
 			Position.Y -= (float)((int)num4 / 2);
-			if (drawPlayer.body != 83 && drawPlayer.body != 82 && drawPlayer.body != 93)
+			goto layerLoopContinue;
+			skinLayer:
+			if (drawPlayer.body != 83 && drawPlayer.body != 82 && drawPlayer.body != 93 && ItemLoader.DrawBody(drawPlayer))
 			{
 				value = new DrawData(Main.playerTextures[skinVariant, 3], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
-				if (drawPlayer.legs != 67 && drawPlayer.legs != 106 && drawPlayer.legs != 140 && drawPlayer.legs != 138 && drawPlayer.shoe != 15 && drawPlayer.legs != 143)
+				if (drawPlayer.legs != 67 && drawPlayer.legs != 106 && drawPlayer.legs != 140 && drawPlayer.legs != 138 && drawPlayer.shoe != 15 && drawPlayer.legs != 143 && ItemLoader.DrawLegs(drawPlayer))
 				{
 					value = new DrawData(Main.playerTextures[skinVariant, 10], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color6, drawPlayer.legRotation, origin, 1f, spriteEffects, 0);
 					Main.playerDrawData.Add(value);
 				}
 			}
+
+			goto layerLoopContinue;
 			if (drawPlayer.wearsRobe)
 			{
 				goto IL_6502;
 			}
+
 			IL_6048:
+			legsLayer:
 			if (drawPlayer.legs == 140)
 			{
 				if (!drawPlayer.invis && !drawPlayer.mount.Active)
@@ -31914,7 +_,7 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
-			else if (drawPlayer.legs > 0 && drawPlayer.legs < 157 && (drawPlayer.shoe != 15 || drawPlayer.wearsRobe))
+			else if (drawPlayer.legs > 0 && (drawPlayer.shoe != 15 || drawPlayer.wearsRobe))
 			{
 				if (!drawPlayer.invis)
 				{
@@ -31936,41 +_,51 @@
 				value = new DrawData(Main.playerTextures[skinVariant, 12], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color10, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
+
+			goto layerLoopContinue;
 			if (drawPlayer.wearsRobe)
 			{
 				goto IL_65DD;
 			}
+
 			IL_6502:
-			if (drawPlayer.shoe > 0 && drawPlayer.shoe < 18)
+			shoeAccLayer:
+			if (drawPlayer.shoe > 0)
 			{
 				value = new DrawData(Main.accShoesTexture[(int)drawPlayer.shoe], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color14, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
 				value.shader = shader6;
 				Main.playerDrawData.Add(value);
 			}
+
+			goto layerLoopContinue;
 			if (drawPlayer.wearsRobe)
 			{
 				goto IL_6048;
 			}
+
 			IL_65DD:
+			bodyLayer:
 			bool flag11 = skinVariant == 3 || skinVariant == 8 || skinVariant == 7;
-			if (flag11 && (drawPlayer.body <= 0 || drawPlayer.body >= 208) && !drawPlayer.invis)
+			if (flag11 && drawPlayer.body <= 0 && !drawPlayer.invis)
 			{
 				value = new DrawData(Main.playerTextures[skinVariant, 14], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color7, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
+
 			int num67 = -1;
 			switch (drawPlayer.body)
 			{
 				case 200:
 					num67 = 149;
-					break;
+				break;
 				case 201:
 					num67 = 150;
-					break;
+				break;
 				case 202:
 					num67 = 151;
-					break;
-			}
+				break;
+			}
+
 			if (num67 != -1)
 			{
 				this.LoadArmorLegs(num67);
@@ -31978,7 +_,8 @@
 				value.shader = num6;
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.body > 0 && drawPlayer.body < 208)
+
+			if (drawPlayer.body > 0)
 			{
 				Microsoft.Xna.Framework.Rectangle bodyFrame2 = drawPlayer.bodyFrame;
 				int num68 = num;
@@ -32031,33 +_,47 @@
 					value = new DrawData(Main.playerTextures[skinVariant, 6], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color7, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 					Main.playerDrawData.Add(value);
 				}
+
 				value = new DrawData(Main.playerTextures[skinVariant, 5], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.handoff > 0 && drawPlayer.handoff < 12)
+
+			goto layerLoopContinue;
+			handOffAccLayer:
+			if (drawPlayer.handoff > 0)
 			{
 				value = new DrawData(Main.accHandsOffTexture[(int)drawPlayer.handoff], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader3;
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.waist > 0 && drawPlayer.waist < 13)
+
+			goto layerLoopContinue;
+			waistAccLayer:
+			if (drawPlayer.waist > 0)
 			{
 				Microsoft.Xna.Framework.Rectangle legFrame = drawPlayer.legFrame;
 				if (legFrame.Y >= 1064)
 				{
 					legFrame.Y = 0;
 				}
+
 				value = new DrawData(Main.accWaistTexture[(int)drawPlayer.waist], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(legFrame), color14, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
 				value.shader = shader7;
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.neck > 0 && drawPlayer.neck < 10)
+
+			goto layerLoopContinue;
+			neckAccLayer:
+			if (drawPlayer.neck > 0)
 			{
 				value = new DrawData(Main.accNeckTexture[(int)drawPlayer.neck], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader9;
 				Main.playerDrawData.Add(value);
 			}
-			if (!drawPlayer.invis && drawPlayer.head != 38 && drawPlayer.head != 135)
+
+			goto layerLoopContinue;
+			faceLayer:
+			if (!drawPlayer.invis && drawPlayer.head != 38 && drawPlayer.head != 135 && ItemLoader.DrawHead(drawPlayer))
 			{
 				value = new DrawData(Main.playerTextures[skinVariant, 0], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color4, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
@@ -32071,6 +_,9 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
+
+			goto layerLoopContinue;
+			hairLayer:
 			if (flag4)
 			{
 				value = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
@@ -32083,12 +_,16 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
+
 			if (flag5 && !drawPlayer.invis)
 			{
 				value = new DrawData(Main.playerHairAltTexture[drawPlayer.hair], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(bodyFrame), color, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
 				value.shader = -num3;
 				Main.playerDrawData.Add(value);
 			}
+
+			goto layerLoopContinue;
+			headLayer:
 			if (drawPlayer.head == 23)
 			{
 				if (!drawPlayer.invis)
@@ -32120,11 +_,12 @@
 					origin2.Y -= 10f;
 					bodyFrame3.Height -= 8;
 				}
+
 				value = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(bodyFrame3), color11, drawPlayer.headRotation, origin2, 1f, spriteEffects, 0);
 				value.shader = num5;
 				Main.playerDrawData.Add(value);
 			}
-			else if (drawPlayer.head > 0 && drawPlayer.head < 214 && drawPlayer.head != 28)
+			else if (drawPlayer.head > 0 && drawPlayer.head != 28)
 			{
 				if (!drawPlayer.invis || (drawPlayer.head != 39 && drawPlayer.head != 38))
 				{
@@ -32205,7 +_,10 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
-			if (drawPlayer.face > 0 && drawPlayer.face < 9)
+
+			goto layerLoopContinue;
+			faceAccLayer:
+			if (drawPlayer.face > 0)
 			{
 				if (drawPlayer.face == 7)
 				{
@@ -32220,11 +_,15 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
+
+			goto layerLoopContinue;
+			mountFrontLayer:
 			if (drawPlayer.mount.Active)
 			{
 				drawPlayer.mount.Draw(Main.playerDrawData, 2, drawPlayer, Position, color13, spriteEffects, shadow);
 				drawPlayer.mount.Draw(Main.playerDrawData, 3, drawPlayer, Position, color13, spriteEffects, shadow);
 			}
+
 			if (drawPlayer.pulley && drawPlayer.itemAnimation == 0)
 			{
 				if (drawPlayer.pulleyDir == 2)
@@ -32244,13 +_,17 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
-			if (drawPlayer.shield > 0 && drawPlayer.shield < 7)
+
+			goto layerLoopContinue;
+			shieldAccLayer:
+			if (drawPlayer.shield > 0)
 			{
 				Vector2 zero = Vector2.Zero;
 				if (drawPlayer.shieldRaised)
 				{
 					zero.Y -= 4f;
 				}
+
 				if (drawPlayer.shieldRaised)
 				{
 					float num83 = (float)Math.Sin((double)(Main.GlobalTime * 6.28318548f));
@@ -32294,11 +_,15 @@
 					value.shader = shader8;
 					Main.playerDrawData.Add(value);
 				}
+
+				goto layerLoopContinue;
 				if (drawPlayer.mount.Cart)
 				{
 					Main.playerDrawData.Reverse(Main.playerDrawData.Count - 2, 2);
 				}
 			}
+
+			solarShieldLayer:
 			Position.Y += (float)((int)num4 / 2);
 			if (drawPlayer.solarShields > 0 && shadow == 0f && !drawPlayer.dead)
 			{
@@ -32309,21 +_,29 @@
 				{
 					num89 += 3.14159274f;
 				}
+
 				num89 += 0.06283186f * (float)drawPlayer.direction;
 				value = new DrawData(texture2D6, new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2)))) + drawPlayer.solarShieldPos[0], null, color33, num89, texture2D6.Size() / 2f, 1f, spriteEffects, 0);
 				value.shader = num6;
 				Main.playerDrawData.Add(value);
 			}
+
 			Position.Y -= (float)((int)num4 / 2);
+			goto layerLoopContinue;
+			heldProjBackLayer:
 			if (drawPlayer.heldProj >= 0 && shadow == 0f && !flag3)
 			{
 				projectileDrawPosition = Main.playerDrawData.Count;
 			}
+
+			goto layerLoopContinue;
+			heldItemColor:
 			Microsoft.Xna.Framework.Color color34 = Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0));
 			if (drawPlayer.inventory[drawPlayer.selectedItem].type == 678)
 			{
 				color34 = Microsoft.Xna.Framework.Color.White;
 			}
+
 			if (drawPlayer.shroomiteStealth && drawPlayer.inventory[drawPlayer.selectedItem].ranged)
 			{
 				float num90 = drawPlayer.stealth;
@@ -32341,9 +_,13 @@
 				{
 					num92 = 0.03f;
 				}
+
 				float arg_8EED_0 = (1f + num92 * 10f) / 11f;
 				color34 = color34.MultiplyRGBA(new Microsoft.Xna.Framework.Color(Vector4.Lerp(Vector4.One, new Vector4(0f, 0.12f, 0.16f, 0f), 1f - num92)));
 			}
+
+			goto postSetupVars;
+			heldItemLayer:
 			if (shadow == 0f && !drawPlayer.frozen && ((drawPlayer.itemAnimation > 0 && drawPlayer.inventory[drawPlayer.selectedItem].useStyle != 0) || (drawPlayer.inventory[drawPlayer.selectedItem].holdStyle > 0 && !drawPlayer.pulley)) && drawPlayer.inventory[drawPlayer.selectedItem].type > 0 && !drawPlayer.dead && !drawPlayer.inventory[drawPlayer.selectedItem].noUseGraphic && (!drawPlayer.wet || !drawPlayer.inventory[drawPlayer.selectedItem].noWet))
 			{
 				string arg_8FDD_0 = drawPlayer.name;
@@ -32432,6 +_,8 @@
 							zero3 = new Vector2((float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, (float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height);
 							num96 -= Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width;
 						}
+
+						ItemLoader.HoldoutOrigin(drawPlayer, ref zero3);
 						value = new DrawData(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float)((int)(value2.X - Main.screenPosition.X + zero3.X + (float)num96)), (float)((int)(value2.Y - Main.screenPosition.Y + (float)num97))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color34), num95, zero3, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
 						Main.playerDrawData.Add(value);
 						if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3870)
@@ -32554,7 +_,10 @@
 					}
 				}
 			}
-			if (drawPlayer.body > 0 && drawPlayer.body < 208)
+
+			goto layerLoopContinue;
+			armsLayer:
+			if (drawPlayer.body > 0)
 			{
 				Microsoft.Xna.Framework.Rectangle bodyFrame4 = drawPlayer.bodyFrame;
 				int num102 = num;
@@ -32564,19 +_,23 @@
 				{
 					num102 = 0;
 				}
+
 				if (!drawPlayer.invis || (drawPlayer.body != 21 && drawPlayer.body != 22))
 				{
 					if (flag && !drawPlayer.invis)
 					{
 						int arg_A72E_0 = drawPlayer.body;
+						//patch file: flag, flag2
 						if (flag2)
 						{
 							value = new DrawData(Main.playerTextures[skinVariant, 7], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 							Main.playerDrawData.Add(value);
 						}
+
 						value = new DrawData(Main.playerTextures[skinVariant, 9], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 						Main.playerDrawData.Add(value);
 					}
+
 					value = new DrawData(Main.armorArmTexture[drawPlayer.body], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2)) + num102), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(bodyFrame4), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 					value.shader = num6;
 					Main.playerDrawData.Add(value);
@@ -32611,12 +_,16 @@
 				value = new DrawData(Main.playerTextures[skinVariant, 13], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color7, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.handon > 0 && drawPlayer.handon < 20)
+
+			goto layerLoopContinue;
+			handOnAccLayer:
+			if (drawPlayer.handon > 0)
 			{
 				value = new DrawData(Main.accHandsOnTexture[(int)drawPlayer.handon], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader2;
 				Main.playerDrawData.Add(value);
 			}
+
 			if (drawPlayer.inventory[drawPlayer.selectedItem].type > -1 && Item.claw[drawPlayer.inventory[drawPlayer.selectedItem].type] && shadow == 0f && !drawPlayer.frozen && (drawPlayer.itemAnimation > 0 || (drawPlayer.inventory[drawPlayer.selectedItem].holdStyle > 0 && !drawPlayer.pulley)) && drawPlayer.inventory[drawPlayer.selectedItem].type > 0 && !drawPlayer.dead && !drawPlayer.inventory[drawPlayer.selectedItem].noUseGraphic && (!drawPlayer.wet || !drawPlayer.inventory[drawPlayer.selectedItem].noWet))
 			{
 				if (drawPlayer.gravDir == -1f)
@@ -32631,16 +_,26 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
+
+			goto layerLoopContinue;
+			heldProjFrontLayer:
 			if (drawPlayer.heldProj >= 0 && shadow == 0f && flag3)
 			{
 				projectileDrawPosition = Main.playerDrawData.Count;
 			}
-			if (!flag9 && drawPlayer.front > 0 && drawPlayer.front < 5 && !drawPlayer.mount.Active)
+
+			goto layerLoopContinue;
+			frontAccLayer:
+			flag9 = (drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].type == 779 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106 || drawPlayer.body == 170);
+			if (!flag9 && drawPlayer.front > 0 && !drawPlayer.mount.Active)
 			{
 				value = new DrawData(Main.accFrontTexture[(int)drawPlayer.front], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader5;
 				Main.playerDrawData.Add(value);
 			}
+
+			goto layerLoopContinue;
+			miscEffectsFrontLayer:
 			if (drawPlayer.frozen && shadow == 0f)
 			{
 				Microsoft.Xna.Framework.Color color40 = color12;
@@ -32693,29 +_,31 @@
 						num112 += 1f;
 					}
 				}
+
 				float num114 = 1f - num112 * 0.06f;
 				float num115 = (num112 - 1f) * 4f;
 				switch ((int)num112)
 				{
 					case 2:
 						num115 += 10f;
-						break;
+					break;
 					case 3:
 						num115 += 8f;
-						break;
+					break;
 					case 4:
 						num115 += 6f;
-						break;
+					break;
 					case 5:
 						num115 += 6f;
-						break;
+					break;
 					case 6:
 						num115 += 2f;
-						break;
+					break;
 					case 7:
 						num115 += 0f;
-						break;
-				}
+					break;
+				}
+
 				float num116 = (float)drawPlayer.miscCounter / 300f * 6.28318548f;
 				if (num112 > 0f)
 				{
@@ -32771,10 +_,14 @@
 						value = new DrawData(Main.beetleTexture, new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2)))) + drawPlayer.beetlePos[num121] + value15, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.beetleTexture.Height / 3 * drawPlayer.beetleFrame + 1, Main.beetleTexture.Width, Main.beetleTexture.Height / 3 - 2)), color42, 0f, new Vector2((float)(Main.beetleTexture.Width / 2), (float)(Main.beetleTexture.Height / 6)), 1f, spriteEffects, 0);
 						Main.playerDrawData.Add(value);
 					}
+
 					value = new DrawData(Main.beetleTexture, new Vector2((float)((int)(Position.X - Main.screenPosition.X + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)(drawPlayer.height / 2)))) + drawPlayer.beetlePos[num121], new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.beetleTexture.Height / 3 * drawPlayer.beetleFrame + 1, Main.beetleTexture.Width, Main.beetleTexture.Height / 3 - 2)), color12, 0f, new Vector2((float)(Main.beetleTexture.Width / 2), (float)(Main.beetleTexture.Height / 6)), 1f, spriteEffects, 0);
 					Main.playerDrawData.Add(value);
 				}
 			}
+
+			goto layerLoopContinue;
+			postDraw:
 			if (rotation != 0f)
 			{
 				Vector2 value16 = Position - Main.screenPosition + rotationOrigin;
@@ -32872,7 +_,7 @@
 			}
 		}
 
-		protected void DrawItem(Item item, int whoami)
+		public void DrawItem(Item item, int whoami)
 		{
 			int arg_22_0 = (int)((double)item.position.X + (double)item.width * 0.5) / 16;
 			int arg_28_0 = Lighting.offScreenTiles;
@@ -32889,16 +_,24 @@
 				{
 					num /= 100f;
 				}
+
 				if (num < (float)(color.R / 70 + 1))
 				{
 					int num3 = Dust.NewDust(item.position - new Vector2(1f, 2f), item.width, item.height, type, 0f, 0f, 254, default(Microsoft.Xna.Framework.Color), 0.25f);
 					Main.dust[num3].velocity *= 0f;
 				}
 			}
+
 			float num4 = item.velocity.X * 0.2f;
 			float scale = 1f;
 			Microsoft.Xna.Framework.Color alpha = item.GetAlpha(color);
 			ItemSlot.GetItemLight(ref alpha, ref scale, item, false);
+			if (!ItemLoader.PreDrawInWorld(item, Main.spriteBatch, color, alpha, ref num4, ref scale, whoami))
+			{
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
+				return;
+			}
+
 			float num5 = (float)(item.height - Main.itemTexture[item.type].Height);
 			float num6 = (float)(item.width / 2 - Main.itemTexture[item.type].Width / 2);
 			if (item.type >= 71 && item.type <= 74)
@@ -32910,16 +_,20 @@
 					Main.itemFrameCounter[whoami] = 0;
 					Main.itemFrame[whoami]++;
 				}
+
 				if (Main.itemFrame[whoami] > 7)
 				{
 					Main.itemFrame[whoami] = 0;
 				}
+
 				int width = Main.coinTexture[num7].Width;
 				int num8 = Main.coinTexture[num7].Height / 8;
 				num6 = (float)(item.width / 2 - Main.coinTexture[num7].Width / 2);
 				Main.spriteBatch.Draw(Main.coinTexture[num7], new Vector2(item.position.X - Main.screenPosition.X + (float)(width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(num8 / 2) + num5), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.itemFrame[whoami] * num8 + 1, Main.itemTexture[item.type].Width, num8)), alpha, num4, new Vector2((float)(width / 2), (float)(num8 / 2)), scale, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
+
 			if (ItemID.Sets.NebulaPickup[item.type])
 			{
 				Main.itemFrameCounter[whoami]++;
@@ -32928,16 +_,20 @@
 					Main.itemFrameCounter[whoami] = 0;
 					Main.itemFrame[whoami]++;
 				}
+
 				if (Main.itemFrame[whoami] >= 4)
 				{
 					Main.itemFrame[whoami] = 0;
 				}
+
 				Microsoft.Xna.Framework.Rectangle rectangle = Main.itemTexture[item.type].Frame(1, 4, 0, Main.itemFrame[whoami]);
 				num6 = (float)(item.width / 2 - rectangle.Width / 2);
 				num5 = (float)(item.height - rectangle.Height);
 				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(rectangle.Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(rectangle.Height / 2) + num5), new Microsoft.Xna.Framework.Rectangle?(rectangle), alpha, num4, rectangle.Size() / 2f, scale, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
+
 			if (ItemID.Sets.AnimatesAsSoul[item.type])
 			{
 				Main.itemFrameCounter[whoami]++;
@@ -32946,16 +_,20 @@
 					Main.itemFrameCounter[whoami] = 0;
 					Main.itemFrame[whoami]++;
 				}
+
 				if (Main.itemFrame[whoami] >= 4)
 				{
 					Main.itemFrame[whoami] = 0;
 				}
+
 				Microsoft.Xna.Framework.Rectangle rectangle2 = Main.itemTexture[item.type].Frame(1, 4, 0, Main.itemFrame[whoami]);
 				num6 = (float)(item.width / 2 - rectangle2.Width / 2);
 				num5 = (float)(item.height - rectangle2.Height);
 				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(rectangle2.Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(rectangle2.Height / 2) + num5), new Microsoft.Xna.Framework.Rectangle?(rectangle2), alpha, num4, rectangle2.Size() / 2f, scale, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
+
 			if (item.type == 3858)
 			{
 				Main.itemFrameCounter[whoami]++;
@@ -32985,32 +_,50 @@
 				{
 					Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), item.GetColor(color), num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
 				}
+
 				if (item.glowMask != -1)
 				{
 					Main.spriteBatch.Draw(Main.glowMaskTexture[(int)item.glowMask], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, item.alpha), num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
 				}
+
 				Main.spriteBatch.Draw(Main.wireTexture, new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f) + Main.itemTexture[item.type].Size().RotatedBy((double)num4, default(Vector2)) * 0.45f * item.scale, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(4, 58, 8, 8)), alpha, 0f, new Vector2(4f), 1f, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
+
 			if ((item.type >= 1522 && item.type <= 1527) || item.type == 3643)
 			{
 				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, (int)(Main.mouseTextColor / 2)), num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), (float)Main.mouseTextColor / 1000f + 0.8f, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
+
 			if (item.type == 3779)
 			{
 				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), alpha, num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
+
+			if (ItemLoader.animations.Contains(item.type))
+			{
+				ItemLoader.DrawAnimatedItem(item, whoami, color, alpha, num4, scale);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
+				return;
+			}
+
 			Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), alpha, num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
 			if (item.color != default(Microsoft.Xna.Framework.Color))
 			{
 				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), item.GetColor(color), num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
 			}
+
 			if (item.glowMask != -1)
 			{
 				Main.spriteBatch.Draw(Main.glowMaskTexture[(int)item.glowMask], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, item.alpha), num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
 			}
+
+			ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 		}
 
 		protected void DrawRain()
@@ -33155,21 +_,32 @@
 								num8++;
 							}
 						}
+
 						Microsoft.Xna.Framework.Color color5 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
-						if (dust.type == 6 || dust.type == 15 || (dust.noLight && dust.type < 86 && dust.type > 91) || (dust.type >= 59 && dust.type <= 64))
+						if (dust.type == 6 || dust.type == 15 || (dust.noLight && (dust.type < 86 || dust.type > 91)) || (dust.type >= 59 && dust.type <= 64))
 						{
 							color5 = Microsoft.Xna.Framework.Color.White;
 						}
+
 						color5 = dust.GetAlpha(color5);
 						if (dust.type == 213)
 						{
 							scale = 1f;
 						}
+
+						ModDust modDust = ModDust.GetDust(dust.type);
+						if (modDust != null)
+						{
+							modDust.Draw(dust, color5, scale);
+							continue;
+						}
+
 						Main.spriteBatch.Draw(Main.dustTexture, dust.position - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), color5, dust.rotation, new Vector2(4f, 4f), scale, SpriteEffects.None, 0f);
 						if (dust.color != default(Microsoft.Xna.Framework.Color))
 						{
 							Main.spriteBatch.Draw(Main.dustTexture, dust.position - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), dust.GetColor(color5), dust.rotation, new Vector2(4f, 4f), scale, SpriteEffects.None, 0f);
 						}
+
 						if (color5 == Microsoft.Xna.Framework.Color.Black)
 						{
 							dust.active = false;
@@ -33779,11 +_,12 @@
 			for (int j = 0; j < 22; j++)
 			{
 				int num6 = Main.player[Main.myPlayer].buffType[j];
-				if (Main.debuff[num6] && Main.player[Main.myPlayer].buffTime[j] > 5 && num6 != 28 && num6 != 34 && num6 != 87 && num6 != 89 && num6 != 21 && num6 != 86 && num6 != 199)
+				if (Main.debuff[num6] && Main.player[Main.myPlayer].buffTime[j] > 5 && BuffLoader.CanBeCleared(num6))
 				{
 					num5 += 1000;
 				}
 			}
+
 			if (Main.player[Main.myPlayer].sign > -1)
 			{
 				if (Main.editSign)
@@ -33865,74 +_,83 @@
 					{
 						num11 = 0;
 					}
+
 					num5 = num11;
 					if (num11 >= 1000000)
 					{
 						num7 = num11 / 1000000;
 						num11 -= num7 * 1000000;
 					}
+
 					if (num11 >= 10000)
 					{
 						num8 = num11 / 10000;
 						num11 -= num8 * 10000;
 					}
+
 					if (num11 >= 100)
 					{
 						num9 = num11 / 100;
 						num11 -= num9 * 100;
 					}
+
 					if (num11 >= 1)
 					{
 						num10 = num11;
 					}
+
 					if (num7 > 0)
 					{
 						object obj = text3;
 						text3 = string.Concat(new object[]
-							{
-								obj,
+						{
+							obj,
 								num7,
 								" ",
 								Lang.inter[15],
 								" "
-							});
-					}
+						});
+					}
+
 					if (num8 > 0)
 					{
 						object obj = text3;
 						text3 = string.Concat(new object[]
-							{
-								obj,
+						{
+							obj,
 								num8,
 								" ",
 								Lang.inter[16],
 								" "
-							});
-					}
+						});
+					}
+
 					if (num9 > 0)
 					{
 						object obj = text3;
 						text3 = string.Concat(new object[]
-							{
-								obj,
+						{
+							obj,
 								num9,
 								" ",
 								Lang.inter[17],
 								" "
-							});
-					}
+						});
+					}
+
 					if (num10 > 0)
 					{
 						object obj = text3;
 						text3 = string.Concat(new object[]
-							{
-								obj,
+						{
+							obj,
 								num10,
 								" ",
 								Lang.inter[18],
 								" "
-							});
-					}
+						});
+					}
+
 					float num12 = (float)Main.mouseTextColor / 255f;
 					if (num7 > 0)
 					{
@@ -33977,78 +_,88 @@
 						num17 = 1;
 					}
 				}
+
 				if (num17 < 0)
 				{
 					num17 = 0;
 				}
+
 				num5 = num17;
 				if (num17 >= 1000000)
 				{
 					num13 = num17 / 1000000;
 					num17 -= num13 * 1000000;
 				}
+
 				if (num17 >= 10000)
 				{
 					num14 = num17 / 10000;
 					num17 -= num14 * 10000;
 				}
+
 				if (num17 >= 100)
 				{
 					num15 = num17 / 100;
 					num17 -= num15 * 100;
 				}
+
 				if (num17 >= 1)
 				{
 					num16 = num17;
 				}
+
 				if (num13 > 0)
 				{
 					object obj = text4;
 					text4 = string.Concat(new object[]
-						{
-							obj,
+					{
+						obj,
 							num13,
 							" ",
 							Lang.inter[15],
 							" "
-						});
-				}
+					});
+				}
+
 				if (num14 > 0)
 				{
 					object obj = text4;
 					text4 = string.Concat(new object[]
-						{
-							obj,
+					{
+						obj,
 							num14,
 							" ",
 							Lang.inter[16],
 							" "
-						});
-				}
+					});
+				}
+
 				if (num15 > 0)
 				{
 					object obj = text4;
 					text4 = string.Concat(new object[]
-						{
-							obj,
+					{
+						obj,
 							num15,
 							" ",
 							Lang.inter[17],
 							" "
-						});
-				}
+					});
+				}
+
 				if (num16 > 0)
 				{
 					object obj = text4;
 					text4 = string.Concat(new object[]
-						{
-							obj,
+					{
+						obj,
 							num16,
 							" ",
 							Lang.inter[18],
 							" "
-						});
-				}
+					});
+				}
+
 				float num18 = (float)Main.mouseTextColor / 255f;
 				if (num13 > 0)
 				{
@@ -34076,6 +_,8 @@
 					text = Lang.inter[54] + " (" + text4 + ")";
 				}
 			}
+
+			NPCLoader.SetChatButtons(ref text, ref text2);
 			if (!flag)
 			{
 				int num19 = 180 + (Main.screenWidth - 800) / 2;
@@ -34526,27 +_,32 @@
 										{
 											Main.npcChatText = Lang.dialog(230, false);
 										}
+
 										Main.player[Main.myPlayer].statLife = Main.player[Main.myPlayer].statLifeMax2;
 										for (int l = 0; l < 22; l++)
 										{
 											int num27 = Main.player[Main.myPlayer].buffType[l];
-											if (Main.debuff[num27] && Main.player[Main.myPlayer].buffTime[l] > 0 && num27 != 28 && num27 != 34 && num27 != 87 && num27 != 89 && num27 != 21 && num27 != 86 && num27 != 199)
+											if (Main.debuff[num27] && Main.player[Main.myPlayer].buffTime[l] > 0 && BuffLoader.CanBeCleared(num27))
 											{
 												Main.player[Main.myPlayer].DelBuff(l);
 												l = -1;
 											}
 										}
+
 										return;
 									}
+
 									int num28 = Main.rand.Next(3);
 									if (num28 == 0)
 									{
 										Main.npcChatText = Lang.dialog(52, false);
 									}
+
 									if (num28 == 1)
 									{
 										Main.npcChatText = Lang.dialog(53, false);
 									}
+
 									if (num28 == 2)
 									{
 										Main.npcChatText = Lang.dialog(54, false);
@@ -34586,6 +_,8 @@
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								return;
 							}
+
+							NPCLoader.OnChatButtonClicked(true);
 						}
 					}
 					else if (Main.npcChatFocus3 && Main.player[Main.myPlayer].talkNPC >= 0)
@@ -34632,19 +_,24 @@
 								{
 									Main.player[Main.myPlayer].inventory[num30] = new Item();
 								}
+
 								gotDye = true;
 								Main.PlaySound(24, -1, -1, 1, 1f, 0f);
 								Main.player[Main.myPlayer].GetDyeTraderReward();
 							}
+
 							Main.npcChatText = Lang.DyeTraderQuestChat(gotDye);
 							return;
 						}
+
 						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 550)
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							Main.HelpText();
 							Main.npcChatText = Lang.BartenderHelpText(Main.npc[Main.player[Main.myPlayer].talkNPC]);
 						}
+
+						NPCLoader.OnChatButtonClicked(false);
 					}
 				}
 			}
@@ -35232,15 +_,16 @@
 				{
 					case 1:
 						Main.hoverItemName = Lang.inter[80];
-						break;
+					break;
 					case 2:
 						Main.hoverItemName = Lang.inter[79];
-						break;
+					break;
 					case 3:
 						Main.hoverItemName = (Main.CaptureModeDisabled ? Lang.inter[115] : Lang.inter[81]);
-						break;
-				}
-			}
+					break;
+				}
+			}
+
 			if (Main.EquipPage == 2)
 			{
 				Microsoft.Xna.Framework.Point value = new Microsoft.Xna.Framework.Point(Main.mouseX, Main.mouseY);
@@ -35267,33 +_,36 @@
 						{
 							case 0:
 								context = 19;
-								num20 = 0;
-								break;
+							num20 = 0;
+							break;
 							case 1:
 								context = 20;
-								num20 = 1;
-								break;
+							num20 = 1;
+							break;
 							case 2:
 								context = 18;
-								break;
+							break;
 							case 3:
 								context = 17;
-								break;
+							break;
 							case 4:
 								context = 16;
-								break;
-						}
+							break;
+						}
+
 						if (l == 1)
 						{
 							context = 12;
 							num20 = -1;
 						}
+
 						r.Y = num19 + m * 47;
 						Texture2D texture2D = Main.inventoryTickOnTexture;
 						if (Main.player[Main.myPlayer].hideMisc[num20])
 						{
 							texture2D = Main.inventoryTickOffTexture;
 						}
+
 						Microsoft.Xna.Framework.Rectangle r2 = new Microsoft.Xna.Framework.Rectangle(r.Left + 34, r.Top - 2, texture2D.Width, texture2D.Height);
 						int num21 = 0;
 						bool flag2 = false;
@@ -35393,23 +_,26 @@
 						{
 							Main.buffString += Lang.misc[39];
 						}
+
 						if (num30 == 147)
 						{
 							Main.bannerMouseOver = true;
 						}
+
 						if (num30 == 94)
 						{
 							int num31 = (int)(Main.player[Main.myPlayer].manaSickReduction * 100f) + 1;
 							Main.buffString = Main.buffString + num31 + "%";
 						}
+
+						int rare = 0;
 						if (Main.meleeBuff[num30])
 						{
-							this.MouseText(Main.buffName[num30], -10, 0);
-						}
-						else
-						{
-							this.MouseText(Main.buffName[num30], 0, 0);
-						}
+							rare = -10;
+						}
+
+						BuffLoader.ModifyBuffTip(num30, ref Main.buffString, ref rare);
+						this.MouseText(Main.buffName[num30], rare, 0);
 					}
 				}
 			}
@@ -35806,31 +_,36 @@
 						{
 							num67 = 1;
 						}
+
 						if (num67 >= 1000000)
 						{
 							num63 = num67 / 1000000;
 							num67 -= num63 * 1000000;
 						}
+
 						if (num67 >= 10000)
 						{
 							num64 = num67 / 10000;
 							num67 -= num64 * 10000;
 						}
+
 						if (num67 >= 100)
 						{
 							num65 = num67 / 100;
 							num67 -= num65 * 100;
 						}
+
 						if (num67 >= 1)
 						{
 							num66 = num67;
 						}
+
 						if (num63 > 0)
 						{
 							object obj = text3;
 							text3 = string.Concat(new object[]
-								{
-									obj,
+							{
+								obj,
 									"[c/",
 									Colors.AlphaDarken(Colors.CoinPlatinum).Hex3(),
 									":",
@@ -35838,14 +_,15 @@
 									" ",
 									Lang.inter[15],
 									"] "
-								});
-						}
+							});
+						}
+
 						if (num64 > 0)
 						{
 							object obj = text3;
 							text3 = string.Concat(new object[]
-								{
-									obj,
+							{
+								obj,
 									"[c/",
 									Colors.AlphaDarken(Colors.CoinGold).Hex3(),
 									":",
@@ -35853,14 +_,15 @@
 									" ",
 									Lang.inter[16],
 									"] "
-								});
-						}
+							});
+						}
+
 						if (num65 > 0)
 						{
 							object obj = text3;
 							text3 = string.Concat(new object[]
-								{
-									obj,
+							{
+								obj,
 									"[c/",
 									Colors.AlphaDarken(Colors.CoinSilver).Hex3(),
 									":",
@@ -35868,14 +_,15 @@
 									" ",
 									Lang.inter[17],
 									"] "
-								});
-						}
+							});
+						}
+
 						if (num66 > 0)
 						{
 							object obj = text3;
 							text3 = string.Concat(new object[]
-								{
-									obj,
+							{
+								obj,
 									"[c/",
 									Colors.AlphaDarken(Colors.CoinCopper).Hex3(),
 									":",
@@ -35883,8 +_,9 @@
 									" ",
 									Lang.inter[18],
 									"] "
-								});
-						}
+							});
+						}
+
 						ItemSlot.DrawSavings(Main.spriteBatch, (float)(num60 + 130), (float)this.invBottom, true);
 						ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, Main.fontMouseText, text3, new Vector2((float)(num60 + 50) + Main.fontMouseText.MeasureString(text2).X, (float)num61), Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, Vector2.One, -1f, 2f);
 						int num68 = num60 + 70;
@@ -35904,16 +_,19 @@
 							{
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							}
+
 							Main.mouseReforge = true;
 							Main.player[Main.myPlayer].mouseInterface = true;
 							if (Main.mouseLeftRelease && Main.mouseLeft && Main.player[Main.myPlayer].BuyItem(num62, -1))
 							{
 								bool favorited = Main.reforgeItem.favorited;
+								ItemLoader.PreReforge(Main.reforgeItem);
 								Main.reforgeItem.netDefaults(Main.reforgeItem.netID);
 								Main.reforgeItem.Prefix(-2);
 								Main.reforgeItem.position.X = Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2) - (float)(Main.reforgeItem.width / 2);
 								Main.reforgeItem.position.Y = Main.player[Main.myPlayer].position.Y + (float)(Main.player[Main.myPlayer].height / 2) - (float)(Main.reforgeItem.height / 2);
 								Main.reforgeItem.favorited = favorited;
+								ItemLoader.PostReforge(Main.reforgeItem);
 								ItemText.NewText(Main.reforgeItem, Main.reforgeItem.stack, true, false);
 								Main.PlaySound(SoundID.Item37, -1, -1);
 							}
@@ -35977,30 +_,35 @@
 									Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[23], new Vector2((float)num70, (float)(num71 + 118 + num75)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 									break;
 								}
+
 								break;
 							}
 							else
 							{
 								num73++;
-								Main.spriteBatch.DrawString(Main.fontMouseText, Lang.mapLegend[MapHelper.TileToLookup(Main.recipe[Main.availableRecipe[num72]].requiredTile[num74], 0)], new Vector2((float)num70, (float)(num71 + 118 + num75)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+								Main.spriteBatch.DrawString(Main.fontMouseText, Lang.mapLegend.FromType(Main.recipe[Main.availableRecipe[num72]].requiredTile[num74]), new Vector2((float)num70, (float)(num71 + 118 + num75)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 								num74++;
 							}
 						}
+
 						if (Main.recipe[Main.availableRecipe[num72]].needWater)
 						{
 							int num76 = (num73 + 1) * 26;
 							Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[53], new Vector2((float)num70, (float)(num71 + 118 + num76)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 						}
+
 						if (Main.recipe[Main.availableRecipe[num72]].needHoney)
 						{
 							int num77 = (num73 + 1) * 26;
 							Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[58], new Vector2((float)num70, (float)(num71 + 118 + num77)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 						}
+
 						if (Main.recipe[Main.availableRecipe[num72]].needLava)
 						{
 							int num78 = (num73 + 1) * 26;
 							Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[56], new Vector2((float)num70, (float)(num71 + 118 + num78)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 						}
+
 						if (Main.recipe[Main.availableRecipe[num72]].needSnowBiome)
 						{
 							int num79 = (num73 + 1) * 26;
@@ -36135,14 +_,15 @@
 							{
 								object obj = Main.hoverItemName;
 								Main.hoverItemName = string.Concat(new object[]
-									{
-										obj,
+								{
+									obj,
 										" (",
 										Main.recipe[Main.availableRecipe[num80]].createItem.stack,
 										")"
-									});
-							}
-						}
+								});
+							}
+						}
+
 						if (Main.numAvailableRecipes > 0)
 						{
 							num83 -= 50.0;
@@ -36235,23 +_,26 @@
 							{
 								Main.toolTip.name = Lang.misc[37] + " " + Lang.misc[38];
 							}
+
 							if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num85].stack > 1)
 							{
 								object obj = Main.hoverItemName;
 								Main.hoverItemName = string.Concat(new object[]
-									{
-										obj,
+								{
+									obj,
 										" (",
 										Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num85].stack,
 										")"
-									});
-							}
-						}
+								});
+							}
+						}
+
 						num88 -= 50.0;
 						if (num88 < 0.0)
 						{
 							num88 = 0.0;
 						}
+
 						UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = 1 + num85;
 						Microsoft.Xna.Framework.Color color5 = Main.inventoryBack;
 						Main.inventoryBack = new Microsoft.Xna.Framework.Color((int)((byte)num88), (int)((byte)num88), (int)((byte)num88), (int)((byte)num88));
@@ -36391,14 +_,15 @@
 						{
 							object obj = Main.hoverItemName;
 							Main.hoverItemName = string.Concat(new object[]
-								{
-									obj,
+							{
+								obj,
 									" (",
 									Main.recipe[Main.availableRecipe[num104]].createItem.stack,
 									")"
-								});
-						}
-					}
+							});
+						}
+					}
+
 					if (Main.numAvailableRecipes > 0)
 					{
 						num107 -= 50.0;
@@ -36613,12 +_,15 @@
 			{
 				Main.mouseItem.Prefix(-1);
 			}
+
 			Main.mouseItem.position.X = Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2) - (float)(Main.mouseItem.width / 2);
 			Main.mouseItem.position.Y = Main.player[Main.myPlayer].position.Y + (float)(Main.player[Main.myPlayer].height / 2) - (float)(Main.mouseItem.height / 2);
 			ItemText.NewText(Main.mouseItem, r.createItem.stack, false, false);
 			r.Create();
 			if (Main.mouseItem.type > 0 || r.createItem.type > 0)
 			{
+				RecipeHooks.OnCraft(Main.mouseItem, r);
+				ItemLoader.OnCraft(Main.mouseItem, r);
 				Main.PlaySound(7, -1, -1, 1, 1f, 0f);
 			}
 		}
@@ -36803,22 +_,25 @@
 							{
 								object obj = text;
 								text = string.Concat(new object[]
-									{
-										obj,
+								{
+									obj,
 										" (",
 										Main.item[i].stack,
 										")"
-									});
-							}
+								});
+							}
+
 							if (Main.item[i].owner < 255 && Main.showItemOwner)
 							{
 								text = text + " <" + Main.player[Main.item[i].owner].name + ">";
 							}
+
 							Main.rare = Main.item[i].rare;
 							if (Main.item[i].expert)
 							{
 								Main.rare = -12;
 							}
+
 							this.MouseText(text, Main.rare, 0);
 							Main.mouseText = true;
 							break;
@@ -36839,23 +_,26 @@
 						{
 							num = 0;
 						}
+
 						string text2 = string.Concat(new object[]
-							{
-								Main.player[j].name,
+						{
+							Main.player[j].name,
 								": ",
 								num,
 								"/",
 								Main.player[j].statLifeMax2
-							});
+						});
 						if (Main.player[j].hostile)
 						{
 							text2 = text2 + " " + Language.GetTextValue("Game.PvPFlag");
 						}
+
 						this.MouseText(text2, 0, Main.player[j].difficulty);
 						Main.mouseText = true;
 					}
 				}
 			}
+
 			Main.HoveringOverAnNPC = false;
 			if (!Main.mouseText)
 			{
@@ -36939,22 +_,25 @@
 								{
 									num4 = Main.npc[k].realLife;
 								}
+
 								if (Main.npc[num4].lifeMax > 1 && !Main.npc[num4].dontTakeDamage)
 								{
 									object obj2 = text3;
 									text3 = string.Concat(new object[]
-										{
-											obj2,
+									{
+										obj2,
 											": ",
 											Main.npc[num4].life,
 											"/",
 											Main.npc[num4].lifeMax
-										});
-								}
+									});
+								}
+
 								this.MouseText(text3, 0, 0);
 								Main.mouseText = true;
 								break;
 							}
+
 							if (flag2)
 							{
 								break;
@@ -37097,20 +_,22 @@
 			{
 				num4 = 10;
 			}
+
 			string text = string.Concat(new object[]
-				{
-					Lang.inter[0],
+			{
+				Lang.inter[0],
 					" ",
 					Main.player[Main.myPlayer].statLifeMax2,
 					"/",
 					Main.player[Main.myPlayer].statLifeMax2
-				});
+			});
 			Vector2 vector = Main.fontMouseText.MeasureString(text);
 			if (!Main.player[Main.myPlayer].ghost)
 			{
 				Main.spriteBatch.DrawString(Main.fontMouseText, Lang.inter[0], new Vector2((float)(500 + 13 * num4) - vector.X * 0.5f + (float)Main.UI_ScreenAnchorX, 6f), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 				Main.spriteBatch.DrawString(Main.fontMouseText, Main.player[Main.myPlayer].statLife + "/" + Main.player[Main.myPlayer].statLifeMax2, new Vector2((float)(500 + 13 * num4) + vector.X * 0.5f + (float)Main.UI_ScreenAnchorX, 6f), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, new Vector2(Main.fontMouseText.MeasureString(Main.player[Main.myPlayer].statLife + "/" + Main.player[Main.myPlayer].statLifeMax2).X, 0f), 1f, SpriteEffects.None, 0f);
 			}
+
 			for (int i = 1; i < (int)((float)Main.player[Main.myPlayer].statLifeMax2 / Main.UIDisplay_LifePerHeart) + 1; i++)
 			{
 				float num5 = 1f;
@@ -37241,31 +_,37 @@
 					Main.buffAlpha[i] = 0.4f;
 				}
 			}
+
 			if (num >= 0)
 			{
 				int num4 = Main.player[Main.myPlayer].buffType[num];
 				if (num4 > 0)
 				{
 					Main.buffString = Main.buffTip[num4];
+					int rare = 0;
 					if (num4 == 26 && Main.expertMode)
 					{
 						Main.buffString += Lang.misc[39];
 					}
+
 					if (num4 == 147)
 					{
 						Main.bannerMouseOver = true;
 					}
+
 					if (num4 == 94)
 					{
 						int num5 = (int)(Main.player[Main.myPlayer].manaSickReduction * 100f) + 1;
 						Main.buffString = Main.buffString + num5 + "%";
 					}
+
 					if (Main.meleeBuff[num4])
 					{
-						this.MouseText(Main.buffName[num4], -10, 0);
-						return;
-					}
-					this.MouseText(Main.buffName[num4], 0, 0);
+						rare = -10;
+					}
+
+					BuffLoader.ModifyBuffTip(num4, ref Main.buffString, ref rare);
+					this.MouseText(Main.buffName[num4], rare, 0);
 				}
 			}
 		}
@@ -37491,26 +_,30 @@
 						{
 							Main.player[Main.myPlayer].changeItem = i;
 						}
+
 						Main.hoverItemName = Main.player[Main.myPlayer].inventory[i].AffixName();
 						if (Main.player[Main.myPlayer].inventory[i].stack > 1)
 						{
 							object obj = Main.hoverItemName;
 							Main.hoverItemName = string.Concat(new object[]
-								{
-									obj,
+							{
+								obj,
 									" (",
 									Main.player[Main.myPlayer].inventory[i].stack,
 									")"
-								});
-						}
+							});
+						}
+
 						Main.rare = Main.player[Main.myPlayer].inventory[i].rare;
 					}
+
 					float num4 = Main.inventoryScale;
 					Main.inventoryScale = num2;
 					ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].inventory, 13, i, new Vector2((float)num, (float)num3), lightColor);
 					Main.inventoryScale = num4;
 					num += (int)((float)Main.inventoryBackTexture.Width * Main.hotbarScale[i]) + 4;
 				}
+
 				int selectedItem = Main.player[Main.myPlayer].selectedItem;
 				if (selectedItem >= 10 && (selectedItem != 58 || Main.mouseItem.type > 0))
 				{
@@ -37682,79 +_,89 @@
 			{
 				num17 = 0;
 			}
+
 			num12 = num17;
 			if (num17 >= 1000000)
 			{
 				num13 = num17 / 1000000;
 				num17 -= num13 * 1000000;
 			}
+
 			if (num17 >= 10000)
 			{
 				num14 = num17 / 10000;
 				num17 -= num14 * 10000;
 			}
+
 			if (num17 >= 100)
 			{
 				num15 = num17 / 100;
 				num17 -= num15 * 100;
 			}
+
 			if (num17 >= 1)
 			{
 				num16 = num17;
 			}
+
 			if (num13 > 0)
 			{
 				object obj = text;
 				text = string.Concat(new object[]
-					{
-						obj,
+				{
+					obj,
 						num13,
 						" ",
 						Lang.inter[15],
 						" "
-					});
-			}
+				});
+			}
+
 			if (num14 > 0)
 			{
 				object obj = text;
 				text = string.Concat(new object[]
-					{
-						obj,
+				{
+					obj,
 						num14,
 						" ",
 						Lang.inter[16],
 						" "
-					});
-			}
+				});
+			}
+
 			if (num15 > 0)
 			{
 				object obj = text;
 				text = string.Concat(new object[]
-					{
-						obj,
+				{
+					obj,
 						num15,
 						" ",
 						Lang.inter[17],
 						" "
-					});
-			}
+				});
+			}
+
 			if (num16 > 0)
 			{
 				object obj = text;
 				text = string.Concat(new object[]
-					{
-						obj,
+				{
+					obj,
 						num16,
 						" ",
 						Lang.inter[18],
 						" "
-					});
-			}
+				});
+			}
+
 			string textValue = Language.GetTextValue("GameUI.BuyWithValue", text);
 			if (num12 == 0)
 			{
 				textValue = Language.GetTextValue("GameUI.Buy");
 			}
+
 			int num18 = (int)((Main.mouseTextColor * 2 + 255) / 3);
 			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(num18, (int)((double)num18 / 1.1), num18 / 2, num18);
 			float scale = 0.9f;
@@ -38481,204 +_,205 @@
 			{
 				return;
 			}
+
 			this._needToSetupDrawInterfaceLayers = false;
 			this._drawInterfaceLayers = new List<MethodSequenceListItem>();
 			List<MethodSequenceListItem> arg_605_0 = this._drawInterfaceLayers;
 			MethodSequenceListItem[] array = new MethodSequenceListItem[42];
 			array[0] = new MethodSequenceListItem("Vanilla: Interface Logic 1", delegate
-				{
-					Main.DrawInterface_0_InterfaceLogic1();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_0_InterfaceLogic1();
+				return true;
+			}, null);
 			array[1] = new MethodSequenceListItem("Vanilla: Emote Bubbles", delegate
-				{
-					Main.DrawInterface_1_EmoteBubbles();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_1_EmoteBubbles();
+				return true;
+			}, null);
 			array[2] = new MethodSequenceListItem("Vanilla: Smart Cursor Targets", delegate
-				{
-					Main.DrawInterface_2_SmartCursorTargets();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_2_SmartCursorTargets();
+				return true;
+			}, null);
 			array[3] = new MethodSequenceListItem("Vanilla: Laser Ruler", delegate
-				{
-					Main.DrawInterface_3_LaserRuler();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_3_LaserRuler();
+				return true;
+			}, null);
 			array[4] = new MethodSequenceListItem("Vanilla: Ruler", delegate
-				{
-					Main.DrawInterface_4_Ruler();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_4_Ruler();
+				return true;
+			}, null);
 			array[5] = new MethodSequenceListItem("Vanilla: Gamepad Lock On", delegate
-				{
-					Main.DrawInterface_5_GamepadLockOn();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_5_GamepadLockOn();
+				return true;
+			}, null);
 			array[6] = new MethodSequenceListItem("Vanilla: Tile Grid Option", delegate
-				{
-					Main.DrawInterface_6_TileGridOption();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_6_TileGridOption();
+				return true;
+			}, null);
 			array[7] = new MethodSequenceListItem("Vanilla: Town NPC House Banners", delegate
-				{
-					this.DrawInterface_7_TownNPCHouseBanners();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_7_TownNPCHouseBanners();
+				return true;
+			}, null);
 			array[8] = new MethodSequenceListItem("Vanilla: Hide UI Toggle", new Func<bool>(Main.DrawInterface_8_CheckF11UIHideToggle), null);
 			array[9] = new MethodSequenceListItem("Vanilla: Wire Selection", delegate
-				{
-					Main.DrawInterface_9_WireSelection();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_9_WireSelection();
+				return true;
+			}, null);
 			array[10] = new MethodSequenceListItem("Vanilla: Capture Manager Check", new Func<bool>(Main.DrawInterface_10_CheckCaptureManager), null);
 			array[11] = new MethodSequenceListItem("Vanilla: Ingame Options", new Func<bool>(this.DrawInterface_11_IngameOptionsMenu), null);
 			array[12] = new MethodSequenceListItem("Vanilla: Fancy UI", new Func<bool>(Main.DrawInterface_12_IngameFancyUI), null);
 			array[13] = new MethodSequenceListItem("Vanilla: Achievement Complete Popups", delegate
-				{
-					Main.DrawInterface_13_AchievementCompletePopups();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_13_AchievementCompletePopups();
+				return true;
+			}, null);
 			array[14] = new MethodSequenceListItem("Vanilla: Entity Health Bars", delegate
-				{
-					this.DrawInterface_14_EntityHealthBars();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_14_EntityHealthBars();
+				return true;
+			}, null);
 			array[15] = new MethodSequenceListItem("Vanilla: Invasion Progress Bars", delegate
-				{
-					Main.DrawInterface_15_InvasionProgressBars();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_15_InvasionProgressBars();
+				return true;
+			}, null);
 			array[16] = new MethodSequenceListItem("Vanilla: Map / Minimap", delegate
-				{
-					this.DrawInterface_16_MapOrMinimap();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_16_MapOrMinimap();
+				return true;
+			}, null);
 			array[17] = new MethodSequenceListItem("Vanilla: Diagnose Net", delegate
-				{
-					Main.DrawInterface_17_DiagnoseNet();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_17_DiagnoseNet();
+				return true;
+			}, null);
 			array[18] = new MethodSequenceListItem("Vanilla: Diagnose Video", delegate
-				{
-					Main.DrawInterface_18_DiagnoseVideo();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_18_DiagnoseVideo();
+				return true;
+			}, null);
 			array[19] = new MethodSequenceListItem("Vanilla: Sign Tile Bubble", delegate
-				{
-					Main.DrawInterface_19_SignTileBubble();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_19_SignTileBubble();
+				return true;
+			}, null);
 			array[20] = new MethodSequenceListItem("Vanilla: MP Player Names", delegate
-				{
-					Main.DrawInterface_20_MultiplayerPlayerNames();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_20_MultiplayerPlayerNames();
+				return true;
+			}, null);
 			array[21] = new MethodSequenceListItem("Vanilla: Hair Window", delegate
-				{
-					this.DrawInterface_21_HairWindow();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_21_HairWindow();
+				return true;
+			}, null);
 			array[22] = new MethodSequenceListItem("Vanilla: Dresser Window", delegate
-				{
-					this.DrawInterface_22_DresserWindow();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_22_DresserWindow();
+				return true;
+			}, null);
 			array[23] = new MethodSequenceListItem("Vanilla: NPC / Sign Dialog", delegate
-				{
-					this.DrawInterface_23_NPCSignsDialog();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_23_NPCSignsDialog();
+				return true;
+			}, null);
 			array[24] = new MethodSequenceListItem("Vanilla: Interface Logic 2", delegate
-				{
-					Main.DrawInterface_24_InterfaceLogic2();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_24_InterfaceLogic2();
+				return true;
+			}, null);
 			array[25] = new MethodSequenceListItem("Vanilla: Resource Bars", delegate
-				{
-					this.DrawInterface_25_ResourceBars();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_25_ResourceBars();
+				return true;
+			}, null);
 			array[26] = new MethodSequenceListItem("Vanilla: Interface Logic 3", delegate
-				{
-					Main.DrawInterface_26_InterfaceLogic3();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_26_InterfaceLogic3();
+				return true;
+			}, null);
 			array[27] = new MethodSequenceListItem("Vanilla: Inventory", delegate
-				{
-					this.DrawInterface_27_Inventory();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_27_Inventory();
+				return true;
+			}, null);
 			array[28] = new MethodSequenceListItem("Vanilla: Info Accessories Bar", delegate
-				{
-					this.DrawInterface_28_InfoAccs();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_28_InfoAccs();
+				return true;
+			}, null);
 			array[29] = new MethodSequenceListItem("Vanilla: Settings Button", delegate
-				{
-					Main.DrawInterface_29_SettingsButton();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_29_SettingsButton();
+				return true;
+			}, null);
 			array[30] = new MethodSequenceListItem("Vanilla: Hotbar", delegate
-				{
-					this.DrawInterface_30_Hotbar();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_30_Hotbar();
+				return true;
+			}, null);
 			array[31] = new MethodSequenceListItem("Vanilla: Builder Accessories Bar", delegate
-				{
-					this.DrawInterface_31_BuilderAccToggles();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_31_BuilderAccToggles();
+				return true;
+			}, null);
 			array[32] = new MethodSequenceListItem("Vanilla: Radial Hotbars", delegate
-				{
-					Main.DrawInterface_32_GamepadRadialHotbars();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_32_GamepadRadialHotbars();
+				return true;
+			}, null);
 			array[33] = new MethodSequenceListItem("Vanilla: Mouse Text", delegate
-				{
-					this.DrawInterface_33_MouseText();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_33_MouseText();
+				return true;
+			}, null);
 			array[34] = new MethodSequenceListItem("Vanilla: Player Chat", delegate
-				{
-					this.DrawInterface_34_PlayerChat();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_34_PlayerChat();
+				return true;
+			}, null);
 			array[35] = new MethodSequenceListItem("Vanilla: Death Text", delegate
-				{
-					Main.DrawInterface_35_YouDied();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_35_YouDied();
+				return true;
+			}, null);
 			array[36] = new MethodSequenceListItem("Vanilla: Cursor", delegate
-				{
-					Main.DrawInterface_36_Cursor();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_36_Cursor();
+				return true;
+			}, null);
 			array[37] = new MethodSequenceListItem("Vanilla: Debug Stuff", delegate
-				{
-					Main.DrawInterface_37_DebugStuff();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_37_DebugStuff();
+				return true;
+			}, null);
 			array[38] = new MethodSequenceListItem("Vanilla: Mouse Item / NPC Head", delegate
-				{
-					this.DrawInterface_38_MouseCarriedObject();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_38_MouseCarriedObject();
+				return true;
+			}, null);
 			array[39] = new MethodSequenceListItem("Vanilla: Mouse Over", delegate
-				{
-					this.DrawInterface_39_MouseOver();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_39_MouseOver();
+				return true;
+			}, null);
 			array[40] = new MethodSequenceListItem("Vanilla: Interact Item Icon", delegate
-				{
-					this.DrawInterface_40_InteractItemIcon();
-					return true;
-				}, null);
+			{
+				this.DrawInterface_40_InteractItemIcon();
+				return true;
+			}, null);
 			array[41] = new MethodSequenceListItem("Vanilla: Interface Logic 4", delegate
-				{
-					Main.DrawInterface_41_InterfaceLogic4();
-					return true;
-				}, null);
+			{
+				Main.DrawInterface_41_InterfaceLogic4();
+				return true;
+			}, null);
 			arg_605_0.AddRange(array);
 		}
 
@@ -38689,11 +_,14 @@
 			{
 				this.SetupDrawInterfaceLayers();
 			}
+
 			List<MethodSequenceListItem> list = new List<MethodSequenceListItem>(this._drawInterfaceLayers);
 			foreach (MethodSequenceListItem current in list)
 			{
 				current.Skip = false;
 			}
+
+			ModHooks.ModifyInterfaceLayers(list);
 			MethodSequenceListItem.ExecuteSequence(list);
 		}
 
@@ -38884,14 +_,15 @@
 					num = 0.7f;
 					value = new Vector2(0.1f);
 				}
+
 				switch (Main.cursorOverride)
 				{
 					case 2:
 						flag = false;
-						white = Microsoft.Xna.Framework.Color.White;
-						num = 0.7f;
-						value = new Vector2(0.1f);
-						break;
+					white = Microsoft.Xna.Framework.Color.White;
+					num = 0.7f;
+					value = new Vector2(0.1f);
+					break;
 					case 3:
 					case 6:
 					case 7:
@@ -38899,13 +_,15 @@
 					case 9:
 					case 10:
 						flag = false;
-						white = Microsoft.Xna.Framework.Color.White;
-						break;
-				}
+					white = Microsoft.Xna.Framework.Color.White;
+					break;
+				}
+
 				if (flag)
 				{
 					Main.spriteBatch.Draw(Main.cursorTextures[Main.cursorOverride], new Vector2((float)(Main.mouseX + 1), (float)(Main.mouseY + 1)), null, color, rotation, value * Main.cursorTextures[Main.cursorOverride].Size(), Main.cursorScale * 1.1f * num, SpriteEffects.None, 0f);
 				}
+
 				if (flag2)
 				{
 					Main.spriteBatch.Draw(Main.cursorTextures[Main.cursorOverride], new Vector2((float)Main.mouseX, (float)Main.mouseY), null, white, rotation, value * Main.cursorTextures[Main.cursorOverride].Size(), Main.cursorScale * num, SpriteEffects.None, 0f);
@@ -38954,15 +_,19 @@
 					return;
 				}
 			}
+
 			this.DrawPlayerChat();
 		}
 
 		private void DrawInterface_33_MouseText()
 		{
+			// TODO - UI Sorting and selective disable support -  move this to new one between 32 and 33
+			ModLoader.ModHooks.PostDrawInterface(Main.spriteBatch);
 			if (Main.mouseItem.stack <= 0)
 			{
 				Main.mouseItem.type = 0;
 			}
+
 			if (Main.hoverItemName != null && Main.hoverItemName != "" && Main.mouseItem.type == 0)
 			{
 				Main.player[Main.myPlayer].showItemIcon = false;
@@ -39170,20 +_,22 @@
 						{
 							object obj = text;
 							text = string.Concat(new object[]
-								{
-									obj,
+							{
+								obj,
 									": ",
 									Main.player[i].statLife,
 									"/",
 									Main.player[i].statLifeMax2
-								});
-						}
+							});
+						}
+
 						Vector2 position = Main.fontMouseText.MeasureString(text);
 						float num = 0f;
 						if (Main.player[i].chatOverhead.timeLeft > 0)
 						{
 							num = -position.Y;
 						}
+
 						float num2 = 0f;
 						float num3 = (float)Main.mouseTextColor / 255f;
 						Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)((byte)((float)Main.teamColor[Main.player[i].team].R * num3)), (int)((byte)((float)Main.teamColor[Main.player[i].team].G * num3)), (int)((byte)((float)Main.teamColor[Main.player[i].team].B * num3)), (int)Main.mouseTextColor);
@@ -39543,86 +_,113 @@
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 35)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 36)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 50)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 113)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 114)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 125)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 126)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 127)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 128)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 129)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 130)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 131)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 222)
 							{
 								scale = 1.5f;
 							}
+
 							if (type >= 245 && type <= 249)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 262)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 266)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 564 || type == 565 || type == 551 || type == 576 || type == 577)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 87)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 510 || type == 454)
 							{
 								scale = 1.5f;
 							}
+
 							if (type == 439 || type == 370)
 							{
 								scale = 1.5f;
 							}
+
+							if (!NPCLoader.DrawHealthBar(Main.npc[i], ref scale))
+							{
+								Main.npc[i].position -= Main.npc[i].visualOffset;
+								continue;
+							}
+
 							if ((!Main.expertMode || type != 266) && ((type != 439 && type != 440) || Main.npc[i].ai[0] != 5f))
 							{
 								if (type >= 134 && type <= 136)
@@ -40523,14 +_,15 @@
 								text5 = "30";
 							}
 						}
+
 						text2 = string.Concat(new object[]
-							{
-								num6,
+						{
+							num6,
 								":",
 								text5,
 								" ",
 								text4
-							});
+						});
 						flag = true;
 					}
 					else if (Main.player[Main.myPlayer].accWeatherRadio && !flag5 && (!Main.player[Main.myPlayer].hideInfo[1] || Main.playerInventory))
@@ -40672,8 +_,9 @@
 						}
 						else
 						{
-							text2 = Language.GetTextValue("GameUI.OreDetected", Lang.mapLegend[MapHelper.TileToLookup(Main.player[Main.myPlayer].bestOre, 0)]);
-						}
+							text2 = Language.GetTextValue("GameUI.OreDetected", Lang.mapLegend.FromType(Main.player[Main.myPlayer].bestOre));
+						}
+
 						flag10 = true;
 					}
 					else if (Main.player[Main.myPlayer].accCritterGuide && !flag11 && (!Main.player[Main.myPlayer].hideInfo[11] || Main.playerInventory))
@@ -41068,179 +_,201 @@
 				{
 					vector.Y -= 44f;
 				}
+
 				bool flag = Utils.CenteredRectangle(vector, new Vector2(14f)).Contains(Main.MouseScreen.ToPoint()) && !PlayerInput.IgnoreMouseInterface;
 				bool flag2 = flag && Main.mouseLeft && Main.mouseLeftRelease;
 				switch (num3)
 				{
 					case 0:
 						if (player.rulerLine)
-						{
-							rectangle.X = num3 * 16;
-							color = ((builderAccStatus[num3] == 0) ? color : color2);
-							if (flag)
-							{
-								player.mouseInterface = true;
-								this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.RulerOn") : Language.GetTextValue("GameUI.RulerOff"), 0, 0);
-								Main.mouseText = true;
-							}
-							if (flag2)
-							{
-								builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
-								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
-								Main.mouseLeftRelease = false;
-								goto IL_5F2;
-							}
+					{
+						rectangle.X = num3 * 16;
+						color = ((builderAccStatus[num3] == 0) ? color : color2);
+						if (flag)
+						{
+							player.mouseInterface = true;
+							this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.RulerOn") : Language.GetTextValue("GameUI.RulerOff"), 0, 0);
+							Main.mouseText = true;
+						}
+
+						if (flag2)
+						{
+							builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
+							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
+							Main.mouseLeftRelease = false;
 							goto IL_5F2;
 						}
-						break;
+
+						goto IL_5F2;
+					}
+
+					break;
 					case 1:
 						if (player.rulerGrid)
-						{
-							rectangle.X = num3 * 16;
-							color = ((builderAccStatus[num3] == 0) ? color : color2);
-							if (flag)
-							{
-								player.mouseInterface = true;
-								this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.MechanicalRulerOn") : Language.GetTextValue("GameUI.MechanicalRulerOff"), 0, 0);
-								Main.mouseText = true;
-							}
-							if (flag2)
-							{
-								builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
-								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
-								Main.mouseLeftRelease = false;
-								goto IL_5F2;
-							}
+					{
+						rectangle.X = num3 * 16;
+						color = ((builderAccStatus[num3] == 0) ? color : color2);
+						if (flag)
+						{
+							player.mouseInterface = true;
+							this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.MechanicalRulerOn") : Language.GetTextValue("GameUI.MechanicalRulerOff"), 0, 0);
+							Main.mouseText = true;
+						}
+
+						if (flag2)
+						{
+							builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
+							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
+							Main.mouseLeftRelease = false;
 							goto IL_5F2;
 						}
-						break;
+
+						goto IL_5F2;
+					}
+
+					break;
 					case 2:
 						if (player.autoActuator)
-						{
-							rectangle.X = num3 * 16;
-							color = ((builderAccStatus[num3] == 0) ? color : color2);
-							if (flag)
-							{
-								player.mouseInterface = true;
-								this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.ActuationDeviceOn") : Language.GetTextValue("GameUI.ActuationDeviceOff"), 0, 0);
-								Main.mouseText = true;
-							}
-							if (flag2)
-							{
-								builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
-								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
-								Main.mouseLeftRelease = false;
-								goto IL_5F2;
-							}
+					{
+						rectangle.X = num3 * 16;
+						color = ((builderAccStatus[num3] == 0) ? color : color2);
+						if (flag)
+						{
+							player.mouseInterface = true;
+							this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.ActuationDeviceOn") : Language.GetTextValue("GameUI.ActuationDeviceOff"), 0, 0);
+							Main.mouseText = true;
+						}
+
+						if (flag2)
+						{
+							builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
+							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
+							Main.mouseLeftRelease = false;
 							goto IL_5F2;
 						}
-						break;
+
+						goto IL_5F2;
+					}
+
+					break;
 					case 3:
 						if (player.autoPaint)
-						{
-							rectangle.X = num3 * 16;
-							color = ((builderAccStatus[num3] == 0) ? color : color2);
-							if (flag)
-							{
-								player.mouseInterface = true;
-								this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.PaintSprayerOn") : Language.GetTextValue("GameUI.PaintSprayerOff"), 0, 0);
-								Main.mouseText = true;
-							}
-							if (flag2)
-							{
-								builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
-								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
-								Main.mouseLeftRelease = false;
-								goto IL_5F2;
-							}
+					{
+						rectangle.X = num3 * 16;
+						color = ((builderAccStatus[num3] == 0) ? color : color2);
+						if (flag)
+						{
+							player.mouseInterface = true;
+							this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.PaintSprayerOn") : Language.GetTextValue("GameUI.PaintSprayerOff"), 0, 0);
+							Main.mouseText = true;
+						}
+
+						if (flag2)
+						{
+							builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
+							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
+							Main.mouseLeftRelease = false;
 							goto IL_5F2;
 						}
-						break;
+
+						goto IL_5F2;
+					}
+
+					break;
 					case 4:
 					case 5:
 					case 6:
 					case 7:
 					case 9:
 						if (player.InfoAccMechShowWires)
-						{
-							rectangle.X = num3 * 16;
-							color = ((builderAccStatus[num3] == 0) ? color : ((builderAccStatus[num3] == 1) ? color2 : ((builderAccStatus[num3] == 2) ? color2.MultiplyRGBA(new Microsoft.Xna.Framework.Color(0.66f, 0.66f, 0.66f, 0.66f)) : color2.MultiplyRGBA(new Microsoft.Xna.Framework.Color(0.33f, 0.33f, 0.33f, 0.33f)))));
-							if (flag)
-							{
-								player.mouseInterface = true;
-								string arg = "";
-								switch (num3)
-								{
-									case 4:
+					{
+						rectangle.X = num3 * 16;
+						color = ((builderAccStatus[num3] == 0) ? color : ((builderAccStatus[num3] == 1) ? color2 : ((builderAccStatus[num3] == 2) ? color2.MultiplyRGBA(new Microsoft.Xna.Framework.Color(0.66f, 0.66f, 0.66f, 0.66f)) : color2.MultiplyRGBA(new Microsoft.Xna.Framework.Color(0.33f, 0.33f, 0.33f, 0.33f)))));
+						if (flag)
+						{
+							player.mouseInterface = true;
+							string arg = "";
+							switch (num3)
+							{
+								case 4:
 										arg = Language.GetTextValue("Game.RedWires");
-										break;
-									case 5:
+								break;
+								case 5:
 										arg = Language.GetTextValue("Game.BlueWires");
-										break;
-									case 6:
+								break;
+								case 6:
 										arg = Language.GetTextValue("Game.GreenWires");
-										break;
-									case 7:
+								break;
+								case 7:
 										arg = Language.GetTextValue("Game.YellowWires");
-										break;
-									case 9:
+								break;
+								case 9:
 										arg = Language.GetTextValue("Game.Actuators");
-										break;
-								}
-								string arg2 = "";
-								switch (builderAccStatus[num3])
-								{
-									case 0:
+								break;
+							}
+
+							string arg2 = "";
+							switch (builderAccStatus[num3])
+							{
+								case 0:
 										arg2 = Language.GetTextValue("GameUI.Bright");
-										break;
-									case 1:
+								break;
+								case 1:
 										arg2 = Language.GetTextValue("GameUI.Normal");
-										break;
-									case 2:
+								break;
+								case 2:
 										arg2 = Language.GetTextValue("GameUI.Faded");
-										break;
-									case 3:
+								break;
+								case 3:
 										arg2 = Language.GetTextValue("GameUI.Hidden");
-										break;
-								}
-								this.MouseText(string.Format("{0}: {1}", arg, arg2), 0, 0);
-								Main.mouseText = true;
-							}
-							if (flag2)
-							{
-								builderAccStatus[num3]++;
-								if (builderAccStatus[num3] >= 3)
-								{
-									builderAccStatus[num3] = 0;
-								}
-								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
-								Main.mouseLeftRelease = false;
-								goto IL_5F2;
-							}
+								break;
+							}
+
+							this.MouseText(string.Format("{0}: {1}", arg, arg2), 0, 0);
+							Main.mouseText = true;
+						}
+
+						if (flag2)
+						{
+							builderAccStatus[num3]++;
+							if (builderAccStatus[num3] >= 3)
+							{
+								builderAccStatus[num3] = 0;
+							}
+
+							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
+							Main.mouseLeftRelease = false;
 							goto IL_5F2;
 						}
-						break;
+
+						goto IL_5F2;
+					}
+
+					break;
 					case 8:
 						if (player.InfoAccMechShowWires)
-						{
-							rectangle.X = num3 * 16;
-							color = ((builderAccStatus[num3] == 0) ? color : color2);
-							if (flag)
-							{
-								player.mouseInterface = true;
-								this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.WireModeForced") : Language.GetTextValue("GameUI.WireModeNormal"), 0, 0);
-								Main.mouseText = true;
-							}
-							if (flag2)
-							{
-								builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
-								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
-								Main.mouseLeftRelease = false;
-								goto IL_5F2;
-							}
+					{
+						rectangle.X = num3 * 16;
+						color = ((builderAccStatus[num3] == 0) ? color : color2);
+						if (flag)
+						{
+							player.mouseInterface = true;
+							this.MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.WireModeForced") : Language.GetTextValue("GameUI.WireModeNormal"), 0, 0);
+							Main.mouseText = true;
+						}
+
+						if (flag2)
+						{
+							builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
+							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
+							Main.mouseLeftRelease = false;
 							goto IL_5F2;
 						}
-						break;
+
+						goto IL_5F2;
+					}
+
+					break;
 					case 10:
 						goto IL_5F2;
 					case 11:
@@ -41295,11 +_,13 @@
 									break;
 								default:
 									if (type != 111)
-									{
-										goto IL_2C6;
-									}
-									break;
-							}
+								{
+									goto IL_2C6;
+								}
+
+								break;
+							}
+
 							num2 = 4;
 						}
 						else
@@ -41310,18 +_,19 @@
 								case 144:
 								case 145:
 									num2 = 5;
-									break;
+								break;
 								default:
 									switch (type)
-									{
-										case 212:
+								{
+									case 212:
 										case 213:
 										case 214:
 										case 215:
 										case 216:
 											goto IL_2B9;
-									}
-									break;
+								}
+
+								break;
 							}
 						}
 					}
@@ -41346,7 +_,7 @@
 							case 329:
 							case 330:
 								num2 = 2;
-								break;
+							break;
 							case 316:
 							case 317:
 							case 318:
@@ -41379,11 +_,11 @@
 							case 349:
 							case 350:
 								num2 = 1;
-								break;
+							break;
 							default:
 								switch (type)
-								{
-									case 381:
+							{
+								case 381:
 									case 382:
 									case 383:
 									case 385:
@@ -41394,9 +_,10 @@
 									case 391:
 									case 395:
 										num2 = 7;
-										break;
-								}
 								break;
+							}
+
+							break;
 						}
 					}
 					else
@@ -41436,28 +_,33 @@
 							case 577:
 							case 578:
 								num2 = 3;
-								break;
-						}
-					}
+							break;
+						}
+					}
+
 					IL_2C6:
 					if (num2 == 0 || (num2 == 1 && ((double)player.position.Y > Main.worldSurface * 16.0 || Main.dayTime || !Main.snowMoon)) || (num2 == 2 && ((double)player.position.Y > Main.worldSurface * 16.0 || Main.dayTime || !Main.pumpkinMoon)) || (num2 == 3 && !DD2Event.Ongoing) || (num2 > 3 && ((double)player.position.Y > Main.worldSurface * 16.0 || Main.invasionType != num2 - 3)))
 					{
 						goto IL_3E3;
 					}
+
 					Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)(Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) - num, (int)(Main.npc[i].position.Y + (float)(Main.npc[i].height / 2)) - num, num * 2, num * 2);
 					if (rectangle.Intersects(value))
 					{
 						flag = true;
 						break;
 					}
+
 					goto IL_3E3;
 					IL_2B9:
 					num2 = 6;
 					goto IL_2C6;
 				}
+
 				IL_3E3:
 				;
 			}
+
 			Main.invasionProgressNearInvasion = flag;
 			if (flag && Main.invasionProgressIcon == 0)
 			{
@@ -41772,13 +_,13 @@
 		protected void QuitGame()
 		{
 			Main.SaveSettings();
-#if CLIENT
+			#if CLIENT
 			SocialAPI.Shutdown();
-#endif
+			#endif
 			base.Exit();
-#if MAC
+			#if MAC
             SDL.SDL_DestroyWindow(base.Window.Handle);
-#endif
+			#endif
 		}
 
 		protected Microsoft.Xna.Framework.Color randColor()
@@ -41964,17 +_,18 @@
 				{
 					case 0:
 						vector = new Vector2(0f, 1f);
-						break;
+					break;
 					case 1:
 						vector = new Vector2(1f, 0f);
-						break;
+					break;
 					case 2:
 						vector = new Vector2(0f, -1f);
-						break;
+					break;
 					case 3:
 						vector = new Vector2(-1f, 0f);
-						break;
-				}
+					break;
+				}
+
 				vector *= 1f;
 				vector += Vector2.One * 2f;
 				Vector2 origin = new Vector2(2f);
@@ -42251,7 +_,7 @@
 				{
 					Lang.lang = this.selectedMenu;
 					Lang.setLang(false);
-					Main.menuMode = 0;
+					Main.menuMode = ModLoader.Interface.loadModsID;
 					Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 					Main.SaveSettings();
 				}
@@ -42330,18 +_,19 @@
 								int expr_90F = (int)(intPtr = (IntPtr)k);
 								object obj = array10[(int)intPtr];
 								expr_90A[expr_90F] = string.Concat(new object[]
-									{
-										obj,
+								{
+									obj,
 										" (",
 										NetMessage.buffer[k].spamCount,
 										")"
-									});
+								});
 							}
 						}
 						catch
 						{
 							array9[k] = "";
 						}
+
 						array[k] = true;
 						if (array9[k] != "" && array9[k] != null)
 						{
@@ -42437,7 +_,7 @@
 			}
 			else
 			{
-				if (Main.netMode == 1 || Main.menuMode == 14)
+				if (Main.netMode == 1 && menuMode < 10000 && menuMode != 888 || Main.menuMode == 14)
 				{
 					num5 = 2;
 					array9[0] = Main.statusText;
@@ -42546,18 +_,20 @@
 						{
 							Main.menuMode = 6;
 						}
+
 						Netplay.ServerPassword = "";
 					}
 					else if (this.selectedMenu == 2 || Main.inputTextEnter || Main.autoPass)
 					{
 						string text = string.Concat(new object[]
-							{
+						{
+
 								"-autoshutdown -password \"",
 								Netplay.ServerPassword,
 								"\" -lang ",
 								Lang.lang
-							});
-#if LINUX
+						});
+						#if LINUX
 						if (IntPtr.Size == 8)
 						{
 							text += " -x64";
@@ -42566,7 +_,8 @@
 						{
 							text += " -x86";
 						}
-#endif
+
+						#endif
 						if (Main.ActiveWorldFileData.IsCloudSave)
 						{
 							text = text + " -cloudworld \"" + Main.worldPathName + "\"";
@@ -42576,9 +_,9 @@
 							text = text + " -world \"" + Main.worldPathName + "\"";
 						}
 #if WINDOWS
-						this.tServer.StartInfo.FileName = "TerrariaServer.exe";
+						this.tServer.StartInfo.FileName = "tModLoaderServer.exe";
 #else
-						this.tServer.StartInfo.FileName = "TerrariaServer";
+						this.tServer.StartInfo.FileName = "tModLoaderServer";
 #endif
 						this.tServer.StartInfo.Arguments = text;
 						if (Main.libPath != "")
@@ -42654,37 +_,39 @@
 							}
 						}
 					}
+
 					if (flag5)
 					{
 						flag5 = false;
 						this.selectedMenu = 5;
 					}
+
 					switch (this.selectedMenu)
 					{
 						case 1:
 							Main.MenuServerMode ^= ServerMode.Lobby;
-							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
-							break;
+						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
+						break;
 						case 2:
 							Main.MenuServerMode ^= ServerMode.FriendsCanJoin;
-							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
-							break;
+						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
+						break;
 						case 3:
 							Main.MenuServerMode ^= ServerMode.FriendsOfFriends;
-							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
-							break;
+						Main.PlaySound(12, -1, -1, 1, 1f, 0f);
+						break;
 						case 4:
 							Main.clrInput();
-							Netplay.ServerPassword = "";
-							Main.GetInputText("");
-							Main.autoPass = false;
-							Main.menuMode = 30;
-							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
-							break;
+						Netplay.ServerPassword = "";
+						Main.GetInputText("");
+						Main.autoPass = false;
+						Main.menuMode = 30;
+						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
+						break;
 						case 5:
 							Main.menuMode = 6;
-							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
-							break;
+						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
+						break;
 					}
 				}
 				else if (Main.menuMode == 15)
@@ -42708,17 +_,28 @@
 				{
 					num5 = 3;
 					array9[0] = Lang.menu[9];
+					if (WorldIO.customDataFail != null)
+					{
+						array9[0] = WorldIO.customDataFail.modName + " " + array9[0];
+					}
+
 					array[0] = true;
 					num2 -= 30;
 					array4[1] = 70;
 					array4[2] = 50;
 					array9[1] = Lang.menu[10];
 					array9[2] = Lang.menu[6];
+					if (WorldIO.customDataFail != null)
+					{
+						array9[2] = "View Error";
+					}
+
 					if (this.selectedMenu == 1)
 					{
 						if (FileUtilities.Exists(Main.worldPathName + ".bak", Main.ActiveWorldFileData.IsCloudSave))
 						{
 							FileUtilities.Move(Main.worldPathName + ".bak", Main.worldPathName, Main.ActiveWorldFileData.IsCloudSave, true);
+							WorldIO.LoadBackup(Main.worldPathName, Main.ActiveWorldFileData.IsCloudSave);
 							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 							WorldGen.playWorld();
 							Main.menuMode = 10;
@@ -42730,11 +_,20 @@
 							Main.netMode = 0;
 						}
 					}
+
 					if (this.selectedMenu == 2 || flag5)
 					{
 						flag5 = false;
 						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
-						Main.menuMode = 0;
+						if (WorldIO.customDataFail == null)
+						{
+							Main.menuMode = 0;
+						}
+						else
+						{
+							ErrorLogger.LogException(WorldIO.customDataFail.InnerException);
+						}
+
 						Main.netMode = 0;
 					}
 				}
@@ -42742,6 +_,11 @@
 				{
 					num5 = 3;
 					array9[0] = Lang.menu[9];
+					if (WorldIO.customDataFail != null)
+					{
+						array9[0] = WorldIO.customDataFail.modName + " " + array9[0];
+					}
+
 					array[0] = true;
 					array[1] = true;
 					num2 -= 30;
@@ -42749,11 +_,24 @@
 					array4[2] = 50;
 					array9[1] = Lang.menu[11];
 					array9[2] = Lang.menu[5];
+					if (WorldIO.customDataFail != null)
+					{
+						array9[2] = "View Error";
+					}
+
 					if (this.selectedMenu == 2 || flag5)
 					{
 						flag5 = false;
 						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
-						Main.menuMode = 0;
+						if (WorldIO.customDataFail == null)
+						{
+							Main.menuMode = 0;
+						}
+						else
+						{
+							ErrorLogger.LogException(WorldIO.customDataFail.InnerException);
+						}
+
 						Main.netMode = 0;
 					}
 				}
@@ -42790,62 +_,70 @@
 						{
 							case 0:
 								text2 = "Solar";
-								break;
+							break;
 							case 1:
 								text2 = "Vortex";
-								break;
+							break;
 							case 2:
 								text2 = "Nebula";
-								break;
+							break;
 							case 3:
 								text2 = "Stardust";
-								break;
+							break;
 							case 4:
 								text2 = "MoonLord";
-								break;
+							break;
 							case 5:
 								text2 = "MonolithSolar";
-								break;
+							break;
 							case 6:
 								text2 = "MonolithVortex";
-								break;
+							break;
 							case 7:
 								text2 = "MonolithNebula";
-								break;
+							break;
 							case 8:
 								text2 = "MonolithStardust";
-								break;
+							break;
 							case 9:
 								text2 = "Blizzard";
-								break;
+							break;
 							case 10:
 								text2 = "HeatDistortion";
-								break;
+							break;
 							case 11:
 								text2 = "Sandstorm";
-								break;
-						}
+							break;
+						}
+
 						if (SkyManager.Instance[text2] != null && SkyManager.Instance[text2].IsActive())
 						{
 							SkyManager.Instance.Deactivate(text2, new object[0]);
 						}
+
 						if (Filters.Scene[text2].IsActive())
 						{
 							Filters.Scene[text2].Deactivate(new object[0]);
 						}
 					}
+
 					if (Filters.Scene["BloodMoon"].IsActive())
 					{
 						Filters.Scene["BloodMoon"].Deactivate(new object[0]);
 					}
+
 					if (SkyManager.Instance["Martian"].IsActive())
 					{
 						SkyManager.Instance["Martian"].Deactivate(new object[0]);
 					}
+
 					if (SkyManager.Instance["Slime"].IsActive())
 					{
 						SkyManager.Instance["Slime"].Deactivate(new object[0]);
 					}
+
+					Filters.Scene.DeactivateAll();
+					SkyManager.Instance.DeactivateAll();
 					int num10 = 0;
 					num5 = 5;
 					num4 = 60;
@@ -42870,19 +_,23 @@
 						Main.MenuUI.SetState(Main.AchievementsMenu);
 						Main.menuMode = 888;
 					}
+
 					num10++;
+					Interface.AddMenuButtons(this, this.selectedMenu, array9, array7, ref num2, ref num4, ref num10, ref num5);
 					array9[num10] = Lang.menu[14];
 					if (this.selectedMenu == num10)
 					{
 						Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 						Main.menuMode = 11;
 					}
+
 					num10++;
 					array9[num10] = Lang.menu[15];
 					if (this.selectedMenu == num10)
 					{
 						this.QuitGame();
 					}
+
 					num10++;
 				}
 				else if (Main.menuMode == 1)
@@ -43558,11 +_,13 @@
 						num2 = 210;
 						num4 = 37;
 						num5 = 8;
+						num5++; // Room for tModLoader settings option.
 						array4[num5 - 1] = 8;
 						for (int num18 = 0; num18 < num5; num18++)
 						{
 							array7[num18] = 0.75f;
 						}
+
 						int num19 = 0;
 						array9[num19] = Lang.menu[114];
 						if (this.selectedMenu == num19)
@@ -43612,6 +_,15 @@
 							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 							Main.menuMode = 1213;
 						}
+
+						num19++;
+						array9[num19] = "tModLoader " + Lang.menu[14]; //"tModLoader Settings"
+						if (this.selectedMenu == num19)
+						{
+							Main.PlaySound(10, -1, -1, 1);
+							Main.menuMode = Interface.tModLoaderSettingsID;
+						}
+
 						num19++;
 						array9[num19] = Lang.menu[5];
 						if (this.selectedMenu == num19 || flag5)
@@ -43967,17 +_,18 @@
 						{
 							case 1:
 								textValue = Language.GetTextValue("GameUI.QualityLow");
-								break;
+							break;
 							case 2:
 								textValue = Language.GetTextValue("GameUI.QualityMedium");
-								break;
+							break;
 							case 3:
 								textValue = Language.GetTextValue("GameUI.QualityHigh");
-								break;
+							break;
 							default:
 								textValue = Language.GetTextValue("GameUI.QualityOff");
-								break;
-						}
+							break;
+						}
+
 						array9[4] = Language.GetTextValue("GameUI.WaveQuality", textValue);
 						array7[4] = 0.8f;
 						array9[5] = Lang.menu[5];
@@ -44021,13 +_,13 @@
 						num4 = 55;
 						int num26 = 0;
 						array9[num26] = string.Concat(new object[]
-							{
-								Lang.menu[73],
+						{
+							Lang.menu[73],
 								": ",
 								Main.PendingResolutionWidth,
 								"x",
 								Main.PendingResolutionHeight
-							});
+						});
 						if (this.selectedMenu == num26)
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
@@ -44129,24 +_,27 @@
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							Player.SmartCursorSettings.SmartBlocksEnabled = !Player.SmartCursorSettings.SmartBlocksEnabled;
 						}
+
 						num30++;
 						switch (LockOnHelper.UseMode)
 						{
 							case LockOnHelper.LockOnMode.FocusTarget:
 								array9[num30] = Lang.menu[232];
-								break;
+							break;
 							case LockOnHelper.LockOnMode.TargetClosest:
 								array9[num30] = Lang.menu[233];
-								break;
+							break;
 							case LockOnHelper.LockOnMode.ThreeDS:
 								array9[num30] = Lang.menu[234];
-								break;
-						}
+							break;
+						}
+
 						if (this.selectedMenu == num30)
 						{
 							Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 							LockOnHelper.CycleUseModes();
 						}
+
 						num30++;
 						array9[num30] = Lang.menu[5];
 						if (this.selectedMenu == num30 || flag5)
@@ -44617,23 +_,25 @@
 							if (Main.recentWorld[num38] != null && Main.recentWorld[num38] != "")
 							{
 								array9[num37] = string.Concat(new object[]
-									{
-										Main.recentWorld[num38],
+								{
+									Main.recentWorld[num38],
 										" (",
 										Main.recentIP[num38],
 										":",
 										Main.recentPort[num38],
 										")"
-									});
+								});
 							}
 							else
 							{
 								array9[num37] = "";
 								array[num37] = true;
 							}
+
 							array7[num37] = 0.6f;
 							array4[num37] = 40;
 						}
+
 						if (this.selectedMenu >= 2 && this.selectedMenu < 9)
 						{
 							Main.autoPass = false;
@@ -44778,14 +_,20 @@
 								Main.maxTilesX = 8400;
 								Main.maxTilesY = 2400;
 							}
+
 							Main.clrInput();
 							Main.menuMode = -7;
 							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 							WorldGen.setWorldSize();
 						}
 					}
-				}
-			}
+					else
+					{
+						Interface.ModLoaderMenus(this, this.selectedMenu, array9, array7, array4, ref num2, ref num4, ref num5, ref flag5);
+					}
+				}
+			}
+
 			IL_5075:
 			if (Main.menuMode == 888)
 			{
@@ -45211,30 +_,31 @@
 					{
 						case 0:
 							text4 = Lang.menu[98];
-							break;
+						break;
 						case 1:
 							text4 = Lang.menu[99];
-							num74 += 30;
-							break;
+						num74 += 30;
+						break;
 						case 2:
 							text4 = Lang.menu[119];
-							num74 += 60;
-							break;
+						num74 += 60;
+						break;
 						case 3:
 							text4 = Math.Round((double)(Main.soundVolume * 100f)) + "%";
-							num75 += 90;
-							break;
+						num75 += 90;
+						break;
 						case 4:
 							text4 = Math.Round((double)(Main.musicVolume * 100f)) + "%";
-							num75 += 90;
-							num74 += 30;
-							break;
+						num75 += 90;
+						num74 += 30;
+						break;
 						case 5:
 							text4 = Math.Round((double)(Main.ambientVolume * 100f)) + "%";
-							num75 += 90;
-							num74 += 60;
-							break;
-					}
+						num75 += 90;
+						num74 += 60;
+						break;
+					}
+
 					Microsoft.Xna.Framework.Color textColor = color;
 					textColor.R = (byte)((255 + textColor.R) / 2);
 					textColor.G = (byte)((255 + textColor.R) / 2);
@@ -45362,13 +_,16 @@
 						Main.caveParallax = 1f - (float)Main.bgScroll / 500f;
 					}
 				}
+
 				if (IngameOptions.rightHover != -1)
 				{
 					IngameOptions.rightLock = IngameOptions.rightHover;
 				}
 			}
+
 			for (int num91 = 0; num91 < num5; num91++)
 			{
+				//patch file: num5, array9, num91
 				if (array9[num91] != null)
 				{
 					Vector2 origin = Main.fontDeathText.MeasureString(array9[num91]);
@@ -45383,49 +_,55 @@
 							{
 								case 0:
 									color10 = color;
-									break;
+								break;
 								case 1:
 									color10 = Main.mcColor;
-									break;
+								break;
 								case 2:
 									color10 = Main.hcColor;
-									break;
+								break;
 								case 3:
 									color10 = Main.highVersionColor;
-									break;
+								break;
 								case 4:
 								case 5:
 								case 6:
 									color10 = Main.errorColor;
-									break;
+								break;
 								default:
 									color10 = color;
-									break;
-							}
+								break;
+							}
+
 							color10.R = (byte)((255 + color10.R) / 2);
 							color10.G = (byte)((255 + color10.G) / 2);
 							color10.B = (byte)((255 + color10.B) / 2);
 						}
+
 						int num93 = (int)(255f * (this.menuItemScale[num91] * 2f - 1f));
 						if (array[num91])
 						{
 							num93 = 255;
 						}
+
 						int num94 = (int)color10.R - (255 - num93);
 						if (num94 < 0)
 						{
 							num94 = 0;
 						}
+
 						int num95 = (int)color10.G - (255 - num93);
 						if (num95 < 0)
 						{
 							num95 = 0;
 						}
+
 						int num96 = (int)color10.B - (255 - num93);
 						if (num96 < 0)
 						{
 							num96 = 0;
 						}
+
 						if (num41 == num91 && num92 == 4)
 						{
 							float num97 = (float)num93 / 255f;
@@ -45475,9 +_,11 @@
 						{
 							num100 *= 0.5f;
 						}
+
 						num100 *= array7[num91];
 						if (!array8[num91])
 						{
+							//patch file: array9, array7, array4, num2, num4
 							Main.spriteBatch.DrawString(Main.fontDeathText, array9[num91], new Vector2((float)(num3 + num98 + array5[num91]), (float)(num2 + num4 * num91 + num99) + origin.Y * array7[num91] + (float)array4[num91]), color10, 0f, origin, num100, SpriteEffects.None, 0f);
 						}
 						else
@@ -45633,23 +_,29 @@
 				{
 					num107 = -2;
 				}
+
 				if (num106 == 1)
 				{
 					num107 = 2;
 				}
+
 				if (num106 == 2)
 				{
 					num108 = -2;
 				}
+
 				if (num106 == 3)
 				{
 					num108 = 2;
 				}
-				Vector2 origin3 = Main.fontMouseText.MeasureString(Main.versionNumber);
+
+				string drawVersion = Main.versionNumber + Environment.NewLine + ModLoader.ModLoader.versionedName;
+				Vector2 origin3 = Main.fontMouseText.MeasureString(drawVersion);
 				origin3.X *= 0.5f;
 				origin3.Y *= 0.5f;
-				Main.spriteBatch.DrawString(Main.fontMouseText, Main.versionNumber, new Vector2(origin3.X + (float)num107 + 10f, (float)Main.screenHeight - origin3.Y + (float)num108 - 2f), color12, 0f, origin3, 1f, SpriteEffects.None, 0f);
-			}
+				Main.spriteBatch.DrawString(Main.fontMouseText, drawVersion, new Vector2(origin3.X + (float)num107 + 10f, (float)Main.screenHeight - origin3.Y + (float)num108 - 2f), color12, 0f, origin3, 1f, SpriteEffects.None, 0f);
+			}
+
 			Vector2 bonus = Main.DrawThickCursor(false);
 			Main.DrawCursor(bonus, false);
 			if (Main.fadeCounter > 0)
@@ -45820,33 +_,37 @@
 				switch (i)
 				{
 					case 1:
-						{
-							int num3 = (int)(Main.GlobalTime * 8f) % 4;
-							value3 = new Microsoft.Xna.Framework.Rectangle((num3 >> 1) * (texture2D.Width >> 1), num3 % 2 * (texture2D.Height >> 1), texture2D.Width >> 1, texture2D.Height >> 1);
-							vector *= 0.5f;
-							zero.Y += 75f;
-							break;
-						}
+					{
+						int num3 = (int)(Main.GlobalTime * 8f) % 4;
+						value3 = new Microsoft.Xna.Framework.Rectangle((num3 >> 1) * (texture2D.Width >> 1), num3 % 2 * (texture2D.Height >> 1), texture2D.Width >> 1, texture2D.Height >> 1);
+						vector *= 0.5f;
+						zero.Y += 75f;
+						break;
+					}
+
 					case 2:
 						zero.Y += 75f;
-						break;
+					break;
 					case 3:
 						zero.Y += 75f;
-						break;
+					break;
 					case 4:
 						num2 = 0.5f;
-						zero.Y -= 25f;
-						break;
-				}
+					zero.Y -= 25f;
+					break;
+				}
+
 				if (flat)
 				{
 					num2 *= 1.5f;
 				}
+
 				vector *= num2;
 				if (flat)
 				{
 					zero.Y += (float)(Main.underworldTexture[0].Height >> 1) * 1.3f - vector.Y;
 				}
+
 				float num4 = num2 * (float)value3.Width;
 				float num5 = value.X * value2.X - vector.X + zero.X - (float)(Main.screenWidth >> 1);
 				int num6 = (int)(num5 / num4);
@@ -45953,24 +_,30 @@
 					num9 = 14;
 				}
 			}
+
 			if (Main.shroomTiles > 200)
 			{
 				num9 = 2;
 			}
+
+			UgBgStyleLoader.ChooseStyle(ref num9);
 			if (num9 != Main.ugBack)
 			{
 				Main.oldUgBack = Main.ugBack;
 				Main.ugBack = num9;
 				Main.ugBackTransition = 1f;
 			}
+
 			if (Main.ugBackTransition > 0f)
 			{
 				Main.ugBackTransition -= 0.25f;
 			}
+
 			if (Main.ugBackTransition < 0f)
 			{
 				Main.ugBackTransition = 0f;
 			}
+
 			int[] array2 = new int[7];
 			int[] array3 = new int[7];
 			for (int i = 0; i < 2; i++)
@@ -46151,19 +_,24 @@
 						array4[3] = 203 + Main.worldID % 4;
 					}
 				}
+
 				if (Main.hellBackStyle == 0)
 				{
 					array4[5] = 125;
 				}
+
 				if (Main.hellBackStyle == 1)
 				{
 					array4[5] = 126;
 				}
+
 				if (Main.hellBackStyle == 2)
 				{
 					array4[5] = 127;
 				}
+
 				array4[6] = 185 + Main.hellBackStyle;
+				UgBgStyleLoader.FillTextureArray(num10, array4);
 				this.LoadBackground(array4[0]);
 				this.LoadBackground(array4[1]);
 				this.LoadBackground(array4[2]);
@@ -46299,74 +_,83 @@
 													{
 														case 0:
 															if (!Main.tile[num22 - 1, num23 - 1].active())
-															{
-																color5 = array[num24];
-															}
-															break;
+														{
+															color5 = array[num24];
+														}
+
+														break;
 														case 1:
 															width = 8;
-															num25 = 4;
-															if (!Main.tile[num22, num23 - 1].active())
-															{
-																color5 = array[num24];
-															}
-															break;
+														num25 = 4;
+														if (!Main.tile[num22, num23 - 1].active())
+														{
+															color5 = array[num24];
+														}
+
+														break;
 														case 2:
 															num25 = 12;
-															if (!Main.tile[num22 + 1, num23 - 1].active())
-															{
-																color5 = array[num24];
-															}
-															break;
+														if (!Main.tile[num22 + 1, num23 - 1].active())
+														{
+															color5 = array[num24];
+														}
+
+														break;
 														case 3:
 															height = 8;
-															num26 = 4;
-															if (!Main.tile[num22 - 1, num23].active())
-															{
-																color5 = array[num24];
-															}
-															break;
+														num26 = 4;
+														if (!Main.tile[num22 - 1, num23].active())
+														{
+															color5 = array[num24];
+														}
+
+														break;
 														case 4:
 															width = 8;
-															height = 8;
-															num25 = 4;
-															num26 = 4;
-															break;
+														height = 8;
+														num25 = 4;
+														num26 = 4;
+														break;
 														case 5:
 															num25 = 12;
-															num26 = 4;
-															height = 8;
-															if (!Main.tile[num22 + 1, num23].active())
-															{
-																color5 = array[num24];
-															}
-															break;
+														num26 = 4;
+														height = 8;
+														if (!Main.tile[num22 + 1, num23].active())
+														{
+															color5 = array[num24];
+														}
+
+														break;
 														case 6:
 															num26 = 12;
-															if (!Main.tile[num22 - 1, num23 + 1].active())
-															{
-																color5 = array[num24];
-															}
-															break;
+														if (!Main.tile[num22 - 1, num23 + 1].active())
+														{
+															color5 = array[num24];
+														}
+
+														break;
 														case 7:
 															width = 8;
-															height = 4;
-															num25 = 4;
-															num26 = 12;
-															if (!Main.tile[num22, num23 + 1].active())
-															{
-																color5 = array[num24];
-															}
-															break;
+														height = 4;
+														num25 = 4;
+														num26 = 12;
+														if (!Main.tile[num22, num23 + 1].active())
+														{
+															color5 = array[num24];
+														}
+
+														break;
 														case 8:
 															num25 = 12;
-															num26 = 12;
-															if (!Main.tile[num22 + 1, num23 + 1].active())
-															{
-																color5 = array[num24];
-															}
-															break;
+														num26 = 12;
+														if (!Main.tile[num22 + 1, num23 + 1].active())
+														{
+															color5 = array[num24];
+														}
+
+														break;
 													}
+
 													color4.R = (byte)((color3.R + color5.R) / 2);
 													color4.G = (byte)((color3.G + color5.G) / 2);
 													color4.B = (byte)((color3.B + color5.B) / 2);
@@ -46408,15 +_,16 @@
 												{
 													case 1:
 														num28 = 8;
-														break;
+													break;
 													case 2:
 														num29 = 8;
-														break;
+													break;
 													case 3:
 														num28 = 8;
-														num29 = 8;
-														break;
+													num29 = 8;
+													break;
 												}
+
 												color7.R = (byte)((color3.R + color8.R) / 2);
 												color7.G = (byte)((color3.G + color8.G) / 2);
 												color7.B = (byte)((color3.B + color8.B) / 2);
@@ -46619,74 +_,83 @@
 												{
 													case 0:
 														if (!Main.tile[num50 - 1, num51 - 1].active())
-														{
-															color16 = array[num52];
-														}
-														break;
+													{
+														color16 = array[num52];
+													}
+
+													break;
 													case 1:
 														width2 = 8;
-														num53 = 4;
-														if (!Main.tile[num50, num51 - 1].active())
-														{
-															color16 = array[num52];
-														}
-														break;
+													num53 = 4;
+													if (!Main.tile[num50, num51 - 1].active())
+													{
+														color16 = array[num52];
+													}
+
+													break;
 													case 2:
 														num53 = 12;
-														if (!Main.tile[num50 + 1, num51 - 1].active())
-														{
-															color16 = array[num52];
-														}
-														break;
+													if (!Main.tile[num50 + 1, num51 - 1].active())
+													{
+														color16 = array[num52];
+													}
+
+													break;
 													case 3:
 														height2 = 8;
-														num54 = 4;
-														if (!Main.tile[num50 - 1, num51].active())
-														{
-															color16 = array[num52];
-														}
-														break;
+													num54 = 4;
+													if (!Main.tile[num50 - 1, num51].active())
+													{
+														color16 = array[num52];
+													}
+
+													break;
 													case 4:
 														width2 = 8;
-														height2 = 8;
-														num53 = 4;
-														num54 = 4;
-														break;
+													height2 = 8;
+													num53 = 4;
+													num54 = 4;
+													break;
 													case 5:
 														num53 = 12;
-														num54 = 4;
-														height2 = 8;
-														if (!Main.tile[num50 + 1, num51].active())
-														{
-															color16 = array[num52];
-														}
-														break;
+													num54 = 4;
+													height2 = 8;
+													if (!Main.tile[num50 + 1, num51].active())
+													{
+														color16 = array[num52];
+													}
+
+													break;
 													case 6:
 														num54 = 12;
-														if (!Main.tile[num50 - 1, num51 + 1].active())
-														{
-															color16 = array[num52];
-														}
-														break;
+													if (!Main.tile[num50 - 1, num51 + 1].active())
+													{
+														color16 = array[num52];
+													}
+
+													break;
 													case 7:
 														width2 = 8;
-														height2 = 4;
-														num53 = 4;
-														num54 = 12;
-														if (!Main.tile[num50, num51 + 1].active())
-														{
-															color16 = array[num52];
-														}
-														break;
+													height2 = 4;
+													num53 = 4;
+													num54 = 12;
+													if (!Main.tile[num50, num51 + 1].active())
+													{
+														color16 = array[num52];
+													}
+
+													break;
 													case 8:
 														num53 = 12;
-														num54 = 12;
-														if (!Main.tile[num50 + 1, num51 + 1].active())
-														{
-															color16 = array[num52];
-														}
-														break;
+													num54 = 12;
+													if (!Main.tile[num50 + 1, num51 + 1].active())
+													{
+														color16 = array[num52];
+													}
+
+													break;
 												}
+
 												color15.R = (byte)((color14.R + color16.R) / 2);
 												color15.G = (byte)((color14.G + color16.G) / 2);
 												color15.B = (byte)((color14.B + color16.B) / 2);
@@ -46718,15 +_,16 @@
 												{
 													case 1:
 														num56 = 8;
-														break;
+													break;
 													case 2:
 														num57 = 8;
-														break;
+													break;
 													case 3:
 														num56 = 8;
-														num57 = 8;
-														break;
+													num57 = 8;
+													break;
 												}
+
 												color18.R = (byte)((color14.R + color19.R) / 2);
 												color18.G = (byte)((color14.G + color19.G) / 2);
 												color18.B = (byte)((color14.B + color19.B) / 2);
@@ -46901,74 +_,83 @@
 												{
 													case 0:
 														if (!Main.tile[num70 - 1, num71 - 1].active())
-														{
-															color27 = array[num72];
-														}
-														break;
+													{
+														color27 = array[num72];
+													}
+
+													break;
 													case 1:
 														width3 = 8;
-														num73 = 4;
-														if (!Main.tile[num70, num71 - 1].active())
-														{
-															color27 = array[num72];
-														}
-														break;
+													num73 = 4;
+													if (!Main.tile[num70, num71 - 1].active())
+													{
+														color27 = array[num72];
+													}
+
+													break;
 													case 2:
 														num73 = 12;
-														if (!Main.tile[num70 + 1, num71 - 1].active())
-														{
-															color27 = array[num72];
-														}
-														break;
+													if (!Main.tile[num70 + 1, num71 - 1].active())
+													{
+														color27 = array[num72];
+													}
+
+													break;
 													case 3:
 														height3 = 8;
-														num74 = 4;
-														if (!Main.tile[num70 - 1, num71].active())
-														{
-															color27 = array[num72];
-														}
-														break;
+													num74 = 4;
+													if (!Main.tile[num70 - 1, num71].active())
+													{
+														color27 = array[num72];
+													}
+
+													break;
 													case 4:
 														width3 = 8;
-														height3 = 8;
-														num73 = 4;
-														num74 = 4;
-														break;
+													height3 = 8;
+													num73 = 4;
+													num74 = 4;
+													break;
 													case 5:
 														num73 = 12;
-														num74 = 4;
-														height3 = 8;
-														if (!Main.tile[num70 + 1, num71].active())
-														{
-															color27 = array[num72];
-														}
-														break;
+													num74 = 4;
+													height3 = 8;
+													if (!Main.tile[num70 + 1, num71].active())
+													{
+														color27 = array[num72];
+													}
+
+													break;
 													case 6:
 														num74 = 12;
-														if (!Main.tile[num70 - 1, num71 + 1].active())
-														{
-															color27 = array[num72];
-														}
-														break;
+													if (!Main.tile[num70 - 1, num71 + 1].active())
+													{
+														color27 = array[num72];
+													}
+
+													break;
 													case 7:
 														width3 = 8;
-														height3 = 4;
-														num73 = 4;
-														num74 = 12;
-														if (!Main.tile[num70, num71 + 1].active())
-														{
-															color27 = array[num72];
-														}
-														break;
+													height3 = 4;
+													num73 = 4;
+													num74 = 12;
+													if (!Main.tile[num70, num71 + 1].active())
+													{
+														color27 = array[num72];
+													}
+
+													break;
 													case 8:
 														num73 = 12;
-														num74 = 12;
-														if (!Main.tile[num70 + 1, num71 + 1].active())
-														{
-															color27 = array[num72];
-														}
-														break;
+													num74 = 12;
+													if (!Main.tile[num70 + 1, num71 + 1].active())
+													{
+														color27 = array[num72];
+													}
+
+													break;
 												}
+
 												color26.R = (byte)((color25.R + color27.R) / 2);
 												color26.G = (byte)((color25.G + color27.G) / 2);
 												color26.B = (byte)((color25.B + color27.B) / 2);
@@ -46991,15 +_,16 @@
 												{
 													case 1:
 														num76 = 8;
-														break;
+													break;
 													case 2:
 														num77 = 8;
-														break;
+													break;
 													case 3:
 														num76 = 8;
-														num77 = 8;
-														break;
+													num77 = 8;
+													break;
 												}
+
 												color28.R = (byte)((color25.R + color29.R) / 2);
 												color28.G = (byte)((color25.G + color29.G) / 2);
 												color28.B = (byte)((color25.B + color29.B) / 2);
@@ -47471,74 +_,83 @@
 													{
 														case 0:
 															if (!Main.tile[num28 - 1, num29 - 1].active())
-															{
-																color5 = array[num30];
-															}
-															break;
+														{
+															color5 = array[num30];
+														}
+
+														break;
 														case 1:
 															width = 8;
-															num31 = 4;
-															if (!Main.tile[num28, num29 - 1].active())
-															{
-																color5 = array[num30];
-															}
-															break;
+														num31 = 4;
+														if (!Main.tile[num28, num29 - 1].active())
+														{
+															color5 = array[num30];
+														}
+
+														break;
 														case 2:
 															num31 = 12;
-															if (!Main.tile[num28 + 1, num29 - 1].active())
-															{
-																color5 = array[num30];
-															}
-															break;
+														if (!Main.tile[num28 + 1, num29 - 1].active())
+														{
+															color5 = array[num30];
+														}
+
+														break;
 														case 3:
 															height = 8;
-															num32 = 4;
-															if (!Main.tile[num28 - 1, num29].active())
-															{
-																color5 = array[num30];
-															}
-															break;
+														num32 = 4;
+														if (!Main.tile[num28 - 1, num29].active())
+														{
+															color5 = array[num30];
+														}
+
+														break;
 														case 4:
 															width = 8;
-															height = 8;
-															num31 = 4;
-															num32 = 4;
-															break;
+														height = 8;
+														num31 = 4;
+														num32 = 4;
+														break;
 														case 5:
 															num31 = 12;
-															num32 = 4;
-															height = 8;
-															if (!Main.tile[num28 + 1, num29].active())
-															{
-																color5 = array[num30];
-															}
-															break;
+														num32 = 4;
+														height = 8;
+														if (!Main.tile[num28 + 1, num29].active())
+														{
+															color5 = array[num30];
+														}
+
+														break;
 														case 6:
 															num32 = 12;
-															if (!Main.tile[num28 - 1, num29 + 1].active())
-															{
-																color5 = array[num30];
-															}
-															break;
+														if (!Main.tile[num28 - 1, num29 + 1].active())
+														{
+															color5 = array[num30];
+														}
+
+														break;
 														case 7:
 															width = 8;
-															height = 4;
-															num31 = 4;
-															num32 = 12;
-															if (!Main.tile[num28, num29 + 1].active())
-															{
-																color5 = array[num30];
-															}
-															break;
+														height = 4;
+														num31 = 4;
+														num32 = 12;
+														if (!Main.tile[num28, num29 + 1].active())
+														{
+															color5 = array[num30];
+														}
+
+														break;
 														case 8:
 															num31 = 12;
-															num32 = 12;
-															if (!Main.tile[num28 + 1, num29 + 1].active())
-															{
-																color5 = array[num30];
-															}
-															break;
+														num32 = 12;
+														if (!Main.tile[num28 + 1, num29 + 1].active())
+														{
+															color5 = array[num30];
+														}
+
+														break;
 													}
+
 													color4.R = (byte)((color3.R + color5.R) / 2);
 													color4.G = (byte)((color3.G + color5.G) / 2);
 													color4.B = (byte)((color3.B + color5.B) / 2);
@@ -47580,15 +_,16 @@
 												{
 													case 1:
 														num34 = 8;
-														break;
+													break;
 													case 2:
 														num35 = 8;
-														break;
+													break;
 													case 3:
 														num34 = 8;
-														num35 = 8;
-														break;
+													num35 = 8;
+													break;
 												}
+
 												color7.R = (byte)((color3.R + color8.R) / 2);
 												color7.G = (byte)((color3.G + color8.G) / 2);
 												color7.B = (byte)((color3.B + color8.B) / 2);
@@ -47791,74 +_,83 @@
 												{
 													case 0:
 														if (!Main.tile[num56 - 1, num57 - 1].active())
-														{
-															color16 = array[num58];
-														}
-														break;
+													{
+														color16 = array[num58];
+													}
+
+													break;
 													case 1:
 														width2 = 8;
-														num59 = 4;
-														if (!Main.tile[num56, num57 - 1].active())
-														{
-															color16 = array[num58];
-														}
-														break;
+													num59 = 4;
+													if (!Main.tile[num56, num57 - 1].active())
+													{
+														color16 = array[num58];
+													}
+
+													break;
 													case 2:
 														num59 = 12;
-														if (!Main.tile[num56 + 1, num57 - 1].active())
-														{
-															color16 = array[num58];
-														}
-														break;
+													if (!Main.tile[num56 + 1, num57 - 1].active())
+													{
+														color16 = array[num58];
+													}
+
+													break;
 													case 3:
 														height2 = 8;
-														num60 = 4;
-														if (!Main.tile[num56 - 1, num57].active())
-														{
-															color16 = array[num58];
-														}
-														break;
+													num60 = 4;
+													if (!Main.tile[num56 - 1, num57].active())
+													{
+														color16 = array[num58];
+													}
+
+													break;
 													case 4:
 														width2 = 8;
-														height2 = 8;
-														num59 = 4;
-														num60 = 4;
-														break;
+													height2 = 8;
+													num59 = 4;
+													num60 = 4;
+													break;
 													case 5:
 														num59 = 12;
-														num60 = 4;
-														height2 = 8;
-														if (!Main.tile[num56 + 1, num57].active())
-														{
-															color16 = array[num58];
-														}
-														break;
+													num60 = 4;
+													height2 = 8;
+													if (!Main.tile[num56 + 1, num57].active())
+													{
+														color16 = array[num58];
+													}
+
+													break;
 													case 6:
 														num60 = 12;
-														if (!Main.tile[num56 - 1, num57 + 1].active())
-														{
-															color16 = array[num58];
-														}
-														break;
+													if (!Main.tile[num56 - 1, num57 + 1].active())
+													{
+														color16 = array[num58];
+													}
+
+													break;
 													case 7:
 														width2 = 8;
-														height2 = 4;
-														num59 = 4;
-														num60 = 12;
-														if (!Main.tile[num56, num57 + 1].active())
-														{
-															color16 = array[num58];
-														}
-														break;
+													height2 = 4;
+													num59 = 4;
+													num60 = 12;
+													if (!Main.tile[num56, num57 + 1].active())
+													{
+														color16 = array[num58];
+													}
+
+													break;
 													case 8:
 														num59 = 12;
-														num60 = 12;
-														if (!Main.tile[num56 + 1, num57 + 1].active())
-														{
-															color16 = array[num58];
-														}
-														break;
+													num60 = 12;
+													if (!Main.tile[num56 + 1, num57 + 1].active())
+													{
+														color16 = array[num58];
+													}
+
+													break;
 												}
+
 												color15.R = (byte)((color14.R + color16.R) / 2);
 												color15.G = (byte)((color14.G + color16.G) / 2);
 												color15.B = (byte)((color14.B + color16.B) / 2);
@@ -47890,15 +_,16 @@
 												{
 													case 1:
 														num62 = 8;
-														break;
+													break;
 													case 2:
 														num63 = 8;
-														break;
+													break;
 													case 3:
 														num62 = 8;
-														num63 = 8;
-														break;
+													num63 = 8;
+													break;
 												}
+
 												color18.R = (byte)((color14.R + color19.R) / 2);
 												color18.G = (byte)((color14.G + color19.G) / 2);
 												color18.B = (byte)((color14.B + color19.B) / 2);
@@ -48067,74 +_,83 @@
 												{
 													case 0:
 														if (!Main.tile[num76 - 1, num77 - 1].active())
-														{
-															color27 = array[num78];
-														}
-														break;
+													{
+														color27 = array[num78];
+													}
+
+													break;
 													case 1:
 														width3 = 8;
-														num79 = 4;
-														if (!Main.tile[num76, num77 - 1].active())
-														{
-															color27 = array[num78];
-														}
-														break;
+													num79 = 4;
+													if (!Main.tile[num76, num77 - 1].active())
+													{
+														color27 = array[num78];
+													}
+
+													break;
 													case 2:
 														num79 = 12;
-														if (!Main.tile[num76 + 1, num77 - 1].active())
-														{
-															color27 = array[num78];
-														}
-														break;
+													if (!Main.tile[num76 + 1, num77 - 1].active())
+													{
+														color27 = array[num78];
+													}
+
+													break;
 													case 3:
 														height3 = 8;
-														num80 = 4;
-														if (!Main.tile[num76 - 1, num77].active())
-														{
-															color27 = array[num78];
-														}
-														break;
+													num80 = 4;
+													if (!Main.tile[num76 - 1, num77].active())
+													{
+														color27 = array[num78];
+													}
+
+													break;
 													case 4:
 														width3 = 8;
-														height3 = 8;
-														num79 = 4;
-														num80 = 4;
-														break;
+													height3 = 8;
+													num79 = 4;
+													num80 = 4;
+													break;
 													case 5:
 														num79 = 12;
-														num80 = 4;
-														height3 = 8;
-														if (!Main.tile[num76 + 1, num77].active())
-														{
-															color27 = array[num78];
-														}
-														break;
+													num80 = 4;
+													height3 = 8;
+													if (!Main.tile[num76 + 1, num77].active())
+													{
+														color27 = array[num78];
+													}
+
+													break;
 													case 6:
 														num80 = 12;
-														if (!Main.tile[num76 - 1, num77 + 1].active())
-														{
-															color27 = array[num78];
-														}
-														break;
+													if (!Main.tile[num76 - 1, num77 + 1].active())
+													{
+														color27 = array[num78];
+													}
+
+													break;
 													case 7:
 														width3 = 8;
-														height3 = 4;
-														num79 = 4;
-														num80 = 12;
-														if (!Main.tile[num76, num77 + 1].active())
-														{
-															color27 = array[num78];
-														}
-														break;
+													height3 = 4;
+													num79 = 4;
+													num80 = 12;
+													if (!Main.tile[num76, num77 + 1].active())
+													{
+														color27 = array[num78];
+													}
+
+													break;
 													case 8:
 														num79 = 12;
-														num80 = 12;
-														if (!Main.tile[num76 + 1, num77 + 1].active())
-														{
-															color27 = array[num78];
-														}
-														break;
+													num80 = 12;
+													if (!Main.tile[num76 + 1, num77 + 1].active())
+													{
+														color27 = array[num78];
+													}
+
+													break;
 												}
+
 												color26.R = (byte)((color25.R + color27.R) / 2);
 												color26.G = (byte)((color25.G + color27.G) / 2);
 												color26.B = (byte)((color25.B + color27.B) / 2);
@@ -48157,15 +_,16 @@
 												{
 													case 1:
 														num82 = 8;
-														break;
+													break;
 													case 2:
 														num83 = 8;
-														break;
+													break;
 													case 3:
 														num82 = 8;
-														num83 = 8;
-														break;
+													num83 = 8;
+													break;
 												}
+
 												color28.R = (byte)((color25.R + color29.R) / 2);
 												color28.G = (byte)((color25.G + color29.G) / 2);
 												color28.B = (byte)((color25.B + color29.B) / 2);
@@ -48704,10 +_,16 @@
 					num26 -= 8.31f;
 					num26 *= num22;
 				}
+
 				Main.spriteBatch.End();
 				Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
 				flag = true;
-				if (Main.screenPosition.Y > (float)((Main.maxTilesY - 232) * 16))
+				Texture2D modTexture = PlayerHooks.GetMapBackgroundImage(Main.player[Main.myPlayer]);
+				if (modTexture != null)
+				{
+					Main.spriteBatch.Draw(modTexture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Microsoft.Xna.Framework.Color.White);
+				}
+				else if (Main.screenPosition.Y > (float)((Main.maxTilesY - 232) * 16))
 				{
 					Main.spriteBatch.Draw(this.mapBG3Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Microsoft.Xna.Framework.Color.White);
 				}
@@ -48858,40 +_,47 @@
 				num += num6 * num16;
 				num2 += num7 * num16;
 			}
+
 			if (Main.mapStyle == 1 && !Main.mapFullscreen)
 			{
 				if (num12 < num6)
 				{
 					num -= (num12 - num6) * num16;
 				}
+
 				if (num13 < num7)
 				{
 					num2 -= (num13 - num7) * num16;
 				}
 			}
+
 			num14 = num12 + num14;
 			num15 = num13 + num15;
 			if (num12 > num6)
 			{
 				num6 = num12;
 			}
+
 			if (num13 > num7)
 			{
 				num7 = num13;
 			}
+
 			if (num14 < num8)
 			{
 				num8 = num14;
 			}
+
 			if (num15 < num9)
 			{
 				num9 = num15;
 			}
+
 			float num34 = (float)Main.textureMaxWidth * num16;
 			float num35 = (float)Main.textureMaxHeight * num16;
 			float num36 = num;
 			float num37 = 0f;
-			for (int k = 0; k <= 4; k++)
+			for (int k = 0; k <= Main.mapTargetX - 1; k++)
 			{
 				if ((float)((k + 1) * Main.textureMaxWidth) > num6 && (float)(k * Main.textureMaxWidth) < num6 + num8)
 				{
@@ -49296,26 +_,31 @@
 							tile2 = new Tile();
 							Main.tile[num91, num92] = tile2;
 						}
+
 						int num101 = num91;
 						int num102 = num92;
 						if (tile2.frameX % 36 != 0)
 						{
 							num101--;
 						}
+
 						if (tile2.frameY % 36 != 0)
 						{
 							num102--;
 						}
+
 						text = Lang.chestType[(int)(tile2.frameX / 36)];
 					}
 					else if (type >= num96 && type < num96 + num97)
 					{
+						//patch file: num91, num92
 						Tile tile3 = Main.tile[num91, num92];
 						if (tile3 == null)
 						{
 							tile3 = new Tile();
 							Main.tile[num91, num92] = tile3;
 						}
+
 						int num103 = num91;
 						int num104 = num92;
 						num103 -= (int)(tile3.frameX % 54 / 18);
@@ -49339,13 +_,15 @@
 					}
 					else
 					{
-						text = Lang.mapLegend[type];
-					}
-				}
+						text = Lang.mapLegend.FromTile(Main.Map[num91, num92], num91, num92);
+					}
+				}
+
 				float num106 = (num16 * 0.25f * 2f + 1f) / 3f;
 				if (num106 > 1f)
 				{
 				}
+
 				num106 = 1f;
 				for (int num107 = 0; num107 < 200; num107++)
 				{
@@ -49514,14 +_,18 @@
 						Main.mapFullscreen = false;
 					}
 				}
+
 				Main.spriteBatch.Draw(Main.mapIconTexture[num139], new Vector2((float)num137, (float)num138), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.mapIconTexture[num139].Width, Main.mapIconTexture[num139].Height)), new Microsoft.Xna.Framework.Color(num140, num140, num140, num140), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+				ModLoader.ModHooks.PostDrawFullscreenMap(ref text);
 				Vector2 bonus = Main.DrawThickCursor(false);
 				Main.DrawCursor(bonus, false);
 			}
+
 			if (text != "")
 			{
 				this.MouseText(text, 0, 0);
 			}
+
 			TimeLogger.DetailedDrawTime(9);
 		}
 
@@ -50453,14 +_,18 @@
 				{
 					Main.waterStyle = 0;
 				}
+
+				WaterStyleLoader.ChooseWaterStyle(ref Main.waterStyle);
 				if (Main.bgStyle != 4 && Main.bloodMoon && !Main.dayTime)
 				{
 					Main.waterStyle = 9;
 				}
+
 				if (Main.fountainColor >= 0)
 				{
 					Main.waterStyle = Main.fountainColor;
 				}
+
 				if (Main.waterStyle == 0)
 				{
 					Main.liquidAlpha[2] -= 0.2f;
@@ -50945,53 +_,65 @@
 					{
 						Main.liquidAlpha[0] = 0f;
 					}
+
 					Main.liquidAlpha[2] -= 0.2f;
 					if (Main.liquidAlpha[2] < 0f)
 					{
 						Main.liquidAlpha[2] = 0f;
 					}
+
 					Main.liquidAlpha[3] -= 0.2f;
 					if (Main.liquidAlpha[3] < 0f)
 					{
 						Main.liquidAlpha[3] = 0f;
 					}
+
 					Main.liquidAlpha[4] -= 0.2f;
 					if (Main.liquidAlpha[4] < 0f)
 					{
 						Main.liquidAlpha[4] = 0f;
 					}
+
 					Main.liquidAlpha[5] -= 0.2f;
 					if (Main.liquidAlpha[5] < 0f)
 					{
 						Main.liquidAlpha[5] = 0f;
 					}
+
 					Main.liquidAlpha[6] -= 0.2f;
 					if (Main.liquidAlpha[6] < 0f)
 					{
 						Main.liquidAlpha[6] = 0f;
 					}
+
 					Main.liquidAlpha[7] -= 0.2f;
 					if (Main.liquidAlpha[7] < 0f)
 					{
 						Main.liquidAlpha[7] = 0f;
 					}
+
 					Main.liquidAlpha[8] -= 0.2f;
 					if (Main.liquidAlpha[8] < 0f)
 					{
 						Main.liquidAlpha[8] = 0f;
 					}
+
 					Main.liquidAlpha[9] -= 0.2f;
 					if (Main.liquidAlpha[9] < 0f)
 					{
 						Main.liquidAlpha[9] = 0f;
 					}
+
 					Main.liquidAlpha[10] += 0.2f;
 					if (Main.liquidAlpha[10] > 1f)
 					{
 						Main.liquidAlpha[10] = 1f;
 					}
 				}
-			}
+
+				WaterStyleLoader.UpdateLiquidAlphas();
+			}
+
 			Main.drewLava = false;
 			if (!Main.drawToScreen)
 			{
@@ -51010,18 +_,21 @@
 					Microsoft.Xna.Framework.Rectangle drawArea = new Microsoft.Xna.Framework.Rectangle(num, num3, num2 - num, num4 - num3);
 					LiquidRenderer.Instance.PrepareDraw(drawArea);
 				}
+
 				if (styleOverride != -1)
 				{
 					this.DrawWater(bg, styleOverride, 1f);
 					return;
 				}
-				for (int i = 0; i < 11; i++)
-				{
-					if (i != 1 && Main.liquidAlpha[i] > 0f)
+
+				for (int i = 0; i < WaterStyleLoader.WaterStyleCount; i++)
+				{
+					if (i != 1 && i != 11 && Main.liquidAlpha[i] > 0f)
 					{
 						this.DrawWater(bg, i, Main.liquidAlpha[i]);
 					}
 				}
+
 				return;
 			}
 			else
@@ -51193,27 +_,31 @@
 						if (Main.waterStyle < 10)
 						{
 							this.DrawWater(bg, 10, Main.liquidAlpha[10]);
-							return;
-						}
-						this.DrawWater(bg, 10, 1f);
-						return;
+						}
+						else
+						{
+							this.DrawWater(bg, 10, 1f);
+						}
 					}
 					else
 					{
 						this.DrawWater(bg, 10, Main.liquidAlpha[10]);
 					}
 				}
+
+				WaterStyleLoader.DrawWatersToScreen(bg);
 				return;
 			}
 		}
 
-		protected void DrawWater(bool bg = false, int Style = 0, float Alpha = 1f)
+		protected internal void DrawWater(bool bg = false, int Style = 0, float Alpha = 1f)
 		{
 			if (Main.drawToScreen)
 			{
 				this.oldDrawWater(bg, Style, Alpha);
 				return;
 			}
+
 			Stopwatch stopwatch = new Stopwatch();
 			stopwatch.Start();
 			Vector2 drawOffset = (Main.drawToScreen ? Vector2.Zero : new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange)) - Main.screenPosition;
@@ -51786,7 +_,8 @@
 						tile = new Tile();
 						Main.tile[j, i] = tile;
 					}
-					byte wall = tile.wall;
+
+					ushort wall = tile.wall;
 					if (wall > 0 && !this.FullTile(j, i))
 					{
 						Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
@@ -51794,6 +_,12 @@
 						{
 							this.LoadWall((int)wall);
 							int num9 = (int)(Main.wallFrame[(int)wall] * 180);
+							if (!WallLoader.PreDraw(j, i, wall, Main.spriteBatch))
+							{
+								WallLoader.PostDraw(j, i, wall, Main.spriteBatch);
+								continue;
+							}
+
 							if (Lighting.lightMode < 2 && !Main.wallLight[(int)wall] && (tile.wall < 88 || tile.wall > 93) && !WorldGen.SolidTile(tile))
 							{
 								Texture2D texture;
@@ -51852,23 +_,29 @@
 								{
 									Main.spriteBatch.Draw(Main.wallOutlineTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 2, 16)), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 								}
+
 								if (flag2)
 								{
 									Main.spriteBatch.Draw(Main.wallOutlineTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X + 14), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(14, 0, 2, 16)), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 								}
+
 								if (flag3)
 								{
 									Main.spriteBatch.Draw(Main.wallOutlineTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 2)), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 								}
+
 								if (flag4)
 								{
 									Main.spriteBatch.Draw(Main.wallOutlineTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y + 14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 14, 16, 2)), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 								}
 							}
-						}
-					}
-				}
-			}
+
+							WallLoader.PostDraw(j, i, wall, Main.spriteBatch);
+						}
+					}
+				}
+			}
+
 			this.DrawTileCracks(2);
 			TimeLogger.DrawTime(2, stopwatch.Elapsed.TotalMilliseconds);
 		}
@@ -52187,13 +_,13 @@
 								{
 									case 0:
 										num11 += 72;
-										break;
+									break;
 									case 1:
 										num11 += 144;
-										break;
+									break;
 									case 2:
 										num11 += 216;
-										break;
+									break;
 								}
 							}
 							else if (tile.type == 445)
@@ -52232,14 +_,15 @@
 							{
 								case 0:
 									color = Microsoft.Xna.Framework.Color.White;
-									break;
+								break;
 								case 2:
 									color *= 0.5f;
-									break;
+								break;
 								case 3:
 									color = Microsoft.Xna.Framework.Color.Transparent;
-									break;
-							}
+								break;
+							}
+
 							if (color == Microsoft.Xna.Framework.Color.Transparent)
 							{
 								num10 -= 1f;
@@ -52305,14 +_,15 @@
 							{
 								case 0:
 									color2 = Microsoft.Xna.Framework.Color.White;
-									break;
+								break;
 								case 2:
 									color2 *= 0.5f;
-									break;
+								break;
 								case 3:
 									color2 = Microsoft.Xna.Framework.Color.Transparent;
-									break;
-							}
+								break;
+							}
+
 							if (color2 == Microsoft.Xna.Framework.Color.Transparent)
 							{
 								num10 -= 1f;
@@ -52410,14 +_,15 @@
 							{
 								case 0:
 									color3 = Microsoft.Xna.Framework.Color.White;
-									break;
+								break;
 								case 2:
 									color3 *= 0.5f;
-									break;
+								break;
 								case 3:
 									color3 = Microsoft.Xna.Framework.Color.Transparent;
-									break;
-							}
+								break;
+							}
+
 							if (color3 == Microsoft.Xna.Framework.Color.Transparent)
 							{
 								num10 -= 1f;
@@ -52515,14 +_,15 @@
 							{
 								case 0:
 									color4 = Microsoft.Xna.Framework.Color.White;
-									break;
+								break;
 								case 2:
 									color4 *= 0.5f;
-									break;
+								break;
 								case 3:
 									color4 = Microsoft.Xna.Framework.Color.Transparent;
-									break;
-							}
+								break;
+							}
+
 							if (color4 == Microsoft.Xna.Framework.Color.Transparent)
 							{
 								num10 -= 1f;
@@ -52568,16 +_,18 @@
 						{
 							case 0:
 								value2 = Microsoft.Xna.Framework.Color.White;
-								break;
+							break;
 							case 2:
 								value2 *= 0.5f;
-								break;
+							break;
 							case 3:
 								value2 = Microsoft.Xna.Framework.Color.Transparent;
-								break;
-						}
+							break;
+						}
+
 						Main.spriteBatch.Draw(Main.actuatorTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y)) + zero2, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.actuatorTexture.Width, Main.actuatorTexture.Height)), value2 * scale, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 					}
+
 					if (tile.active())
 					{
 						ushort type = tile.type;
@@ -53499,89 +_,95 @@
 			if (i >= 0 && !Main.backgroundLoaded[i])
 			{
 				Main.backgroundTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Background_",
 							i
-						}));
+				}));
 				Main.backgroundWidth[i] = Main.backgroundTexture[i].Width;
 				Main.backgroundHeight[i] = Main.backgroundTexture[i].Height;
 				Main.backgroundLoaded[i] = true;
 			}
 		}
 
-		protected void LoadNPC(int i)
+		public void LoadNPC(int i)
 		{
 			if (!Main.NPCLoaded[i] || Main.npcTexture[i] == null)
 			{
 				Main.npcTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"NPC_",
 							i
-						}));
+				}));
 				Main.NPCLoaded[i] = true;
 			}
 		}
 
-		protected void LoadProjectile(int i)
+		public void LoadProjectile(int i)
 		{
 			if (!Main.projectileLoaded[i])
 			{
 				Main.projectileTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Projectile_",
 							i
-						}));
+				}));
 				Main.projectileLoaded[i] = true;
 			}
 		}
 
-		protected void LoadGore(int i)
+		public void LoadGore(int i)
 		{
 			if (!Main.goreLoaded[i])
 			{
 				Main.goreTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Gore_",
 							i
-						}));
+				}));
 				Main.goreLoaded[i] = true;
 			}
 		}
 
-		protected void LoadWall(int i)
+		public void LoadWall(int i)
 		{
 			if (!Main.wallLoaded[i])
 			{
 				Main.wallTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Wall_",
 							i
-						}));
+				}));
 				Main.wallLoaded[i] = true;
 			}
 		}
 
-		protected void LoadTiles(int i)
+		public void LoadTiles(int i)
 		{
 			if (!Main.tileSetsLoaded[i])
 			{
 				Main.tileTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Tiles_",
 							i
-						}));
+				}));
 				Main.tileSetsLoaded[i] = true;
 			}
 		}
@@ -53593,16 +_,18 @@
 				try
 				{
 					Main.itemFlameTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-							{
+					{
+
 								"Images",
 								Path.DirectorySeparatorChar,
 								"ItemFlame_",
 								i
-							}));
+					}));
 				}
 				catch
 				{
 				}
+
 				Main.itemFlameLoaded[i] = true;
 			}
 		}
@@ -53612,12 +_,13 @@
 			if (!Main.wingsLoaded[i])
 			{
 				Main.wingsTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Wings_",
 							i
-						}));
+				}));
 				Main.wingsLoaded[i] = true;
 			}
 		}
@@ -53627,19 +_,21 @@
 			if (!Main.hairLoaded[i])
 			{
 				Main.playerHairTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Player_Hair_",
 							i + 1
-						}));
+				}));
 				Main.playerHairAltTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Player_HairAlt_",
 							i + 1
-						}));
+				}));
 				Main.hairLoaded[i] = true;
 			}
 		}
@@ -53649,12 +_,13 @@
 			if (!Main.armorHeadLoaded[i])
 			{
 				Main.armorHeadTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Armor_Head_",
 							i
-						}));
+				}));
 				Main.armorHeadLoaded[i] = true;
 			}
 		}
@@ -53664,26 +_,29 @@
 			if (!Main.armorBodyLoaded[i])
 			{
 				Main.femaleBodyTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Female_Body_",
 							i
-						}));
+				}));
 				Main.armorBodyTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Armor_Body_",
 							i
-						}));
+				}));
 				Main.armorArmTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Armor_Arm_",
 							i
-						}));
+				}));
 				Main.armorBodyLoaded[i] = true;
 			}
 		}
@@ -53693,12 +_,13 @@
 			if (!Main.armorLegsLoaded[i])
 			{
 				Main.armorLegTexture[i] = this.OurLoad<Texture2D>(string.Concat(new object[]
-						{
+				{
+
 							"Images",
 							Path.DirectorySeparatorChar,
 							"Armor_Legs_",
 							i
-						}));
+				}));
 				Main.armorLegsLoaded[i] = true;
 			}
 		}
@@ -54061,9 +_,12 @@
 								Main.spriteBatch.Draw(Main.backgroundTexture[24], new Vector2((float)(this.bgStart + Main.bgW * num6), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[24], Main.backgroundHeight[24])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 							}
 						}
+
+						SurfaceBgStyleLoader.DrawFarTexture();
 						SkyManager.Instance.DrawToDepth(Main.spriteBatch, 5f);
 					}
 				}
+
 				this.cTop = (float)(this.bgTop - 50);
 				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 				{
@@ -54253,8 +_,11 @@
 								Main.spriteBatch.Draw(Main.backgroundTexture[42], new Vector2((float)(this.bgStart + Main.bgW * num17), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[42], Main.backgroundHeight[42])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 							}
 						}
-					}
-				}
+
+						SurfaceBgStyleLoader.DrawMiddleTexture();
+					}
+				}
+
 				this.cTop = (float)this.bgTop * 1.01f - 150f;
 				if ((double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 				{
@@ -54270,26 +_,31 @@
 								value3.B = (byte)((float)value3.B * Main.atmo);
 								value3.A = (byte)((float)value3.A * Main.atmo);
 							}
+
 							float num19 = Main.cloud[num18].position.Y * ((float)Main.screenHeight / 600f) - 100f;
 							float num20 = (float)((double)(Main.screenPosition.Y / 16f - 24f) / Main.worldSurface);
 							if (num20 < 0f)
 							{
 								num20 = 0f;
 							}
+
 							if (num20 > 1f)
 							{
 							}
+
 							if (Main.gameMenu)
 							{
 							}
+
 							Main.spriteBatch.Draw(Main.cloudTexture[Main.cloud[num18].type], new Vector2(Main.cloud[num18].position.X + (float)Main.cloudTexture[Main.cloud[num18].type].Width * 0.5f, num19 + (float)Main.cloudTexture[Main.cloud[num18].type].Height * 0.5f + this.cTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.cloudTexture[Main.cloud[num18].type].Width, Main.cloudTexture[Main.cloud[num18].type].Height)), value3 * scale, Main.cloud[num18].rotation, new Vector2((float)Main.cloudTexture[Main.cloud[num18].type].Width * 0.5f, (float)Main.cloudTexture[Main.cloud[num18].type].Height * 0.5f), Main.cloud[num18].scale, Main.cloud[num18].spriteDir, 0f);
 						}
 					}
 				}
 			}
+
 			if (!Main.mapFullscreen)
 			{
-				for (int num21 = 0; num21 < 10; num21++)
+				for (int num21 = 0; num21 < Main.bgAlpha2.Length; num21++)
 				{
 					if (Main.bgStyle == num21)
 					{
@@ -54950,6 +_,8 @@
 								}
 							}
 						}
+
+						//patch file: num21
 						if (Main.bgAlpha[num21] > 0f && num21 == 9)
 						{
 							float num44 = (float)Main.backColor.A / 255f;
@@ -55120,11 +_,15 @@
 									Main.spriteBatch.Draw(Main.backgroundTexture[48], new Vector2((float)(this.bgStart + Main.bgW * num51), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[48], Main.backgroundHeight[48])), color2, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 								}
 							}
+
 							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f);
 						}
-					}
-				}
-			}
+
+						SurfaceBgStyleLoader.DrawCloseBackground(num21);
+					}
+				}
+			}
+
 			if (!Main.mapFullscreen && Main.cloudAlpha > 0f && (double)Main.screenPosition.Y < Main.worldSurface * 16.0 + 16.0)
 			{
 				this.bgParallax = 0.1;
@@ -55300,10 +_,24 @@
 
 		private void DoDraw(GameTime gameTime)
 		{
+			try
+			{
+				do_Draw(gameTime);
+			}
+			catch (Exception e)
+			{
+				ErrorLogger.LogException(e);
+				throw;
+			}
+		}
+
+		protected void do_Draw(GameTime gameTime)
+		{
 			if (Main._drawCycleCounter == 0uL)
 			{
 				Main._tileFrameSeed = Utils.RandomNextSeed(Main._tileFrameSeed);
 			}
+
 			Main._drawCycleCounter = (Main._drawCycleCounter + 1uL) % 5uL;
 			Main.MenuUI.IsVisible = (Main.gameMenu && Main.menuMode == 888);
 			Main.InGameUI.IsVisible = (!Main.gameMenu && Main.InGameUI.CurrentState != null);
@@ -55467,6 +_,8 @@
 							{
 								num6 = 0.5f;
 							}
+
+							PlayerHooks.ModifyZoom(Main.player[Main.myPlayer], ref num6);
 							Vector2 vector2 = (Main.MouseScreen - new Vector2((float)Main.screenWidth, (float)Main.screenHeight) / 2f) / (new Vector2((float)Main.screenWidth, (float)Main.screenHeight) / 2f);
 							Vector2 vector3 = vector2;
 							num5 = 48f;
@@ -55487,20 +_,26 @@
 						{
 							num7 = Main.screenWidth;
 						}
+
 						if (num7 < 0)
 						{
 							num7 = 0;
 						}
+
 						if (num8 > Main.screenHeight)
 						{
 							num8 = Main.screenHeight;
 						}
+
 						if (num8 < 0)
 						{
 							num8 = 0;
 						}
-						num3 = (float)(num7 - Main.screenWidth / 2) / 1.25f;
-						num4 = (float)(num8 - Main.screenHeight / 2) / 1.25f;
+
+						float zoom = .8f;
+						PlayerHooks.ModifyZoom(Main.player[Main.myPlayer], ref zoom);
+						num3 = (float)(num7 - Main.screenWidth / 2) * zoom;
+						num4 = (float)(num8 - Main.screenHeight / 2) * zoom;
 					}
 					else if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 1254 && Main.mouseRight)
 					{
@@ -55510,20 +_,26 @@
 						{
 							num9 = Main.screenWidth;
 						}
+
 						if (num9 < 0)
 						{
 							num9 = 0;
 						}
+
 						if (num10 > Main.screenHeight)
 						{
 							num10 = Main.screenHeight;
 						}
+
 						if (num10 < 0)
 						{
 							num10 = 0;
 						}
-						num3 = (float)(num9 - Main.screenWidth / 2) / 1.5f;
-						num4 = (float)(num10 - Main.screenHeight / 2) / 1.5f;
+
+						float zoom = 0.6666667f;
+						PlayerHooks.ModifyZoom(Main.player[Main.myPlayer], ref zoom);
+						num3 = (float)(num9 - Main.screenWidth / 2) * zoom;
+						num4 = (float)(num10 - Main.screenHeight / 2) * zoom;
 					}
 					else if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 1299 && Main.player[Main.myPlayer].selectedItem != 58)
 					{
@@ -55533,20 +_,26 @@
 						{
 							num11 = Main.screenWidth;
 						}
+
 						if (num11 < 0)
 						{
 							num11 = 0;
 						}
+
 						if (num12 > Main.screenHeight)
 						{
 							num12 = Main.screenHeight;
 						}
+
 						if (num12 < 0)
 						{
 							num12 = 0;
 						}
-						num3 = (float)(num11 - Main.screenWidth / 2) / 1.5f;
-						num4 = (float)(num12 - Main.screenHeight / 2) / 1.5f;
+
+						float zoom = 0.6666667f;
+						PlayerHooks.ModifyZoom(Main.player[Main.myPlayer], ref zoom);
+						num3 = (float)(num11 - Main.screenWidth / 2) * zoom;
+						num4 = (float)(num12 - Main.screenHeight / 2) * zoom;
 					}
 					else if (Main.player[Main.myPlayer].scope && Main.mouseRight)
 					{
@@ -55556,30 +_,71 @@
 						{
 							num13 = Main.screenWidth;
 						}
+
 						if (num13 < 0)
 						{
 							num13 = 0;
 						}
+
 						if (num14 > Main.screenHeight)
 						{
 							num14 = Main.screenHeight;
 						}
+
 						if (num14 < 0)
 						{
 							num14 = 0;
 						}
-						num3 = (float)(num13 - Main.screenWidth / 2) / 2f;
-						num4 = (float)(num14 - Main.screenHeight / 2) / 2f;
-					}
-				}
+
+						float zoom = 0.5f;
+						PlayerHooks.ModifyZoom(Main.player[Main.myPlayer], ref zoom);
+						num3 = (float)(num13 - Main.screenWidth / 2) * zoom;
+						num4 = (float)(num14 - Main.screenHeight / 2) * zoom;
+					}
+					else
+					{
+						int mouseXClamped = Main.mouseX;
+						int mouseYClamped = Main.mouseY;
+						if (mouseXClamped > Main.screenWidth)
+						{
+							mouseXClamped = Main.screenWidth;
+						}
+
+						if (mouseXClamped < 0)
+						{
+							mouseXClamped = 0;
+						}
+
+						if (mouseYClamped > Main.screenHeight)
+						{
+							mouseYClamped = Main.screenHeight;
+						}
+
+						if (mouseYClamped < 0)
+						{
+							mouseYClamped = 0;
+						}
+
+						float zoom = -1f;
+						PlayerHooks.ModifyZoom(Main.player[Main.myPlayer], ref zoom);
+						if (zoom != -1f)
+						{
+							num3 = (float)(mouseXClamped - Main.screenWidth / 2) * zoom;
+							num4 = (float)(mouseYClamped - Main.screenHeight / 2) * zoom;
+						}
+					}
+				}
+
 				if (float.IsNaN(Main.zoomX))
 				{
 					Main.zoomX = 0f;
 				}
+
 				if (float.IsNaN(Main.zoomY))
 				{
 					Main.zoomY = 0f;
 				}
+
 				float num15 = num3 - Main.zoomX;
 				float num16 = num4 - Main.zoomY;
 				float num17 = (float)Math.Sqrt((double)(num15 * num15 + num16 * num16));
@@ -55612,9 +_,12 @@
 						Main.screenPosition = Vector2.Lerp(value2, Main.screenPosition, Main.cameraLerp);
 					}
 				}
+
 				Main.screenPosition.X = (float)((int)Main.screenPosition.X);
 				Main.screenPosition.Y = (float)((int)Main.screenPosition.Y);
-			}
+				PlayerHooks.ModifyScreenPosition(Main.player[Main.myPlayer]);
+			}
+
 			if (!Main.gameMenu && Main.netMode != 2)
 			{
 				if (Main.screenPosition.X < Main.leftWorld + 640f + 16f)
@@ -56418,11 +_,14 @@
 				Main.Transform = Matrix.CreateScale(value.X, -value.Y, value.Z) * Matrix.CreateRotationZ(0f) * Matrix.CreateTranslation(new Vector3(0f, (float)Main.screenHeight, 0f));
 				this.Rasterizer = RasterizerState.CullClockwise;
 			}
+
+			Transform = ModHooks.ModifyTransformMatrix(Transform);
 			bool flag = !Main.drawToScreen && Main.netMode != 2 && !Main.gameMenu && !Main.mapFullscreen && Filters.Scene.CanCapture();
 			if (flag)
 			{
 				Filters.Scene.BeginCapture();
 			}
+
 			Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, Main.Transform);
 			TimeLogger.DetailedDrawReset();
 			if (!Main.mapFullscreen)
@@ -56830,11 +_,16 @@
 							goto IL_4183;
 						}
 					}
+
 					this.DrawMap();
 				}
+
 				IL_4183:
 				TimeLogger.DetailedDrawReset();
 				Main.spriteBatch.End();
+
+				WorldHooks.PostDrawTiles();
+
 				TimeLogger.DetailedDrawTime(35);
 				this.SortDrawCacheWorms();
 				this.DrawCachedProjs(this.DrawCacheProjsBehindProjectiles, true);
@@ -57002,13 +_,14 @@
 							if (Main.itemText[num76].stack > 1)
 							{
 								text = string.Concat(new object[]
-									{
-										text,
+								{
+									text,
 										" (",
 										Main.itemText[num76].stack,
 										")"
-									});
-							}
+								});
+							}
+
 							Vector2 vector7 = Main.fontMouseText.MeasureString(text);
 							Vector2 origin2 = new Vector2(vector7.X * 0.5f, vector7.Y * 0.5f);
 							float arg_49F7_0 = Main.itemText[num76].scale;
@@ -57049,45 +_,53 @@
 									num80 = (float)Main.itemText[num76].color.A * Main.itemText[num76].scale * Main.itemText[num76].alpha;
 									color10 = new Microsoft.Xna.Framework.Color((int)num77, (int)num78, (int)num79, (int)num80);
 								}
+
 								if (num81 < 4)
 								{
 									num80 = (float)Main.itemText[num76].color.A * Main.itemText[num76].scale * Main.itemText[num76].alpha;
 									color10 = new Microsoft.Xna.Framework.Color(0, 0, 0, (int)num80);
 								}
+
 								float num84 = Main.itemText[num76].position.Y - Main.screenPosition.Y + (float)num83;
 								if (Main.player[Main.myPlayer].gravDir == -1f)
 								{
 									num84 = (float)Main.screenHeight - num84;
 								}
+
 								Main.spriteBatch.DrawString(Main.fontMouseText, text, new Vector2(Main.itemText[num76].position.X - Main.screenPosition.X + (float)num82 + origin2.X, num84 + origin2.Y), color10, Main.itemText[num76].rotation, origin2, Main.itemText[num76].scale, SpriteEffects.None, 0f);
 							}
 						}
 					}
+
 					if (Main.netMode == 1 && Netplay.Connection.StatusText != "" && Netplay.Connection.StatusText != null)
 					{
 						string text2 = string.Concat(new object[]
-							{
-								Netplay.Connection.StatusText,
+						{
+							Netplay.Connection.StatusText,
 								": ",
 								(int)((float)Netplay.Connection.StatusCount / (float)Netplay.Connection.StatusMax * 100f),
 								"%"
-							});
+						});
 						Main.spriteBatch.DrawString(Main.fontMouseText, text2, new Vector2(628f - Main.fontMouseText.MeasureString(text2).X * 0.5f + (float)(Main.screenWidth - 800), 84f), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 					}
+
 					if (Main.BlackFadeIn > 0)
 					{
 						if (Main.BlackFadeIn < 0)
 						{
 							Main.BlackFadeIn = 0;
 						}
+
 						int num85 = Main.BlackFadeIn;
 						if (num85 > 255)
 						{
 							num85 = 255;
 						}
+
 						Main.BlackFadeIn -= 25;
 						Main.spriteBatch.Draw(Main.loTexture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), new Microsoft.Xna.Framework.Color(0, 0, 0, num85));
 					}
+
 					this.DrawFPS();
 					if (!Main.mapFullscreen)
 					{
@@ -57256,12 +_,15 @@
 			{
 				num3 = 0;
 			}
+
+			SurfaceBgStyleLoader.ChooseStyle(ref num3);
 			int num5 = 30;
 			Main.tranSpeed = 0.05f;
 			if (num3 == 0)
 			{
 				num5 = 60;
 			}
+
 			if (Main.bgDelay < 0)
 			{
 				Main.bgDelay++;
@@ -57499,75 +_,101 @@
 				{
 					Main.bgAlpha2[0] = 1f;
 				}
+
 				Main.bgAlpha2[1] -= Main.tranSpeed;
 				if (Main.bgAlpha2[1] < 0f)
 				{
 					Main.bgAlpha2[1] = 0f;
 				}
+
 				Main.bgAlpha2[2] -= Main.tranSpeed;
 				if (Main.bgAlpha2[2] < 0f)
 				{
 					Main.bgAlpha2[2] = 0f;
 				}
+
 				Main.bgAlpha2[3] -= Main.tranSpeed;
 				if (Main.bgAlpha2[3] < 0f)
 				{
 					Main.bgAlpha2[3] = 0f;
 				}
+
 				Main.bgAlpha2[4] -= Main.tranSpeed;
 				if (Main.bgAlpha2[4] < 0f)
 				{
 					Main.bgAlpha2[4] = 0f;
 				}
+
 				Main.bgAlpha2[5] -= Main.tranSpeed;
 				if (Main.bgAlpha2[5] < 0f)
 				{
 					Main.bgAlpha2[5] = 0f;
 				}
+
 				Main.bgAlpha2[6] += Main.tranSpeed;
 				if (Main.bgAlpha2[6] > 1f)
 				{
 					Main.bgAlpha2[6] = 1f;
 				}
 			}
-			else
+			else if (Main.bgStyle == 0 || Main.bgStyle == 3)
 			{
 				Main.bgAlpha2[0] += Main.tranSpeed;
 				if (Main.bgAlpha2[0] > 1f)
 				{
 					Main.bgAlpha2[0] = 1f;
 				}
+
 				Main.bgAlpha2[1] -= Main.tranSpeed;
 				if (Main.bgAlpha2[1] < 0f)
 				{
 					Main.bgAlpha2[1] = 0f;
 				}
+
 				Main.bgAlpha2[2] -= Main.tranSpeed;
 				if (Main.bgAlpha2[2] < 0f)
 				{
 					Main.bgAlpha2[2] = 0f;
 				}
+
 				Main.bgAlpha2[3] -= Main.tranSpeed;
 				if (Main.bgAlpha2[3] < 0f)
 				{
 					Main.bgAlpha2[3] = 0f;
 				}
+
 				Main.bgAlpha2[4] -= Main.tranSpeed;
 				if (Main.bgAlpha2[4] < 0f)
 				{
 					Main.bgAlpha2[4] = 0f;
 				}
+
 				Main.bgAlpha2[5] -= Main.tranSpeed;
 				if (Main.bgAlpha2[5] < 0f)
 				{
 					Main.bgAlpha2[5] = 0f;
 				}
+
 				Main.bgAlpha2[6] -= Main.tranSpeed;
 				if (Main.bgAlpha2[6] < 0f)
 				{
 					Main.bgAlpha2[6] = 0f;
 				}
 			}
+
+			if(Main.bgStyle < SurfaceBgStyleLoader.vanillaSurfaceBgStyleCount)
+			{
+				for (int i = SurfaceBgStyleLoader.vanillaSurfaceBgStyleCount; i < Main.bgAlpha2.Length /*SurfaceBackgroundStyleLoader.SurfaceStyleCount*/; i++)
+				{
+					Main.bgAlpha2[i] -= Main.tranSpeed;
+					if (Main.bgAlpha2[i] < 0f)
+					{
+						Main.bgAlpha2[i] = 0f;
+					}
+				}
+			}
+
+			SurfaceBgStyleLoader.ModifyFarFades(Main.bgStyle, Main.bgAlpha2, Main.tranSpeed);
 			if (Main.ignoreErrors)
 			{
 				try
@@ -57883,17 +_,18 @@
 				case 1:
 				case 2:
 					num = 80;
-					num2 = 40;
-					break;
+				num2 = 40;
+				break;
 				case 3:
 					num = 120;
-					num2 = 60;
-					break;
+				num2 = 60;
+				break;
 				case 4:
 					num = 160;
-					num2 = 40;
-					break;
-			}
+				num2 = 40;
+				break;
+			}
+
 			int num3 = (int)Math.Ceiling((double)((float)(Main.invasionSize - num) / (float)num2));
 			Main.invasionSizeStart = num;
 			if (num3 > 0)
@@ -57997,11 +_,17 @@
 						Netplay.Clients[k].PendingTermination = true;
 					}
 				}
+
 				if (Main.player[k].active)
 				{
 					RemoteClient.CheckSection(k, Main.player[k].position, 1);
 				}
 			}
+		}
+
+		public static void NewText(string newText, Microsoft.Xna.Framework.Color color, bool force = false)
+		{
+			NewText(newText, color.R, color.G, color.B, force);
 		}
 
 		public static void NewText(string newText, byte R = 255, byte G = 255, byte B = 255, bool force = false)
@@ -58812,10 +_,12 @@
 								num14++;
 							}
 						}
-						for (int num16 = 0; num16 < 580; num16++)
+
+						for (int num16 = 0; num16 < Main.nextNPC.Length; num16++)
 						{
 							Main.nextNPC[num16] = false;
 						}
+
 						Main.checkForSpawns = 0;
 						WorldGen.spawnNPC = 0;
 						int num17 = 0;
@@ -58851,105 +_,132 @@
 								{
 									WorldGen.QuickFindHome(num42);
 								}
+
 								if (Main.npc[num42].type == 37)
 								{
 									num22++;
 								}
+
 								if (Main.npc[num42].type == 17)
 								{
 									num17++;
 								}
+
 								if (Main.npc[num42].type == 18)
 								{
 									num18++;
 								}
+
 								if (Main.npc[num42].type == 19)
 								{
 									num20++;
 								}
+
 								if (Main.npc[num42].type == 20)
 								{
 									num19++;
 								}
+
 								if (Main.npc[num42].type == 22)
 								{
 									num21++;
 								}
+
 								if (Main.npc[num42].type == 38)
 								{
 									num23++;
 								}
+
 								if (Main.npc[num42].type == 54)
 								{
 									num24++;
 								}
+
 								if (Main.npc[num42].type == 107)
 								{
 									num26++;
 								}
+
 								if (Main.npc[num42].type == 108)
 								{
 									num25++;
 								}
+
 								if (Main.npc[num42].type == 124)
 								{
 									num27++;
 								}
+
 								if (Main.npc[num42].type == 142)
 								{
 									num28++;
 								}
+
 								if (Main.npc[num42].type == 160)
 								{
 									num29++;
 								}
+
 								if (Main.npc[num42].type == 178)
 								{
 									num30++;
 								}
+
 								if (Main.npc[num42].type == 207)
 								{
 									num31++;
 								}
+
 								if (Main.npc[num42].type == 208)
 								{
 									num32++;
 								}
+
 								if (Main.npc[num42].type == 209)
 								{
 									num33++;
 								}
+
 								if (Main.npc[num42].type == 227)
 								{
 									num34++;
 								}
+
 								if (Main.npc[num42].type == 228)
 								{
 									num35++;
 								}
+
 								if (Main.npc[num42].type == 229)
 								{
 									num36++;
 								}
+
 								if (Main.npc[num42].type == 353)
 								{
 									num37++;
 								}
+
 								if (Main.npc[num42].type == 369)
 								{
 									num38++;
 								}
+
 								if (Main.npc[num42].type == 441)
 								{
 									num39++;
-								}
+									//patch file: num40
+								}
+
 								if (Main.npc[num42].type == 550)
 								{
 									num40++;
 								}
+
 								num41++;
 							}
 						}
+
 						if (WorldGen.spawnNPC == 0)
 						{
 							int num43 = 0;
@@ -58969,46 +_,56 @@
 										{
 											if (num43 < 2000000000)
 											{
+												//patch file: num43
 												if (Main.player[num45].inventory[num46].type == 71)
 												{
 													num43 += Main.player[num45].inventory[num46].stack;
 												}
+
 												if (Main.player[num45].inventory[num46].type == 72)
 												{
 													num43 += Main.player[num45].inventory[num46].stack * 100;
 												}
+
 												if (Main.player[num45].inventory[num46].type == 73)
 												{
 													num43 += Main.player[num45].inventory[num46].stack * 10000;
 												}
+
 												if (Main.player[num45].inventory[num46].type == 74)
 												{
 													num43 += Main.player[num45].inventory[num46].stack * 1000000;
 												}
 											}
+
 											if (Main.player[num45].inventory[num46].ammo == AmmoID.Bullet || Main.player[num45].inventory[num46].useAmmo == AmmoID.Bullet)
 											{
 												flag6 = true;
 											}
+
 											if (Main.player[num45].inventory[num46].type == 166 || Main.player[num45].inventory[num46].type == 167 || Main.player[num45].inventory[num46].type == 168 || Main.player[num45].inventory[num46].type == 235 || Main.player[num45].inventory[num46].type == 2896 || Main.player[num45].inventory[num46].type == 3547)
 											{
 												flag7 = true;
 											}
+
 											if (Main.player[num45].inventory[num46].dye > 0 || (Main.player[num45].inventory[num46].type >= 1107 && Main.player[num45].inventory[num46].type <= 1120) || (Main.player[num45].inventory[num46].type >= 3385 && Main.player[num45].inventory[num46].type <= 3388))
 											{
 												if (Main.player[num45].inventory[num46].type >= 3385 && Main.player[num45].inventory[num46].type <= 3388)
 												{
 													flag9 = true;
 												}
+
 												flag8 = true;
 											}
 										}
 									}
+
 									int num47 = Main.player[num45].statLifeMax / 20;
 									if (num47 > 5)
 									{
 										flag5 = true;
 									}
+
 									num44 += num47;
 									if (!flag8)
 									{
@@ -59029,195 +_,244 @@
 								Main.npc[num49].homeTileX = Main.dungeonX;
 								Main.npc[num49].homeTileY = Main.dungeonY;
 							}
+
 							bool flag10 = false;
 							if (Main.rand.Next(40) == 0)
 							{
 								flag10 = true;
 							}
+
 							if (num21 < 1)
 							{
 								Main.nextNPC[22] = true;
 							}
+
 							if ((double)num43 > 5000.0 && num17 < 1)
 							{
 								Main.nextNPC[17] = true;
 							}
+
 							if (flag5 && num18 < 1 && num17 > 0)
 							{
 								Main.nextNPC[18] = true;
 							}
+
 							if (flag6 && num20 < 1)
 							{
 								Main.nextNPC[19] = true;
 							}
+
 							if ((NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3) && num19 < 1)
 							{
 								Main.nextNPC[20] = true;
 							}
+
 							if (flag7 && num17 > 0 && num23 < 1)
 							{
 								Main.nextNPC[38] = true;
 							}
+
 							if (NPC.savedStylist && num37 < 1)
 							{
 								Main.nextNPC[353] = true;
 							}
+
 							if (NPC.savedAngler && num38 < 1)
 							{
 								Main.nextNPC[369] = true;
 							}
+
 							if (NPC.downedBoss3 && num24 < 1)
 							{
 								Main.nextNPC[54] = true;
 							}
+
 							if (NPC.savedGoblin && num26 < 1)
 							{
 								Main.nextNPC[107] = true;
 							}
+
 							if (NPC.savedTaxCollector && num39 < 1)
 							{
 								Main.nextNPC[441] = true;
 							}
+
 							if (NPC.savedWizard && num25 < 1)
 							{
 								Main.nextNPC[108] = true;
 							}
+
 							if (NPC.savedMech && num27 < 1)
 							{
 								Main.nextNPC[124] = true;
 							}
+
 							if (NPC.downedFrost && num28 < 1 && Main.xMas)
 							{
 								Main.nextNPC[142] = true;
 							}
+
 							if (NPC.downedMechBossAny && num30 < 1)
 							{
 								Main.nextNPC[178] = true;
 							}
+
 							if (flag8 && num31 < 1 && (NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3 || flag9))
 							{
 								Main.nextNPC[207] = true;
 							}
+
 							if (NPC.downedQueenBee && num35 < 1)
 							{
 								Main.nextNPC[228] = true;
 							}
+
 							if (NPC.downedPirates && num36 < 1)
 							{
 								Main.nextNPC[229] = true;
 							}
+
 							if (num29 < 1 && Main.hardMode)
 							{
 								Main.nextNPC[160] = true;
 							}
+
 							if (Main.hardMode && NPC.downedPlantBoss && num33 < 1)
 							{
 								Main.nextNPC[209] = true;
 							}
+
 							if (num41 >= 8 && num34 < 1)
 							{
 								Main.nextNPC[227] = true;
 							}
+
 							if (flag10 && num32 < 1 && num41 >= 14)
 							{
 								Main.nextNPC[208] = true;
 							}
+
 							if (NPC.savedBartender && num40 < 1)
 							{
 								Main.nextNPC[550] = true;
 							}
+
 							if (WorldGen.spawnNPC == 0 && num21 < 1)
 							{
 								WorldGen.spawnNPC = 22;
 							}
+
 							if (WorldGen.spawnNPC == 0 && (double)num43 > 5000.0 && num17 < 1)
 							{
 								WorldGen.spawnNPC = 17;
 							}
+
 							if (WorldGen.spawnNPC == 0 && flag5 && num18 < 1 && num17 > 0)
 							{
 								WorldGen.spawnNPC = 18;
 							}
+
 							if (WorldGen.spawnNPC == 0 && flag6 && num20 < 1)
 							{
 								WorldGen.spawnNPC = 19;
 							}
+
 							if (WorldGen.spawnNPC == 0 && NPC.savedGoblin && num26 < 1)
 							{
 								WorldGen.spawnNPC = 107;
 							}
+
 							if (WorldGen.spawnNPC == 0 && NPC.savedTaxCollector && num39 < 1)
 							{
 								WorldGen.spawnNPC = 441;
 							}
+
 							if (WorldGen.spawnNPC == 0 && NPC.savedWizard && num25 < 1)
 							{
 								WorldGen.spawnNPC = 108;
 							}
+
 							if (WorldGen.spawnNPC == 0 && Main.hardMode && num29 < 1)
 							{
 								WorldGen.spawnNPC = 160;
 							}
+
 							if (WorldGen.spawnNPC == 0 && (NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3) && num19 < 1)
 							{
 								WorldGen.spawnNPC = 20;
 							}
+
 							if (WorldGen.spawnNPC == 0 && flag7 && num17 > 0 && num23 < 1)
 							{
 								WorldGen.spawnNPC = 38;
 							}
+
 							if (WorldGen.spawnNPC == 0 && NPC.downedQueenBee && num35 < 1)
 							{
 								WorldGen.spawnNPC = 228;
 							}
+
 							if (WorldGen.spawnNPC == 0 && NPC.downedMechBossAny && num30 < 1)
 							{
 								WorldGen.spawnNPC = 178;
 							}
+
 							if (WorldGen.spawnNPC == 0 && NPC.savedMech && num27 < 1)
 							{
 								WorldGen.spawnNPC = 124;
 							}
+
 							if (WorldGen.spawnNPC == 0 && NPC.savedAngler && num38 < 1)
 							{
 								WorldGen.spawnNPC = 369;
 							}
+
 							if (WorldGen.spawnNPC == 0 && Main.hardMode && NPC.downedPlantBoss && num33 < 1)
 							{
 								WorldGen.spawnNPC = 209;
 							}
+
 							if (WorldGen.spawnNPC == 0 && NPC.downedPirates && num36 < 1)
 							{
 								WorldGen.spawnNPC = 229;
 							}
+
 							if (WorldGen.spawnNPC == 0 && NPC.downedBoss3 && num24 < 1)
 							{
 								WorldGen.spawnNPC = 54;
 							}
+
 							if (WorldGen.spawnNPC == 0 && NPC.savedStylist && num37 < 1)
 							{
 								WorldGen.spawnNPC = 353;
 							}
+
 							if (WorldGen.spawnNPC == 0 && flag8 && num31 < 1)
 							{
 								WorldGen.spawnNPC = 207;
 							}
+
 							if (WorldGen.spawnNPC == 0 && num41 >= 8 && num34 < 1)
 							{
 								WorldGen.spawnNPC = 227;
 							}
+
 							if (WorldGen.spawnNPC == 0 && flag10 && num41 >= 14 && num32 < 1)
 							{
 								WorldGen.spawnNPC = 208;
 							}
+
 							if (WorldGen.spawnNPC == 0 && NPC.downedFrost && num28 < 1 && Main.xMas)
 							{
 								WorldGen.spawnNPC = 142;
 							}
+
 							if (WorldGen.spawnNPC == 0 && NPC.savedBartender && num40 < 1)
 							{
 								WorldGen.spawnNPC = 550;
 							}
+
+							NPCLoader.CanTownNPCSpawn(num41, num43);
 						}
 					}
 				}
@@ -59260,13 +_,13 @@
 			{
 				case TileChangeType.LavaWater:
 					Main.PlaySound(SoundID.LiquidsWaterLava, x * 16 + count * 8, y * 16 + count * 8);
-					return;
+				return;
 				case TileChangeType.HoneyWater:
 					Main.PlaySound(SoundID.LiquidsHoneyWater, x * 16 + count * 8, y * 16 + count * 8);
-					return;
+				return;
 				case TileChangeType.HoneyLava:
 					Main.PlaySound(SoundID.LiquidsHoneyLava, x * 16 + count * 8, y * 16 + count * 8);
-					return;
+				return;
 				default:
 					return;
 			}
@@ -59428,18 +_,25 @@
 						{
 							num2 *= Main.soundVolume;
 						}
+
 						if (num2 > 1f)
 						{
 							num2 = 1f;
 						}
+
 						SoundEffectInstance result;
 						if (num2 <= 0f && (type < 30 || type > 35) && type != 39)
 						{
 							result = null;
 							return result;
 						}
+
 						SoundEffectInstance soundEffectInstance = null;
-						if (type == 0)
+						if (SoundLoader.PlayModSound(type, num, num2, num3, ref soundEffectInstance))
+						{
+							// Modders can return null to not play anything (prevent overlap), return the original sound effect (restarts sound), or return a new sound effect instance to allow overlapping sound.
+						}
+						else if (type == 0)
 						{
 							int num7 = Main.rand.Next(3);
 							Main.soundInstanceDig[num7].Stop();
@@ -60056,22 +_,70 @@
 							soundEffectInstance.Pan = num3;
 							Main.trackableSoundInstances[num] = soundEffectInstance;
 						}
+
+						// TODO, trackable sounds? verify working. return soundEffectInstance
+						else if (type == SoundLoader.customSoundType)
+						{
+							SoundLoader.customSoundInstances[num].Stop();
+							SoundLoader.customSoundInstances[num] = SoundLoader.customSounds[num].CreateInstance();
+							SoundLoader.customSoundInstances[num].Volume = num2;
+							SoundLoader.customSoundInstances[num].Pan = num3;
+							//Main.PlaySoundInstance(SoundLoader.customSoundInstances[num]);
+							soundEffectInstance = SoundLoader.customSoundInstances[num];
+						}
+
 						if (soundEffectInstance != null)
 						{
 							soundEffectInstance.Pitch += pitchOffset;
 							soundEffectInstance.Volume *= volumeScale;
 							Main.PlaySoundInstance(soundEffectInstance);
 						}
+
+						if ((type >= 30 && type <= 35) || type == 39)
+						{
+							if (Main.ambientError > 0)
+							{
+								Main.ambientError--;
+							}
+						}
+						else
+						{
+							if (Main.soundError > 0)
+							{
+								Main.soundError--;
+							}
+						}
+
 						result = soundEffectInstance;
 						return result;
 					}
 				}
 				catch
 				{
-				}
+					if ((type >= 30 && type <= 35) || type == 39)
+					{
+						Main.ambientError++;
+						if (Main.ambientError >= 100)
+						{
+							Main.ambientError = 0;
+							Main.ambientVolume = 0f;
+						}
+					}
+					else
+					{
+						Main.soundError++;
+						if (Main.soundError >= 100)
+						{
+							Main.soundError = 0;
+							Main.soundVolume = 0f;
+						}
+					}
+				}
+
 				return null;
 #if !WINDOWS
 			}
+
 #endif
 		}
 
@@ -60294,19 +_,21 @@
 			{
 				return;
 			}
+
 			if (!Main.gameMenu)
 			{
 				WorldGen.SaveAndQuit(delegate
-					{
-						Main.menuMode = 888;
-						Main._blockFancyUIWhileLoading = true;
-						Main.LoadPlayers();
-						Main.MenuUI.SetState(Main._characterSelectMenu);
-						Main._blockFancyUIWhileLoading = false;
-						Main._pendingCharacterSelect = method;
-					});
+				{
+					Main.menuMode = 888;
+					Main._blockFancyUIWhileLoading = true;
+					Main.LoadPlayers();
+					Main.MenuUI.SetState(Main._characterSelectMenu);
+					Main._blockFancyUIWhileLoading = false;
+					Main._pendingCharacterSelect = method;
+				});
 				return;
 			}
+
 			Main.menuMode = 888;
 			Main._blockFancyUIWhileLoading = true;
 			Main.LoadPlayers();


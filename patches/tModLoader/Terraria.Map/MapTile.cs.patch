--- src/Terraria\Terraria.Map\MapTile.cs
+++ src/tModLoader\Terraria.Map\MapTile.cs
@@ -1,4 +1,5 @@
 using System;
+using Terraria.ModLoader;
 
 namespace Terraria.Map
 {
@@ -7,6 +8,9 @@
 		public ushort Type;
 		public byte Light;
 		private byte _extraData;
+		internal int x;
+		internal int y;
+		internal ushort modType;
 
 		public bool IsChanged
 		{
@@ -37,21 +41,26 @@
 			}
 		}
 
-		private MapTile(ushort type, byte light, byte extraData)
+		private MapTile(ushort type, byte light, byte extraData, int x, int y)
 		{
 			this.Type = type;
 			this.Light = light;
 			this._extraData = extraData;
+			this.x = x;
+			this.y = y;
+			this.modType = TileLoader.MapModType(x, y);
 		}
 
 		public bool Equals(ref MapTile other)
 		{
-			return this.Light == other.Light && this.Type == other.Type && this.Color == other.Color;
+			return this.Light == other.Light && this.Type == other.Type && this.Color == other.Color &&
+			Main.tile[this.x, this.y].type == Main.tile[other.x, other.y].type && this.modType == other.modType;
 		}
 
 		public bool EqualsWithoutLight(ref MapTile other)
 		{
-			return this.Type == other.Type && this.Color == other.Color;
+			return this.Type == other.Type && this.Color == other.Color &&
+			Main.tile[this.x, this.y].type == Main.tile[other.x, other.y].type && this.modType == other.modType;
 		}
 
 		public void Clear()
@@ -59,16 +68,17 @@
 			this.Type = 0;
 			this.Light = 0;
 			this._extraData = 0;
+			this.modType = 0;
 		}
 
 		public MapTile WithLight(byte light)
 		{
-			return new MapTile(this.Type, light, (byte)(this._extraData | 128));
+			return new MapTile(this.Type, light, (byte)(this._extraData | 128), this.x, this.y);
 		}
 
 		public static MapTile Create(ushort type, byte light, byte color)
 		{
-			return new MapTile(type, light, (byte)(color | 128));
+			return new MapTile(type, light, (byte)(color | 128), 0, 0);
 		}
 	}
 }

